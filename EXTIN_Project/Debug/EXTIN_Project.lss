
EXTIN_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000400e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000400e  000040a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800078  00800078  000040ba  2**0
                  ALLOC
  3 .stab         00003720  00000000  00000000  000040bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001210  00000000  00000000  000077dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000089ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000ad20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000be21  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000cda4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000cf24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d1e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000da74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__vector_1>
       8:	0c 94 9c 07 	jmp	0xf38	; 0xf38 <__vector_2>
       c:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <main>
      8a:	0c 94 05 20 	jmp	0x400a	; 0x400a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ce 1f 	jmp	0x3f9c	; 0x3f9c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ea 1f 	jmp	0x3fd4	; 0x3fd4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 da 1f 	jmp	0x3fb4	; 0x3fb4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f6 1f 	jmp	0x3fec	; 0x3fec <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 da 1f 	jmp	0x3fb4	; 0x3fb4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f6 1f 	jmp	0x3fec	; 0x3fec <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ce 1f 	jmp	0x3f9c	; 0x3f9c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ea 1f 	jmp	0x3fd4	; 0x3fd4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d6 1f 	jmp	0x3fac	; 0x3fac <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f2 1f 	jmp	0x3fe4	; 0x3fe4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 da 1f 	jmp	0x3fb4	; 0x3fb4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f6 1f 	jmp	0x3fec	; 0x3fec <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 da 1f 	jmp	0x3fb4	; 0x3fb4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f6 1f 	jmp	0x3fec	; 0x3fec <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 da 1f 	jmp	0x3fb4	; 0x3fb4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f6 1f 	jmp	0x3fec	; 0x3fec <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 de 1f 	jmp	0x3fbc	; 0x3fbc <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 fa 1f 	jmp	0x3ff4	; 0x3ff4 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <M_GIE_void_enable>:
#include"GIE_priv.h"
#include"GIE_config.h"
#include"GIE_int.h"

void M_GIE_void_enable(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
SET_BIT(SREG_REG,I_BIT);
     ca6:	af e5       	ldi	r26, 0x5F	; 95
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ef e5       	ldi	r30, 0x5F	; 95
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 68       	ori	r24, 0x80	; 128
     cb2:	8c 93       	st	X, r24
asm("SEI");
     cb4:	78 94       	sei

}
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	08 95       	ret

00000cbc <M_GIE_void_disable>:
void M_GIE_void_disable(void)
{
     cbc:	df 93       	push	r29
     cbe:	cf 93       	push	r28
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
	//CLR_BIT(SREG_REG ,I_BIt);
	asm("CLI");
     cc4:	f8 94       	cli
}
     cc6:	cf 91       	pop	r28
     cc8:	df 91       	pop	r29
     cca:	08 95       	ret

00000ccc <M_EXTI_void_Enable>:
#include"EXT1_int.h"

//arra of 3 pointers to function ( call back function )
static void (*Arr_CallBack[3]) (void)={NULL,NULL,NULL};
void M_EXTI_void_Enable(u8 copy_u8IntID,u8 copy_u8Sense)
{
     ccc:	df 93       	push	r29
     cce:	cf 93       	push	r28
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <M_EXTI_void_Enable+0x6>
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <M_EXTI_void_Enable+0x8>
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	89 83       	std	Y+1, r24	; 0x01
     cda:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8Sense>EXTI_TRIG_RAIS_EDGE &&copy_u8Sense<EXTI_TRIG_LOW_LEVEL)
	{
		return;
	}

	switch(copy_u8IntID)
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	28 2f       	mov	r18, r24
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	3c 83       	std	Y+4, r19	; 0x04
     ce4:	2b 83       	std	Y+3, r18	; 0x03
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	9c 81       	ldd	r25, Y+4	; 0x04
     cea:	86 30       	cpi	r24, 0x06	; 6
     cec:	91 05       	cpc	r25, r1
     cee:	59 f0       	breq	.+22     	; 0xd06 <M_EXTI_void_Enable+0x3a>
     cf0:	2b 81       	ldd	r18, Y+3	; 0x03
     cf2:	3c 81       	ldd	r19, Y+4	; 0x04
     cf4:	27 30       	cpi	r18, 0x07	; 7
     cf6:	31 05       	cpc	r19, r1
     cf8:	b1 f0       	breq	.+44     	; 0xd26 <M_EXTI_void_Enable+0x5a>
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	9c 81       	ldd	r25, Y+4	; 0x04
     cfe:	85 30       	cpi	r24, 0x05	; 5
     d00:	91 05       	cpc	r25, r1
     d02:	41 f1       	breq	.+80     	; 0xd54 <M_EXTI_void_Enable+0x88>
     d04:	38 c0       	rjmp	.+112    	; 0xd76 <M_EXTI_void_Enable+0xaa>
		{
		case EXTI_INT0_ID:
		 //step 1: apply mask
			 MCUCR_REG&=EXTI_INT0_TRIG_MASK ;
     d06:	a5 e5       	ldi	r26, 0x55	; 85
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e5 e5       	ldi	r30, 0x55	; 85
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	8c 7f       	andi	r24, 0xFC	; 252
     d12:	8c 93       	st	X, r24
			//step 2 : insert value
			 MCUCR_REG|= copy_u8Sense;
     d14:	a5 e5       	ldi	r26, 0x55	; 85
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e5 e5       	ldi	r30, 0x55	; 85
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	90 81       	ld	r25, Z
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	89 2b       	or	r24, r25
     d22:	8c 93       	st	X, r24
     d24:	28 c0       	rjmp	.+80     	; 0xd76 <M_EXTI_void_Enable+0xaa>
		   break;
		case EXTI_INT1_ID:
			//step 1: apply mask
			 MCUCR_REG&=EXTI_INT1_TRIG_MASK ;
     d26:	a5 e5       	ldi	r26, 0x55	; 85
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e5 e5       	ldi	r30, 0x55	; 85
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	83 7f       	andi	r24, 0xF3	; 243
     d32:	8c 93       	st	X, r24
			//step 2 : insert value
			 MCUCR_REG|= copy_u8Sense<<EXTI_INT1_TRIG_SHIFT;
     d34:	a5 e5       	ldi	r26, 0x55	; 85
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e5 e5       	ldi	r30, 0x55	; 85
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	28 2f       	mov	r18, r24
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	88 2f       	mov	r24, r24
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	88 0f       	add	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	82 2b       	or	r24, r18
     d50:	8c 93       	st	X, r24
     d52:	11 c0       	rjmp	.+34     	; 0xd76 <M_EXTI_void_Enable+0xaa>
			break;
		case EXTI_INT2_ID:
			//step 1: apply mask
			CLR_BIT(MCUSCR_REG,ISC2_BIT);
     d54:	a4 e5       	ldi	r26, 0x54	; 84
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e4 e5       	ldi	r30, 0x54	; 84
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	8f 7b       	andi	r24, 0xBF	; 191
     d60:	8c 93       	st	X, r24
			//step 2 : insert value
			 MCUCR_REG|= GET_BIT(copy_u8Sense,0)<<EXTI_INT2_TRIG_SHIFT;
     d62:	a5 e5       	ldi	r26, 0x55	; 85
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e5 e5       	ldi	r30, 0x55	; 85
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	98 2f       	mov	r25, r24
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	80 74       	andi	r24, 0x40	; 64
     d72:	89 2b       	or	r24, r25
     d74:	8c 93       	st	X, r24
				break;
		}

	//step2 :enable PIE
	if (copy_u8IntID>=EXTI_INT2_ID&&copy_u8IntID<=EXTI_INT1_ID)
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	85 30       	cpi	r24, 0x05	; 5
     d7a:	b0 f0       	brcs	.+44     	; 0xda8 <M_EXTI_void_Enable+0xdc>
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	88 30       	cpi	r24, 0x08	; 8
     d80:	98 f4       	brcc	.+38     	; 0xda8 <M_EXTI_void_Enable+0xdc>
		SET_BIT(GICR_REG,copy_u8IntID);
     d82:	ab e5       	ldi	r26, 0x5B	; 91
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	eb e5       	ldi	r30, 0x5B	; 91
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	48 2f       	mov	r20, r24
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	02 2e       	mov	r0, r18
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <M_EXTI_void_Enable+0xd4>
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	0a 94       	dec	r0
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <M_EXTI_void_Enable+0xd0>
     da4:	84 2b       	or	r24, r20
     da6:	8c 93       	st	X, r24

}
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <M_EXTI_void_Disble>:
void M_EXTI_void_Disble(u8 copy_u8IntID)
{
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	00 d0       	rcall	.+0      	; 0xdbc <M_EXTI_void_Disble+0x6>
     dbc:	0f 92       	push	r0
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	89 83       	std	Y+1, r24	; 0x01
	//METHOD 1
	switch(copy_u8IntID)
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	3b 83       	std	Y+3, r19	; 0x03
     dcc:	2a 83       	std	Y+2, r18	; 0x02
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	9b 81       	ldd	r25, Y+3	; 0x03
     dd2:	86 30       	cpi	r24, 0x06	; 6
     dd4:	91 05       	cpc	r25, r1
     dd6:	59 f0       	breq	.+22     	; 0xdee <M_EXTI_void_Disble+0x38>
     dd8:	2a 81       	ldd	r18, Y+2	; 0x02
     dda:	3b 81       	ldd	r19, Y+3	; 0x03
     ddc:	27 30       	cpi	r18, 0x07	; 7
     dde:	31 05       	cpc	r19, r1
     de0:	71 f0       	breq	.+28     	; 0xdfe <M_EXTI_void_Disble+0x48>
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	9b 81       	ldd	r25, Y+3	; 0x03
     de6:	85 30       	cpi	r24, 0x05	; 5
     de8:	91 05       	cpc	r25, r1
     dea:	89 f0       	breq	.+34     	; 0xe0e <M_EXTI_void_Disble+0x58>
     dec:	17 c0       	rjmp	.+46     	; 0xe1c <M_EXTI_void_Disble+0x66>
	{
	case EXTI_INT0_ID:
	   CLR_BIT(GICR_REG,INT0_BIT);
     dee:	ab e5       	ldi	r26, 0x5B	; 91
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	eb e5       	ldi	r30, 0x5B	; 91
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	8f 7b       	andi	r24, 0xBF	; 191
     dfa:	8c 93       	st	X, r24
     dfc:	0f c0       	rjmp	.+30     	; 0xe1c <M_EXTI_void_Disble+0x66>
	   break;
	case EXTI_INT1_ID:
		   CLR_BIT(GICR_REG,INT1_BIT);
     dfe:	ab e5       	ldi	r26, 0x5B	; 91
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	eb e5       	ldi	r30, 0x5B	; 91
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	8f 77       	andi	r24, 0x7F	; 127
     e0a:	8c 93       	st	X, r24
     e0c:	07 c0       	rjmp	.+14     	; 0xe1c <M_EXTI_void_Disble+0x66>
		   break;
	case EXTI_INT2_ID:
		   CLR_BIT(GICR_REG,INT2_BIT);
     e0e:	ab e5       	ldi	r26, 0x5B	; 91
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	eb e5       	ldi	r30, 0x5B	; 91
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	8f 7d       	andi	r24, 0xDF	; 223
     e1a:	8c 93       	st	X, r24
		   break;
	}
	//METHOD2
	if (copy_u8IntID>=EXTI_INT2_ID&&copy_u8IntID<=EXTI_INT1_ID)
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	85 30       	cpi	r24, 0x05	; 5
     e20:	b8 f0       	brcs	.+46     	; 0xe50 <M_EXTI_void_Disble+0x9a>
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	88 30       	cpi	r24, 0x08	; 8
     e26:	a0 f4       	brcc	.+40     	; 0xe50 <M_EXTI_void_Disble+0x9a>
	CLR_BIT(GICR_REG,copy_u8IntID);
     e28:	ab e5       	ldi	r26, 0x5B	; 91
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	eb e5       	ldi	r30, 0x5B	; 91
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	48 2f       	mov	r20, r24
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	02 2e       	mov	r0, r18
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <M_EXTI_void_Disble+0x90>
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	0a 94       	dec	r0
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <M_EXTI_void_Disble+0x8c>
     e4a:	80 95       	com	r24
     e4c:	84 23       	and	r24, r20
     e4e:	8c 93       	st	X, r24
}
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <M_EXTI_void_setCallback>:
void M_EXTI_void_setCallback(void (*ptrfn)(void),u8 copy_u8IntID)
{
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	00 d0       	rcall	.+0      	; 0xe62 <M_EXTI_void_setCallback+0x6>
     e62:	00 d0       	rcall	.+0      	; 0xe64 <M_EXTI_void_setCallback+0x8>
     e64:	0f 92       	push	r0
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	9a 83       	std	Y+2, r25	; 0x02
     e6c:	89 83       	std	Y+1, r24	; 0x01
     e6e:	6b 83       	std	Y+3, r22	; 0x03
	switch(copy_u8IntID)
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	3d 83       	std	Y+5, r19	; 0x05
     e78:	2c 83       	std	Y+4, r18	; 0x04
     e7a:	8c 81       	ldd	r24, Y+4	; 0x04
     e7c:	9d 81       	ldd	r25, Y+5	; 0x05
     e7e:	86 30       	cpi	r24, 0x06	; 6
     e80:	91 05       	cpc	r25, r1
     e82:	59 f0       	breq	.+22     	; 0xe9a <M_EXTI_void_setCallback+0x3e>
     e84:	2c 81       	ldd	r18, Y+4	; 0x04
     e86:	3d 81       	ldd	r19, Y+5	; 0x05
     e88:	27 30       	cpi	r18, 0x07	; 7
     e8a:	31 05       	cpc	r19, r1
     e8c:	69 f0       	breq	.+26     	; 0xea8 <M_EXTI_void_setCallback+0x4c>
     e8e:	8c 81       	ldd	r24, Y+4	; 0x04
     e90:	9d 81       	ldd	r25, Y+5	; 0x05
     e92:	85 30       	cpi	r24, 0x05	; 5
     e94:	91 05       	cpc	r25, r1
     e96:	79 f0       	breq	.+30     	; 0xeb6 <M_EXTI_void_setCallback+0x5a>
     e98:	14 c0       	rjmp	.+40     	; 0xec2 <M_EXTI_void_setCallback+0x66>
		{
		case EXTI_INT0_ID:
			Arr_CallBack[0]=ptrfn;
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	9a 81       	ldd	r25, Y+2	; 0x02
     e9e:	90 93 79 00 	sts	0x0079, r25
     ea2:	80 93 78 00 	sts	0x0078, r24
     ea6:	0d c0       	rjmp	.+26     	; 0xec2 <M_EXTI_void_setCallback+0x66>
		   break;
		case EXTI_INT1_ID:
			Arr_CallBack[1]=ptrfn;
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	9a 81       	ldd	r25, Y+2	; 0x02
     eac:	90 93 7b 00 	sts	0x007B, r25
     eb0:	80 93 7a 00 	sts	0x007A, r24
     eb4:	06 c0       	rjmp	.+12     	; 0xec2 <M_EXTI_void_setCallback+0x66>
			   break;
		case EXTI_INT2_ID:
			Arr_CallBack[2]=ptrfn;
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	9a 81       	ldd	r25, Y+2	; 0x02
     eba:	90 93 7d 00 	sts	0x007D, r25
     ebe:	80 93 7c 00 	sts	0x007C, r24
			   break;
		}
}
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <__vector_1>:

ISR(INT0_vect)
{
     ed2:	1f 92       	push	r1
     ed4:	0f 92       	push	r0
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	0f 92       	push	r0
     eda:	11 24       	eor	r1, r1
     edc:	2f 93       	push	r18
     ede:	3f 93       	push	r19
     ee0:	4f 93       	push	r20
     ee2:	5f 93       	push	r21
     ee4:	6f 93       	push	r22
     ee6:	7f 93       	push	r23
     ee8:	8f 93       	push	r24
     eea:	9f 93       	push	r25
     eec:	af 93       	push	r26
     eee:	bf 93       	push	r27
     ef0:	ef 93       	push	r30
     ef2:	ff 93       	push	r31
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[0]!=NULL)
     efc:	80 91 78 00 	lds	r24, 0x0078
     f00:	90 91 79 00 	lds	r25, 0x0079
     f04:	00 97       	sbiw	r24, 0x00	; 0
     f06:	29 f0       	breq	.+10     	; 0xf12 <__vector_1+0x40>
	{
		Arr_CallBack[0]();
     f08:	e0 91 78 00 	lds	r30, 0x0078
     f0c:	f0 91 79 00 	lds	r31, 0x0079
     f10:	09 95       	icall
	}
}
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	ff 91       	pop	r31
     f18:	ef 91       	pop	r30
     f1a:	bf 91       	pop	r27
     f1c:	af 91       	pop	r26
     f1e:	9f 91       	pop	r25
     f20:	8f 91       	pop	r24
     f22:	7f 91       	pop	r23
     f24:	6f 91       	pop	r22
     f26:	5f 91       	pop	r21
     f28:	4f 91       	pop	r20
     f2a:	3f 91       	pop	r19
     f2c:	2f 91       	pop	r18
     f2e:	0f 90       	pop	r0
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	0f 90       	pop	r0
     f34:	1f 90       	pop	r1
     f36:	18 95       	reti

00000f38 <__vector_2>:
ISR(INT1_vect)
{
     f38:	1f 92       	push	r1
     f3a:	0f 92       	push	r0
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	0f 92       	push	r0
     f40:	11 24       	eor	r1, r1
     f42:	2f 93       	push	r18
     f44:	3f 93       	push	r19
     f46:	4f 93       	push	r20
     f48:	5f 93       	push	r21
     f4a:	6f 93       	push	r22
     f4c:	7f 93       	push	r23
     f4e:	8f 93       	push	r24
     f50:	9f 93       	push	r25
     f52:	af 93       	push	r26
     f54:	bf 93       	push	r27
     f56:	ef 93       	push	r30
     f58:	ff 93       	push	r31
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[1]!=NULL)
     f62:	80 91 7a 00 	lds	r24, 0x007A
     f66:	90 91 7b 00 	lds	r25, 0x007B
     f6a:	00 97       	sbiw	r24, 0x00	; 0
     f6c:	29 f0       	breq	.+10     	; 0xf78 <__vector_2+0x40>
		{
			Arr_CallBack[1]();
     f6e:	e0 91 7a 00 	lds	r30, 0x007A
     f72:	f0 91 7b 00 	lds	r31, 0x007B
     f76:	09 95       	icall
		}
}
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	ff 91       	pop	r31
     f7e:	ef 91       	pop	r30
     f80:	bf 91       	pop	r27
     f82:	af 91       	pop	r26
     f84:	9f 91       	pop	r25
     f86:	8f 91       	pop	r24
     f88:	7f 91       	pop	r23
     f8a:	6f 91       	pop	r22
     f8c:	5f 91       	pop	r21
     f8e:	4f 91       	pop	r20
     f90:	3f 91       	pop	r19
     f92:	2f 91       	pop	r18
     f94:	0f 90       	pop	r0
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	0f 90       	pop	r0
     f9a:	1f 90       	pop	r1
     f9c:	18 95       	reti

00000f9e <__vector_3>:
ISR(INT2_vect)
{
     f9e:	1f 92       	push	r1
     fa0:	0f 92       	push	r0
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	0f 92       	push	r0
     fa6:	11 24       	eor	r1, r1
     fa8:	2f 93       	push	r18
     faa:	3f 93       	push	r19
     fac:	4f 93       	push	r20
     fae:	5f 93       	push	r21
     fb0:	6f 93       	push	r22
     fb2:	7f 93       	push	r23
     fb4:	8f 93       	push	r24
     fb6:	9f 93       	push	r25
     fb8:	af 93       	push	r26
     fba:	bf 93       	push	r27
     fbc:	ef 93       	push	r30
     fbe:	ff 93       	push	r31
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[2]!=NULL)
     fc8:	80 91 7c 00 	lds	r24, 0x007C
     fcc:	90 91 7d 00 	lds	r25, 0x007D
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	29 f0       	breq	.+10     	; 0xfde <__vector_3+0x40>
		{
			Arr_CallBack[2]();
     fd4:	e0 91 7c 00 	lds	r30, 0x007C
     fd8:	f0 91 7d 00 	lds	r31, 0x007D
     fdc:	09 95       	icall
		}
}
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	ff 91       	pop	r31
     fe4:	ef 91       	pop	r30
     fe6:	bf 91       	pop	r27
     fe8:	af 91       	pop	r26
     fea:	9f 91       	pop	r25
     fec:	8f 91       	pop	r24
     fee:	7f 91       	pop	r23
     ff0:	6f 91       	pop	r22
     ff2:	5f 91       	pop	r21
     ff4:	4f 91       	pop	r20
     ff6:	3f 91       	pop	r19
     ff8:	2f 91       	pop	r18
     ffa:	0f 90       	pop	r0
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	0f 90       	pop	r0
    1000:	1f 90       	pop	r1
    1002:	18 95       	reti

00001004 <M_DIO_void_setPinDir>:
#include "DIO_pvt.h"
#include "DIO_config.h"
#include "DIO_int.h"

void M_DIO_void_setPinDir(u8 Port, PIN_T Pin, Dir_T DIRECTION)
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	2d 97       	sbiw	r28, 0x0d	; 13
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	6a 83       	std	Y+2, r22	; 0x02
    101c:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port)
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	3d 87       	std	Y+13, r19	; 0x0d
    1026:	2c 87       	std	Y+12, r18	; 0x0c
    1028:	8c 85       	ldd	r24, Y+12	; 0x0c
    102a:	9d 85       	ldd	r25, Y+13	; 0x0d
    102c:	81 30       	cpi	r24, 0x01	; 1
    102e:	91 05       	cpc	r25, r1
    1030:	09 f4       	brne	.+2      	; 0x1034 <M_DIO_void_setPinDir+0x30>
    1032:	4f c0       	rjmp	.+158    	; 0x10d2 <M_DIO_void_setPinDir+0xce>
    1034:	2c 85       	ldd	r18, Y+12	; 0x0c
    1036:	3d 85       	ldd	r19, Y+13	; 0x0d
    1038:	22 30       	cpi	r18, 0x02	; 2
    103a:	31 05       	cpc	r19, r1
    103c:	2c f4       	brge	.+10     	; 0x1048 <M_DIO_void_setPinDir+0x44>
    103e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1040:	9d 85       	ldd	r25, Y+13	; 0x0d
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	71 f0       	breq	.+28     	; 0x1062 <M_DIO_void_setPinDir+0x5e>
    1046:	ec c0       	rjmp	.+472    	; 0x1220 <M_DIO_void_setPinDir+0x21c>
    1048:	2c 85       	ldd	r18, Y+12	; 0x0c
    104a:	3d 85       	ldd	r19, Y+13	; 0x0d
    104c:	22 30       	cpi	r18, 0x02	; 2
    104e:	31 05       	cpc	r19, r1
    1050:	09 f4       	brne	.+2      	; 0x1054 <M_DIO_void_setPinDir+0x50>
    1052:	77 c0       	rjmp	.+238    	; 0x1142 <M_DIO_void_setPinDir+0x13e>
    1054:	8c 85       	ldd	r24, Y+12	; 0x0c
    1056:	9d 85       	ldd	r25, Y+13	; 0x0d
    1058:	83 30       	cpi	r24, 0x03	; 3
    105a:	91 05       	cpc	r25, r1
    105c:	09 f4       	brne	.+2      	; 0x1060 <M_DIO_void_setPinDir+0x5c>
    105e:	a9 c0       	rjmp	.+338    	; 0x11b2 <M_DIO_void_setPinDir+0x1ae>
    1060:	df c0       	rjmp	.+446    	; 0x1220 <M_DIO_void_setPinDir+0x21c>
	{
	case PORTA_ID :
		switch (DIRECTION)
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	3b 87       	std	Y+11, r19	; 0x0b
    106a:	2a 87       	std	Y+10, r18	; 0x0a
    106c:	8a 85       	ldd	r24, Y+10	; 0x0a
    106e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	31 f0       	breq	.+12     	; 0x1080 <M_DIO_void_setPinDir+0x7c>
    1074:	2a 85       	ldd	r18, Y+10	; 0x0a
    1076:	3b 85       	ldd	r19, Y+11	; 0x0b
    1078:	21 30       	cpi	r18, 0x01	; 1
    107a:	31 05       	cpc	r19, r1
    107c:	b1 f0       	breq	.+44     	; 0x10aa <M_DIO_void_setPinDir+0xa6>
    107e:	d0 c0       	rjmp	.+416    	; 0x1220 <M_DIO_void_setPinDir+0x21c>
		{
		case IN:
			 CLR_BIT(DDRA,Pin);
    1080:	aa e3       	ldi	r26, 0x3A	; 58
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	ea e3       	ldi	r30, 0x3A	; 58
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	48 2f       	mov	r20, r24
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 2e       	mov	r0, r18
    1098:	02 c0       	rjmp	.+4      	; 0x109e <M_DIO_void_setPinDir+0x9a>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	0a 94       	dec	r0
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <M_DIO_void_setPinDir+0x96>
    10a2:	80 95       	com	r24
    10a4:	84 23       	and	r24, r20
    10a6:	8c 93       	st	X, r24
    10a8:	bb c0       	rjmp	.+374    	; 0x1220 <M_DIO_void_setPinDir+0x21c>
			 break;
		case OUT:
			SET_BIT(DDRA,Pin);
    10aa:	aa e3       	ldi	r26, 0x3A	; 58
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	ea e3       	ldi	r30, 0x3A	; 58
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <M_DIO_void_setPinDir+0xc4>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <M_DIO_void_setPinDir+0xc0>
    10cc:	84 2b       	or	r24, r20
    10ce:	8c 93       	st	X, r24
    10d0:	a7 c0       	rjmp	.+334    	; 0x1220 <M_DIO_void_setPinDir+0x21c>
			break;
		}
		break;
	case PORTB_ID :
				switch (DIRECTION)
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	39 87       	std	Y+9, r19	; 0x09
    10da:	28 87       	std	Y+8, r18	; 0x08
    10dc:	88 85       	ldd	r24, Y+8	; 0x08
    10de:	99 85       	ldd	r25, Y+9	; 0x09
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	31 f0       	breq	.+12     	; 0x10f0 <M_DIO_void_setPinDir+0xec>
    10e4:	28 85       	ldd	r18, Y+8	; 0x08
    10e6:	39 85       	ldd	r19, Y+9	; 0x09
    10e8:	21 30       	cpi	r18, 0x01	; 1
    10ea:	31 05       	cpc	r19, r1
    10ec:	b1 f0       	breq	.+44     	; 0x111a <M_DIO_void_setPinDir+0x116>
    10ee:	98 c0       	rjmp	.+304    	; 0x1220 <M_DIO_void_setPinDir+0x21c>
				{
				case IN:
					 CLR_BIT(DDRB,Pin);
    10f0:	a7 e3       	ldi	r26, 0x37	; 55
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e7 e3       	ldi	r30, 0x37	; 55
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	48 2f       	mov	r20, r24
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	02 2e       	mov	r0, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <M_DIO_void_setPinDir+0x10a>
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	0a 94       	dec	r0
    1110:	e2 f7       	brpl	.-8      	; 0x110a <M_DIO_void_setPinDir+0x106>
    1112:	80 95       	com	r24
    1114:	84 23       	and	r24, r20
    1116:	8c 93       	st	X, r24
    1118:	83 c0       	rjmp	.+262    	; 0x1220 <M_DIO_void_setPinDir+0x21c>
					 break;
				case OUT:
					SET_BIT(DDRB,Pin);
    111a:	a7 e3       	ldi	r26, 0x37	; 55
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e7 e3       	ldi	r30, 0x37	; 55
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	48 2f       	mov	r20, r24
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 2e       	mov	r0, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <M_DIO_void_setPinDir+0x134>
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	0a 94       	dec	r0
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <M_DIO_void_setPinDir+0x130>
    113c:	84 2b       	or	r24, r20
    113e:	8c 93       	st	X, r24
    1140:	6f c0       	rjmp	.+222    	; 0x1220 <M_DIO_void_setPinDir+0x21c>
					break;
				}
			break;
	case PORTC_ID:
				switch (DIRECTION)
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	3f 83       	std	Y+7, r19	; 0x07
    114a:	2e 83       	std	Y+6, r18	; 0x06
    114c:	8e 81       	ldd	r24, Y+6	; 0x06
    114e:	9f 81       	ldd	r25, Y+7	; 0x07
    1150:	00 97       	sbiw	r24, 0x00	; 0
    1152:	31 f0       	breq	.+12     	; 0x1160 <M_DIO_void_setPinDir+0x15c>
    1154:	2e 81       	ldd	r18, Y+6	; 0x06
    1156:	3f 81       	ldd	r19, Y+7	; 0x07
    1158:	21 30       	cpi	r18, 0x01	; 1
    115a:	31 05       	cpc	r19, r1
    115c:	b1 f0       	breq	.+44     	; 0x118a <M_DIO_void_setPinDir+0x186>
    115e:	60 c0       	rjmp	.+192    	; 0x1220 <M_DIO_void_setPinDir+0x21c>
				{
				case IN:
						 CLR_BIT(DDRC,Pin);
    1160:	a4 e3       	ldi	r26, 0x34	; 52
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e4 e3       	ldi	r30, 0x34	; 52
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <M_DIO_void_setPinDir+0x17a>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <M_DIO_void_setPinDir+0x176>
    1182:	80 95       	com	r24
    1184:	84 23       	and	r24, r20
    1186:	8c 93       	st	X, r24
    1188:	4b c0       	rjmp	.+150    	; 0x1220 <M_DIO_void_setPinDir+0x21c>
						 break;
				case OUT:
						 SET_BIT(DDRC,Pin);
    118a:	a4 e3       	ldi	r26, 0x34	; 52
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e4 e3       	ldi	r30, 0x34	; 52
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	48 2f       	mov	r20, r24
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 2e       	mov	r0, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <M_DIO_void_setPinDir+0x1a4>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	0a 94       	dec	r0
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <M_DIO_void_setPinDir+0x1a0>
    11ac:	84 2b       	or	r24, r20
    11ae:	8c 93       	st	X, r24
    11b0:	37 c0       	rjmp	.+110    	; 0x1220 <M_DIO_void_setPinDir+0x21c>
						 break;
					}
				break;
	case PORTD_ID :
				 switch (DIRECTION)
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	3d 83       	std	Y+5, r19	; 0x05
    11ba:	2c 83       	std	Y+4, r18	; 0x04
    11bc:	8c 81       	ldd	r24, Y+4	; 0x04
    11be:	9d 81       	ldd	r25, Y+5	; 0x05
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	31 f0       	breq	.+12     	; 0x11d0 <M_DIO_void_setPinDir+0x1cc>
    11c4:	2c 81       	ldd	r18, Y+4	; 0x04
    11c6:	3d 81       	ldd	r19, Y+5	; 0x05
    11c8:	21 30       	cpi	r18, 0x01	; 1
    11ca:	31 05       	cpc	r19, r1
    11cc:	b1 f0       	breq	.+44     	; 0x11fa <M_DIO_void_setPinDir+0x1f6>
    11ce:	28 c0       	rjmp	.+80     	; 0x1220 <M_DIO_void_setPinDir+0x21c>
				 {
					case IN:
						 CLR_BIT(DDRD,Pin);
    11d0:	a1 e3       	ldi	r26, 0x31	; 49
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e1 e3       	ldi	r30, 0x31	; 49
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	48 2f       	mov	r20, r24
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 2e       	mov	r0, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <M_DIO_void_setPinDir+0x1ea>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <M_DIO_void_setPinDir+0x1e6>
    11f2:	80 95       	com	r24
    11f4:	84 23       	and	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	13 c0       	rjmp	.+38     	; 0x1220 <M_DIO_void_setPinDir+0x21c>
						 break;
					case OUT:
						SET_BIT(DDRD,Pin);
    11fa:	a1 e3       	ldi	r26, 0x31	; 49
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e1 e3       	ldi	r30, 0x31	; 49
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <M_DIO_void_setPinDir+0x214>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <M_DIO_void_setPinDir+0x210>
    121c:	84 2b       	or	r24, r20
    121e:	8c 93       	st	X, r24
						 break;
				}
				break;
	}
}
    1220:	2d 96       	adiw	r28, 0x0d	; 13
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <M_DIO_void_setPinValue>:
void M_DIO_void_setPinValue(u8 Port, u8 Pin, VALUE_T value)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	2d 97       	sbiw	r28, 0x0d	; 13
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	89 83       	std	Y+1, r24	; 0x01
    1248:	6a 83       	std	Y+2, r22	; 0x02
    124a:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port)
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	3d 87       	std	Y+13, r19	; 0x0d
    1254:	2c 87       	std	Y+12, r18	; 0x0c
    1256:	8c 85       	ldd	r24, Y+12	; 0x0c
    1258:	9d 85       	ldd	r25, Y+13	; 0x0d
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	91 05       	cpc	r25, r1
    125e:	09 f4       	brne	.+2      	; 0x1262 <M_DIO_void_setPinValue+0x30>
    1260:	4f c0       	rjmp	.+158    	; 0x1300 <M_DIO_void_setPinValue+0xce>
    1262:	2c 85       	ldd	r18, Y+12	; 0x0c
    1264:	3d 85       	ldd	r19, Y+13	; 0x0d
    1266:	22 30       	cpi	r18, 0x02	; 2
    1268:	31 05       	cpc	r19, r1
    126a:	2c f4       	brge	.+10     	; 0x1276 <M_DIO_void_setPinValue+0x44>
    126c:	8c 85       	ldd	r24, Y+12	; 0x0c
    126e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	71 f0       	breq	.+28     	; 0x1290 <M_DIO_void_setPinValue+0x5e>
    1274:	ec c0       	rjmp	.+472    	; 0x144e <M_DIO_void_setPinValue+0x21c>
    1276:	2c 85       	ldd	r18, Y+12	; 0x0c
    1278:	3d 85       	ldd	r19, Y+13	; 0x0d
    127a:	22 30       	cpi	r18, 0x02	; 2
    127c:	31 05       	cpc	r19, r1
    127e:	09 f4       	brne	.+2      	; 0x1282 <M_DIO_void_setPinValue+0x50>
    1280:	77 c0       	rjmp	.+238    	; 0x1370 <M_DIO_void_setPinValue+0x13e>
    1282:	8c 85       	ldd	r24, Y+12	; 0x0c
    1284:	9d 85       	ldd	r25, Y+13	; 0x0d
    1286:	83 30       	cpi	r24, 0x03	; 3
    1288:	91 05       	cpc	r25, r1
    128a:	09 f4       	brne	.+2      	; 0x128e <M_DIO_void_setPinValue+0x5c>
    128c:	a9 c0       	rjmp	.+338    	; 0x13e0 <M_DIO_void_setPinValue+0x1ae>
    128e:	df c0       	rjmp	.+446    	; 0x144e <M_DIO_void_setPinValue+0x21c>
		{
		case PORTA_ID :
			switch (value)
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	3b 87       	std	Y+11, r19	; 0x0b
    1298:	2a 87       	std	Y+10, r18	; 0x0a
    129a:	8a 85       	ldd	r24, Y+10	; 0x0a
    129c:	9b 85       	ldd	r25, Y+11	; 0x0b
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	31 f0       	breq	.+12     	; 0x12ae <M_DIO_void_setPinValue+0x7c>
    12a2:	2a 85       	ldd	r18, Y+10	; 0x0a
    12a4:	3b 85       	ldd	r19, Y+11	; 0x0b
    12a6:	21 30       	cpi	r18, 0x01	; 1
    12a8:	31 05       	cpc	r19, r1
    12aa:	b1 f0       	breq	.+44     	; 0x12d8 <M_DIO_void_setPinValue+0xa6>
    12ac:	d0 c0       	rjmp	.+416    	; 0x144e <M_DIO_void_setPinValue+0x21c>
			{
			case LOW:
				 CLR_BIT(PORTA_REG,Pin);
    12ae:	ab e3       	ldi	r26, 0x3B	; 59
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	eb e3       	ldi	r30, 0x3B	; 59
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	48 2f       	mov	r20, r24
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	02 2e       	mov	r0, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <M_DIO_void_setPinValue+0x9a>
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	0a 94       	dec	r0
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <M_DIO_void_setPinValue+0x96>
    12d0:	80 95       	com	r24
    12d2:	84 23       	and	r24, r20
    12d4:	8c 93       	st	X, r24
    12d6:	bb c0       	rjmp	.+374    	; 0x144e <M_DIO_void_setPinValue+0x21c>
				 break;
			case HIGH:
				SET_BIT(PORTA_REG,Pin);
    12d8:	ab e3       	ldi	r26, 0x3B	; 59
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	eb e3       	ldi	r30, 0x3B	; 59
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	48 2f       	mov	r20, r24
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	02 2e       	mov	r0, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <M_DIO_void_setPinValue+0xc4>
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	0a 94       	dec	r0
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <M_DIO_void_setPinValue+0xc0>
    12fa:	84 2b       	or	r24, r20
    12fc:	8c 93       	st	X, r24
    12fe:	a7 c0       	rjmp	.+334    	; 0x144e <M_DIO_void_setPinValue+0x21c>
				break;
		   }
			break;
		case PORTB_ID :
			switch (value)
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	39 87       	std	Y+9, r19	; 0x09
    1308:	28 87       	std	Y+8, r18	; 0x08
    130a:	88 85       	ldd	r24, Y+8	; 0x08
    130c:	99 85       	ldd	r25, Y+9	; 0x09
    130e:	00 97       	sbiw	r24, 0x00	; 0
    1310:	31 f0       	breq	.+12     	; 0x131e <M_DIO_void_setPinValue+0xec>
    1312:	28 85       	ldd	r18, Y+8	; 0x08
    1314:	39 85       	ldd	r19, Y+9	; 0x09
    1316:	21 30       	cpi	r18, 0x01	; 1
    1318:	31 05       	cpc	r19, r1
    131a:	b1 f0       	breq	.+44     	; 0x1348 <M_DIO_void_setPinValue+0x116>
    131c:	98 c0       	rjmp	.+304    	; 0x144e <M_DIO_void_setPinValue+0x21c>
			{
			case LOW:
				 CLR_BIT(PORTB_REG,Pin);
    131e:	a8 e3       	ldi	r26, 0x38	; 56
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e8 e3       	ldi	r30, 0x38	; 56
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	48 2f       	mov	r20, r24
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	02 2e       	mov	r0, r18
    1336:	02 c0       	rjmp	.+4      	; 0x133c <M_DIO_void_setPinValue+0x10a>
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	0a 94       	dec	r0
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <M_DIO_void_setPinValue+0x106>
    1340:	80 95       	com	r24
    1342:	84 23       	and	r24, r20
    1344:	8c 93       	st	X, r24
    1346:	83 c0       	rjmp	.+262    	; 0x144e <M_DIO_void_setPinValue+0x21c>
				 break;
			case HIGH:
				 SET_BIT(PORTB_REG,Pin);
    1348:	a8 e3       	ldi	r26, 0x38	; 56
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	e8 e3       	ldi	r30, 0x38	; 56
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	48 2f       	mov	r20, r24
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	02 2e       	mov	r0, r18
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <M_DIO_void_setPinValue+0x134>
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	0a 94       	dec	r0
    1368:	e2 f7       	brpl	.-8      	; 0x1362 <M_DIO_void_setPinValue+0x130>
    136a:	84 2b       	or	r24, r20
    136c:	8c 93       	st	X, r24
    136e:	6f c0       	rjmp	.+222    	; 0x144e <M_DIO_void_setPinValue+0x21c>
				 break;
			}
			break;
		case PORTC_ID:
			switch (value)
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	3f 83       	std	Y+7, r19	; 0x07
    1378:	2e 83       	std	Y+6, r18	; 0x06
    137a:	8e 81       	ldd	r24, Y+6	; 0x06
    137c:	9f 81       	ldd	r25, Y+7	; 0x07
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	31 f0       	breq	.+12     	; 0x138e <M_DIO_void_setPinValue+0x15c>
    1382:	2e 81       	ldd	r18, Y+6	; 0x06
    1384:	3f 81       	ldd	r19, Y+7	; 0x07
    1386:	21 30       	cpi	r18, 0x01	; 1
    1388:	31 05       	cpc	r19, r1
    138a:	b1 f0       	breq	.+44     	; 0x13b8 <M_DIO_void_setPinValue+0x186>
    138c:	60 c0       	rjmp	.+192    	; 0x144e <M_DIO_void_setPinValue+0x21c>
			{
			case LOW:
				 CLR_BIT(PORTC_REG,Pin);
    138e:	a5 e3       	ldi	r26, 0x35	; 53
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e5 e3       	ldi	r30, 0x35	; 53
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	48 2f       	mov	r20, r24
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	02 2e       	mov	r0, r18
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <M_DIO_void_setPinValue+0x17a>
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	0a 94       	dec	r0
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <M_DIO_void_setPinValue+0x176>
    13b0:	80 95       	com	r24
    13b2:	84 23       	and	r24, r20
    13b4:	8c 93       	st	X, r24
    13b6:	4b c0       	rjmp	.+150    	; 0x144e <M_DIO_void_setPinValue+0x21c>
				break;
			case HIGH:
				 SET_BIT(PORTC_REG,Pin);
    13b8:	a5 e3       	ldi	r26, 0x35	; 53
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e5 e3       	ldi	r30, 0x35	; 53
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	48 2f       	mov	r20, r24
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 2e       	mov	r0, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <M_DIO_void_setPinValue+0x1a4>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <M_DIO_void_setPinValue+0x1a0>
    13da:	84 2b       	or	r24, r20
    13dc:	8c 93       	st	X, r24
    13de:	37 c0       	rjmp	.+110    	; 0x144e <M_DIO_void_setPinValue+0x21c>
				break;
			}
			break;
		case PORTD_ID :
			 switch (value)
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	3d 83       	std	Y+5, r19	; 0x05
    13e8:	2c 83       	std	Y+4, r18	; 0x04
    13ea:	8c 81       	ldd	r24, Y+4	; 0x04
    13ec:	9d 81       	ldd	r25, Y+5	; 0x05
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	31 f0       	breq	.+12     	; 0x13fe <M_DIO_void_setPinValue+0x1cc>
    13f2:	2c 81       	ldd	r18, Y+4	; 0x04
    13f4:	3d 81       	ldd	r19, Y+5	; 0x05
    13f6:	21 30       	cpi	r18, 0x01	; 1
    13f8:	31 05       	cpc	r19, r1
    13fa:	b1 f0       	breq	.+44     	; 0x1428 <M_DIO_void_setPinValue+0x1f6>
    13fc:	28 c0       	rjmp	.+80     	; 0x144e <M_DIO_void_setPinValue+0x21c>
			 {
				case LOW:
				   CLR_BIT(PORTD_REG,Pin);
    13fe:	a2 e3       	ldi	r26, 0x32	; 50
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e2 e3       	ldi	r30, 0x32	; 50
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	48 2f       	mov	r20, r24
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 2e       	mov	r0, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <M_DIO_void_setPinValue+0x1ea>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <M_DIO_void_setPinValue+0x1e6>
    1420:	80 95       	com	r24
    1422:	84 23       	and	r24, r20
    1424:	8c 93       	st	X, r24
    1426:	13 c0       	rjmp	.+38     	; 0x144e <M_DIO_void_setPinValue+0x21c>
					break;
				case HIGH:
					SET_BIT(PORTD_REG,Pin);
    1428:	a2 e3       	ldi	r26, 0x32	; 50
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e2 e3       	ldi	r30, 0x32	; 50
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	48 2f       	mov	r20, r24
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 2e       	mov	r0, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <M_DIO_void_setPinValue+0x214>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	0a 94       	dec	r0
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <M_DIO_void_setPinValue+0x210>
    144a:	84 2b       	or	r24, r20
    144c:	8c 93       	st	X, r24
					break;
			 }
			 break;
		}
}
    144e:	2d 96       	adiw	r28, 0x0d	; 13
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <M_DIO_void_getPinValue>:
void M_DIO_void_getPinValue(u8 Port, u8 Pin, u8 *pvalue)
{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	00 d0       	rcall	.+0      	; 0x1466 <M_DIO_void_getPinValue+0x6>
    1466:	00 d0       	rcall	.+0      	; 0x1468 <M_DIO_void_getPinValue+0x8>
    1468:	00 d0       	rcall	.+0      	; 0x146a <M_DIO_void_getPinValue+0xa>
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	6a 83       	std	Y+2, r22	; 0x02
    1472:	5c 83       	std	Y+4, r21	; 0x04
    1474:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port){
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	3e 83       	std	Y+6, r19	; 0x06
    147e:	2d 83       	std	Y+5, r18	; 0x05
    1480:	4d 81       	ldd	r20, Y+5	; 0x05
    1482:	5e 81       	ldd	r21, Y+6	; 0x06
    1484:	41 30       	cpi	r20, 0x01	; 1
    1486:	51 05       	cpc	r21, r1
    1488:	59 f1       	breq	.+86     	; 0x14e0 <M_DIO_void_getPinValue+0x80>
    148a:	8d 81       	ldd	r24, Y+5	; 0x05
    148c:	9e 81       	ldd	r25, Y+6	; 0x06
    148e:	82 30       	cpi	r24, 0x02	; 2
    1490:	91 05       	cpc	r25, r1
    1492:	34 f4       	brge	.+12     	; 0x14a0 <M_DIO_void_getPinValue+0x40>
    1494:	2d 81       	ldd	r18, Y+5	; 0x05
    1496:	3e 81       	ldd	r19, Y+6	; 0x06
    1498:	21 15       	cp	r18, r1
    149a:	31 05       	cpc	r19, r1
    149c:	69 f0       	breq	.+26     	; 0x14b8 <M_DIO_void_getPinValue+0x58>
    149e:	5b c0       	rjmp	.+182    	; 0x1556 <M_DIO_void_getPinValue+0xf6>
    14a0:	4d 81       	ldd	r20, Y+5	; 0x05
    14a2:	5e 81       	ldd	r21, Y+6	; 0x06
    14a4:	42 30       	cpi	r20, 0x02	; 2
    14a6:	51 05       	cpc	r21, r1
    14a8:	79 f1       	breq	.+94     	; 0x1508 <M_DIO_void_getPinValue+0xa8>
    14aa:	8d 81       	ldd	r24, Y+5	; 0x05
    14ac:	9e 81       	ldd	r25, Y+6	; 0x06
    14ae:	83 30       	cpi	r24, 0x03	; 3
    14b0:	91 05       	cpc	r25, r1
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <M_DIO_void_getPinValue+0x56>
    14b4:	3d c0       	rjmp	.+122    	; 0x1530 <M_DIO_void_getPinValue+0xd0>
    14b6:	4f c0       	rjmp	.+158    	; 0x1556 <M_DIO_void_getPinValue+0xf6>
	case PORTA_ID:
		*pvalue = GET_BIT(PINA_REG,Pin);
    14b8:	e9 e3       	ldi	r30, 0x39	; 57
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	88 2f       	mov	r24, r24
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	a9 01       	movw	r20, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <M_DIO_void_getPinValue+0x70>
    14cc:	55 95       	asr	r21
    14ce:	47 95       	ror	r20
    14d0:	8a 95       	dec	r24
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <M_DIO_void_getPinValue+0x6c>
    14d4:	ca 01       	movw	r24, r20
    14d6:	81 70       	andi	r24, 0x01	; 1
    14d8:	eb 81       	ldd	r30, Y+3	; 0x03
    14da:	fc 81       	ldd	r31, Y+4	; 0x04
    14dc:	80 83       	st	Z, r24
    14de:	3b c0       	rjmp	.+118    	; 0x1556 <M_DIO_void_getPinValue+0xf6>
		break;
	case PORTB_ID:
		*pvalue=GET_BIT(PINB_REG,Pin);
    14e0:	e6 e3       	ldi	r30, 0x36	; 54
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	88 2f       	mov	r24, r24
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	a9 01       	movw	r20, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <M_DIO_void_getPinValue+0x98>
    14f4:	55 95       	asr	r21
    14f6:	47 95       	ror	r20
    14f8:	8a 95       	dec	r24
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <M_DIO_void_getPinValue+0x94>
    14fc:	ca 01       	movw	r24, r20
    14fe:	81 70       	andi	r24, 0x01	; 1
    1500:	eb 81       	ldd	r30, Y+3	; 0x03
    1502:	fc 81       	ldd	r31, Y+4	; 0x04
    1504:	80 83       	st	Z, r24
    1506:	27 c0       	rjmp	.+78     	; 0x1556 <M_DIO_void_getPinValue+0xf6>
		break;
	case PORTC_ID:
		*pvalue=GET_BIT(PINC_REG,Pin);
    1508:	e3 e3       	ldi	r30, 0x33	; 51
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	88 2f       	mov	r24, r24
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	a9 01       	movw	r20, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <M_DIO_void_getPinValue+0xc0>
    151c:	55 95       	asr	r21
    151e:	47 95       	ror	r20
    1520:	8a 95       	dec	r24
    1522:	e2 f7       	brpl	.-8      	; 0x151c <M_DIO_void_getPinValue+0xbc>
    1524:	ca 01       	movw	r24, r20
    1526:	81 70       	andi	r24, 0x01	; 1
    1528:	eb 81       	ldd	r30, Y+3	; 0x03
    152a:	fc 81       	ldd	r31, Y+4	; 0x04
    152c:	80 83       	st	Z, r24
    152e:	13 c0       	rjmp	.+38     	; 0x1556 <M_DIO_void_getPinValue+0xf6>
		break;
	case PORTD_ID:
		*pvalue=GET_BIT(PIND_REG,Pin);
    1530:	e0 e3       	ldi	r30, 0x30	; 48
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	88 2f       	mov	r24, r24
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	a9 01       	movw	r20, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <M_DIO_void_getPinValue+0xe8>
    1544:	55 95       	asr	r21
    1546:	47 95       	ror	r20
    1548:	8a 95       	dec	r24
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <M_DIO_void_getPinValue+0xe4>
    154c:	ca 01       	movw	r24, r20
    154e:	81 70       	andi	r24, 0x01	; 1
    1550:	eb 81       	ldd	r30, Y+3	; 0x03
    1552:	fc 81       	ldd	r31, Y+4	; 0x04
    1554:	80 83       	st	Z, r24
		break;
	}
}
    1556:	26 96       	adiw	r28, 0x06	; 6
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	cd bf       	out	0x3d, r28	; 61
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <M_DIO_void_TogPinValue>:
void M_DIO_void_TogPinValue(u8 Port, u8 Pin)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	00 d0       	rcall	.+0      	; 0x156e <M_DIO_void_TogPinValue+0x6>
    156e:	00 d0       	rcall	.+0      	; 0x1570 <M_DIO_void_TogPinValue+0x8>
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	89 83       	std	Y+1, r24	; 0x01
    1576:	6a 83       	std	Y+2, r22	; 0x02
	switch (Port){
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	3c 83       	std	Y+4, r19	; 0x04
    1580:	2b 83       	std	Y+3, r18	; 0x03
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	9c 81       	ldd	r25, Y+4	; 0x04
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	91 05       	cpc	r25, r1
    158a:	49 f1       	breq	.+82     	; 0x15de <M_DIO_void_TogPinValue+0x76>
    158c:	2b 81       	ldd	r18, Y+3	; 0x03
    158e:	3c 81       	ldd	r19, Y+4	; 0x04
    1590:	22 30       	cpi	r18, 0x02	; 2
    1592:	31 05       	cpc	r19, r1
    1594:	2c f4       	brge	.+10     	; 0x15a0 <M_DIO_void_TogPinValue+0x38>
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	9c 81       	ldd	r25, Y+4	; 0x04
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	61 f0       	breq	.+24     	; 0x15b6 <M_DIO_void_TogPinValue+0x4e>
    159e:	5a c0       	rjmp	.+180    	; 0x1654 <M_DIO_void_TogPinValue+0xec>
    15a0:	2b 81       	ldd	r18, Y+3	; 0x03
    15a2:	3c 81       	ldd	r19, Y+4	; 0x04
    15a4:	22 30       	cpi	r18, 0x02	; 2
    15a6:	31 05       	cpc	r19, r1
    15a8:	71 f1       	breq	.+92     	; 0x1606 <M_DIO_void_TogPinValue+0x9e>
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	9c 81       	ldd	r25, Y+4	; 0x04
    15ae:	83 30       	cpi	r24, 0x03	; 3
    15b0:	91 05       	cpc	r25, r1
    15b2:	e9 f1       	breq	.+122    	; 0x162e <M_DIO_void_TogPinValue+0xc6>
    15b4:	4f c0       	rjmp	.+158    	; 0x1654 <M_DIO_void_TogPinValue+0xec>
		case PORTA_ID:
			TOG_BIT(PORTA_REG,Pin);
    15b6:	ab e3       	ldi	r26, 0x3B	; 59
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	eb e3       	ldi	r30, 0x3B	; 59
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	48 2f       	mov	r20, r24
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 2e       	mov	r0, r18
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <M_DIO_void_TogPinValue+0x6c>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	0a 94       	dec	r0
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <M_DIO_void_TogPinValue+0x68>
    15d8:	84 27       	eor	r24, r20
    15da:	8c 93       	st	X, r24
    15dc:	3b c0       	rjmp	.+118    	; 0x1654 <M_DIO_void_TogPinValue+0xec>
			break;
		case PORTB_ID:
			TOG_BIT(PORTB_REG,Pin);
    15de:	a8 e3       	ldi	r26, 0x38	; 56
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e8 e3       	ldi	r30, 0x38	; 56
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	48 2f       	mov	r20, r24
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	02 2e       	mov	r0, r18
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <M_DIO_void_TogPinValue+0x94>
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	0a 94       	dec	r0
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <M_DIO_void_TogPinValue+0x90>
    1600:	84 27       	eor	r24, r20
    1602:	8c 93       	st	X, r24
    1604:	27 c0       	rjmp	.+78     	; 0x1654 <M_DIO_void_TogPinValue+0xec>
			break;
		case PORTC_ID:
			TOG_BIT(PORTC_REG,Pin);
    1606:	a5 e3       	ldi	r26, 0x35	; 53
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e5 e3       	ldi	r30, 0x35	; 53
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	48 2f       	mov	r20, r24
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	02 2e       	mov	r0, r18
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <M_DIO_void_TogPinValue+0xbc>
    1620:	88 0f       	add	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	0a 94       	dec	r0
    1626:	e2 f7       	brpl	.-8      	; 0x1620 <M_DIO_void_TogPinValue+0xb8>
    1628:	84 27       	eor	r24, r20
    162a:	8c 93       	st	X, r24
    162c:	13 c0       	rjmp	.+38     	; 0x1654 <M_DIO_void_TogPinValue+0xec>
			break;
		case PORTD_ID:
			TOG_BIT(PORTD_REG,Pin);
    162e:	a2 e3       	ldi	r26, 0x32	; 50
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e2 e3       	ldi	r30, 0x32	; 50
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	48 2f       	mov	r20, r24
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	02 2e       	mov	r0, r18
    1646:	02 c0       	rjmp	.+4      	; 0x164c <M_DIO_void_TogPinValue+0xe4>
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	0a 94       	dec	r0
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <M_DIO_void_TogPinValue+0xe0>
    1650:	84 27       	eor	r24, r20
    1652:	8c 93       	st	X, r24
			break;
		}


}
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <H_SSD_void_init>:



//u8 arr[]={0x3f,};
void H_SSD_void_init(void)
{
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
	M_DIO_void_setPinDir(SSD_LED_A_PORT,  SSD_LED_A_PIN , OUT);
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	61 e0       	ldi	r22, 0x01	; 1
    166e:	41 e0       	ldi	r20, 0x01	; 1
    1670:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_B_PORT,  SSD_LED_B_PIN , OUT);
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	62 e0       	ldi	r22, 0x02	; 2
    1678:	41 e0       	ldi	r20, 0x01	; 1
    167a:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_C_PORT,  SSD_LED_C_PIN , OUT);
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	63 e0       	ldi	r22, 0x03	; 3
    1682:	41 e0       	ldi	r20, 0x01	; 1
    1684:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_D_PORT,  SSD_LED_D_PIN , OUT);
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	64 e0       	ldi	r22, 0x04	; 4
    168c:	41 e0       	ldi	r20, 0x01	; 1
    168e:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_E_PORT,  SSD_LED_E_PIN , OUT);
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	65 e0       	ldi	r22, 0x05	; 5
    1696:	41 e0       	ldi	r20, 0x01	; 1
    1698:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_F_PORT,  SSD_LED_F_PIN , OUT);
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	66 e0       	ldi	r22, 0x06	; 6
    16a0:	41 e0       	ldi	r20, 0x01	; 1
    16a2:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_G_PORT,  SSD_LED_G_PIN , OUT);
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	67 e0       	ldi	r22, 0x07	; 7
    16aa:	41 e0       	ldi	r20, 0x01	; 1
    16ac:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_DOT_PORT,  SSD_LED_DOT_PIN , OUT);
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	60 e0       	ldi	r22, 0x00	; 0
    16b4:	41 e0       	ldi	r20, 0x01	; 1
    16b6:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>

	//ENABLE DIGITS 1

	M_DIO_void_setPinDir(SSD_DIG_1_EN_PORT,  SSD_DIG_1_EN_PIN , OUT);
    16ba:	82 e0       	ldi	r24, 0x02	; 2
    16bc:	66 e0       	ldi	r22, 0x06	; 6
    16be:	41 e0       	ldi	r20, 0x01	; 1
    16c0:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_DIG_2_EN_PORT,  SSD_DIG_2_EN_PIN , OUT);
    16c4:	82 e0       	ldi	r24, 0x02	; 2
    16c6:	67 e0       	ldi	r22, 0x07	; 7
    16c8:	41 e0       	ldi	r20, 0x01	; 1
    16ca:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
}
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	08 95       	ret

000016d4 <H_SSD_void_DisplayNumber>:
void H_SSD_void_DisplayNumber(u8 number)
{
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	a7 97       	sbiw	r28, 0x27	; 39
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	8b a3       	std	Y+35, r24	; 0x23
	if(number>99)
    16ea:	8b a1       	ldd	r24, Y+35	; 0x23
    16ec:	84 36       	cpi	r24, 0x64	; 100
    16ee:	08 f0       	brcs	.+2      	; 0x16f2 <H_SSD_void_DisplayNumber+0x1e>
    16f0:	04 c5       	rjmp	.+2568   	; 0x20fa <H_SSD_void_DisplayNumber+0xa26>
	{
		return;
	}
	u32 i ;
	u8 units =number % 10;
    16f2:	8b a1       	ldd	r24, Y+35	; 0x23
    16f4:	9a e0       	ldi	r25, 0x0A	; 10
    16f6:	69 2f       	mov	r22, r25
    16f8:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__udivmodqi4>
    16fc:	89 2f       	mov	r24, r25
    16fe:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 tens = number/10;
    1700:	8b a1       	ldd	r24, Y+35	; 0x23
    1702:	9a e0       	ldi	r25, 0x0A	; 10
    1704:	69 2f       	mov	r22, r25
    1706:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__udivmodqi4>
    170a:	8d 8f       	std	Y+29, r24	; 0x1d
	for(i=0;i<SSD_DISPLAYY_TIME ;i++){
    170c:	1f 8e       	std	Y+31, r1	; 0x1f
    170e:	18 a2       	std	Y+32, r1	; 0x20
    1710:	19 a2       	std	Y+33, r1	; 0x21
    1712:	1a a2       	std	Y+34, r1	; 0x22
    1714:	e8 c4       	rjmp	.+2512   	; 0x20e6 <H_SSD_void_DisplayNumber+0xa12>

		switch (units)
    1716:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	3f a3       	std	Y+39, r19	; 0x27
    171e:	2e a3       	std	Y+38, r18	; 0x26
    1720:	8e a1       	ldd	r24, Y+38	; 0x26
    1722:	9f a1       	ldd	r25, Y+39	; 0x27
    1724:	84 30       	cpi	r24, 0x04	; 4
    1726:	91 05       	cpc	r25, r1
    1728:	09 f4       	brne	.+2      	; 0x172c <H_SSD_void_DisplayNumber+0x58>
    172a:	f0 c0       	rjmp	.+480    	; 0x190c <H_SSD_void_DisplayNumber+0x238>
    172c:	2e a1       	ldd	r18, Y+38	; 0x26
    172e:	3f a1       	ldd	r19, Y+39	; 0x27
    1730:	25 30       	cpi	r18, 0x05	; 5
    1732:	31 05       	cpc	r19, r1
    1734:	ec f4       	brge	.+58     	; 0x1770 <H_SSD_void_DisplayNumber+0x9c>
    1736:	8e a1       	ldd	r24, Y+38	; 0x26
    1738:	9f a1       	ldd	r25, Y+39	; 0x27
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	91 05       	cpc	r25, r1
    173e:	09 f4       	brne	.+2      	; 0x1742 <H_SSD_void_DisplayNumber+0x6e>
    1740:	6a c0       	rjmp	.+212    	; 0x1816 <H_SSD_void_DisplayNumber+0x142>
    1742:	2e a1       	ldd	r18, Y+38	; 0x26
    1744:	3f a1       	ldd	r19, Y+39	; 0x27
    1746:	22 30       	cpi	r18, 0x02	; 2
    1748:	31 05       	cpc	r19, r1
    174a:	2c f4       	brge	.+10     	; 0x1756 <H_SSD_void_DisplayNumber+0x82>
    174c:	8e a1       	ldd	r24, Y+38	; 0x26
    174e:	9f a1       	ldd	r25, Y+39	; 0x27
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	99 f1       	breq	.+102    	; 0x17ba <H_SSD_void_DisplayNumber+0xe6>
    1754:	d0 c1       	rjmp	.+928    	; 0x1af6 <H_SSD_void_DisplayNumber+0x422>
    1756:	2e a1       	ldd	r18, Y+38	; 0x26
    1758:	3f a1       	ldd	r19, Y+39	; 0x27
    175a:	22 30       	cpi	r18, 0x02	; 2
    175c:	31 05       	cpc	r19, r1
    175e:	09 f4       	brne	.+2      	; 0x1762 <H_SSD_void_DisplayNumber+0x8e>
    1760:	83 c0       	rjmp	.+262    	; 0x1868 <H_SSD_void_DisplayNumber+0x194>
    1762:	8e a1       	ldd	r24, Y+38	; 0x26
    1764:	9f a1       	ldd	r25, Y+39	; 0x27
    1766:	83 30       	cpi	r24, 0x03	; 3
    1768:	91 05       	cpc	r25, r1
    176a:	09 f4       	brne	.+2      	; 0x176e <H_SSD_void_DisplayNumber+0x9a>
    176c:	a6 c0       	rjmp	.+332    	; 0x18ba <H_SSD_void_DisplayNumber+0x1e6>
    176e:	c3 c1       	rjmp	.+902    	; 0x1af6 <H_SSD_void_DisplayNumber+0x422>
    1770:	2e a1       	ldd	r18, Y+38	; 0x26
    1772:	3f a1       	ldd	r19, Y+39	; 0x27
    1774:	27 30       	cpi	r18, 0x07	; 7
    1776:	31 05       	cpc	r19, r1
    1778:	09 f4       	brne	.+2      	; 0x177c <H_SSD_void_DisplayNumber+0xa8>
    177a:	43 c1       	rjmp	.+646    	; 0x1a02 <H_SSD_void_DisplayNumber+0x32e>
    177c:	8e a1       	ldd	r24, Y+38	; 0x26
    177e:	9f a1       	ldd	r25, Y+39	; 0x27
    1780:	88 30       	cpi	r24, 0x08	; 8
    1782:	91 05       	cpc	r25, r1
    1784:	6c f4       	brge	.+26     	; 0x17a0 <H_SSD_void_DisplayNumber+0xcc>
    1786:	2e a1       	ldd	r18, Y+38	; 0x26
    1788:	3f a1       	ldd	r19, Y+39	; 0x27
    178a:	25 30       	cpi	r18, 0x05	; 5
    178c:	31 05       	cpc	r19, r1
    178e:	09 f4       	brne	.+2      	; 0x1792 <H_SSD_void_DisplayNumber+0xbe>
    1790:	e6 c0       	rjmp	.+460    	; 0x195e <H_SSD_void_DisplayNumber+0x28a>
    1792:	8e a1       	ldd	r24, Y+38	; 0x26
    1794:	9f a1       	ldd	r25, Y+39	; 0x27
    1796:	86 30       	cpi	r24, 0x06	; 6
    1798:	91 05       	cpc	r25, r1
    179a:	09 f4       	brne	.+2      	; 0x179e <H_SSD_void_DisplayNumber+0xca>
    179c:	09 c1       	rjmp	.+530    	; 0x19b0 <H_SSD_void_DisplayNumber+0x2dc>
    179e:	ab c1       	rjmp	.+854    	; 0x1af6 <H_SSD_void_DisplayNumber+0x422>
    17a0:	2e a1       	ldd	r18, Y+38	; 0x26
    17a2:	3f a1       	ldd	r19, Y+39	; 0x27
    17a4:	28 30       	cpi	r18, 0x08	; 8
    17a6:	31 05       	cpc	r19, r1
    17a8:	09 f4       	brne	.+2      	; 0x17ac <H_SSD_void_DisplayNumber+0xd8>
    17aa:	54 c1       	rjmp	.+680    	; 0x1a54 <H_SSD_void_DisplayNumber+0x380>
    17ac:	8e a1       	ldd	r24, Y+38	; 0x26
    17ae:	9f a1       	ldd	r25, Y+39	; 0x27
    17b0:	89 30       	cpi	r24, 0x09	; 9
    17b2:	91 05       	cpc	r25, r1
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <H_SSD_void_DisplayNumber+0xe4>
    17b6:	77 c1       	rjmp	.+750    	; 0x1aa6 <H_SSD_void_DisplayNumber+0x3d2>
    17b8:	9e c1       	rjmp	.+828    	; 0x1af6 <H_SSD_void_DisplayNumber+0x422>
		{
		case 0:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	61 e0       	ldi	r22, 0x01	; 1
    17be:	41 e0       	ldi	r20, 0x01	; 1
    17c0:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	62 e0       	ldi	r22, 0x02	; 2
    17c8:	41 e0       	ldi	r20, 0x01	; 1
    17ca:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	63 e0       	ldi	r22, 0x03	; 3
    17d2:	41 e0       	ldi	r20, 0x01	; 1
    17d4:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	64 e0       	ldi	r22, 0x04	; 4
    17dc:	41 e0       	ldi	r20, 0x01	; 1
    17de:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	65 e0       	ldi	r22, 0x05	; 5
    17e6:	41 e0       	ldi	r20, 0x01	; 1
    17e8:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	66 e0       	ldi	r22, 0x06	; 6
    17f0:	41 e0       	ldi	r20, 0x01	; 1
    17f2:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	61 e0       	ldi	r22, 0x01	; 1
    17fa:	41 e0       	ldi	r20, 0x01	; 1
    17fc:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	67 e0       	ldi	r22, 0x07	; 7
    1804:	40 e0       	ldi	r20, 0x00	; 0
    1806:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	60 e0       	ldi	r22, 0x00	; 0
    180e:	40 e0       	ldi	r20, 0x00	; 0
    1810:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    1814:	70 c1       	rjmp	.+736    	; 0x1af6 <H_SSD_void_DisplayNumber+0x422>
			break;

		case 1:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	61 e0       	ldi	r22, 0x01	; 1
    181a:	40 e0       	ldi	r20, 0x00	; 0
    181c:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	62 e0       	ldi	r22, 0x02	; 2
    1824:	41 e0       	ldi	r20, 0x01	; 1
    1826:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	63 e0       	ldi	r22, 0x03	; 3
    182e:	41 e0       	ldi	r20, 0x01	; 1
    1830:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	64 e0       	ldi	r22, 0x04	; 4
    1838:	40 e0       	ldi	r20, 0x00	; 0
    183a:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	65 e0       	ldi	r22, 0x05	; 5
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	66 e0       	ldi	r22, 0x06	; 6
    184c:	40 e0       	ldi	r20, 0x00	; 0
    184e:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	67 e0       	ldi	r22, 0x07	; 7
    1856:	40 e0       	ldi	r20, 0x00	; 0
    1858:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	60 e0       	ldi	r22, 0x00	; 0
    1860:	40 e0       	ldi	r20, 0x00	; 0
    1862:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    1866:	47 c1       	rjmp	.+654    	; 0x1af6 <H_SSD_void_DisplayNumber+0x422>
			break;

		case 2:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	61 e0       	ldi	r22, 0x01	; 1
    186c:	41 e0       	ldi	r20, 0x01	; 1
    186e:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	62 e0       	ldi	r22, 0x02	; 2
    1876:	41 e0       	ldi	r20, 0x01	; 1
    1878:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,LOW);
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	63 e0       	ldi	r22, 0x03	; 3
    1880:	40 e0       	ldi	r20, 0x00	; 0
    1882:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	64 e0       	ldi	r22, 0x04	; 4
    188a:	41 e0       	ldi	r20, 0x01	; 1
    188c:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	65 e0       	ldi	r22, 0x05	; 5
    1894:	41 e0       	ldi	r20, 0x01	; 1
    1896:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	66 e0       	ldi	r22, 0x06	; 6
    189e:	40 e0       	ldi	r20, 0x00	; 0
    18a0:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	67 e0       	ldi	r22, 0x07	; 7
    18a8:	41 e0       	ldi	r20, 0x01	; 1
    18aa:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    18b8:	1e c1       	rjmp	.+572    	; 0x1af6 <H_SSD_void_DisplayNumber+0x422>
			break;

		case 3:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	61 e0       	ldi	r22, 0x01	; 1
    18be:	41 e0       	ldi	r20, 0x01	; 1
    18c0:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	62 e0       	ldi	r22, 0x02	; 2
    18c8:	41 e0       	ldi	r20, 0x01	; 1
    18ca:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	63 e0       	ldi	r22, 0x03	; 3
    18d2:	41 e0       	ldi	r20, 0x01	; 1
    18d4:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	64 e0       	ldi	r22, 0x04	; 4
    18dc:	41 e0       	ldi	r20, 0x01	; 1
    18de:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	65 e0       	ldi	r22, 0x05	; 5
    18e6:	40 e0       	ldi	r20, 0x00	; 0
    18e8:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	66 e0       	ldi	r22, 0x06	; 6
    18f0:	40 e0       	ldi	r20, 0x00	; 0
    18f2:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	67 e0       	ldi	r22, 0x07	; 7
    18fa:	41 e0       	ldi	r20, 0x01	; 1
    18fc:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	60 e0       	ldi	r22, 0x00	; 0
    1904:	40 e0       	ldi	r20, 0x00	; 0
    1906:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    190a:	f5 c0       	rjmp	.+490    	; 0x1af6 <H_SSD_void_DisplayNumber+0x422>
			break;

		case 4:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	61 e0       	ldi	r22, 0x01	; 1
    1910:	40 e0       	ldi	r20, 0x00	; 0
    1912:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	62 e0       	ldi	r22, 0x02	; 2
    191a:	41 e0       	ldi	r20, 0x01	; 1
    191c:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	63 e0       	ldi	r22, 0x03	; 3
    1924:	41 e0       	ldi	r20, 0x01	; 1
    1926:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	64 e0       	ldi	r22, 0x04	; 4
    192e:	40 e0       	ldi	r20, 0x00	; 0
    1930:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	65 e0       	ldi	r22, 0x05	; 5
    1938:	40 e0       	ldi	r20, 0x00	; 0
    193a:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	66 e0       	ldi	r22, 0x06	; 6
    1942:	41 e0       	ldi	r20, 0x01	; 1
    1944:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	67 e0       	ldi	r22, 0x07	; 7
    194c:	41 e0       	ldi	r20, 0x01	; 1
    194e:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	60 e0       	ldi	r22, 0x00	; 0
    1956:	40 e0       	ldi	r20, 0x00	; 0
    1958:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    195c:	cc c0       	rjmp	.+408    	; 0x1af6 <H_SSD_void_DisplayNumber+0x422>
			break;

		case 5:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	61 e0       	ldi	r22, 0x01	; 1
    1962:	41 e0       	ldi	r20, 0x01	; 1
    1964:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	62 e0       	ldi	r22, 0x02	; 2
    196c:	40 e0       	ldi	r20, 0x00	; 0
    196e:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	63 e0       	ldi	r22, 0x03	; 3
    1976:	41 e0       	ldi	r20, 0x01	; 1
    1978:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	64 e0       	ldi	r22, 0x04	; 4
    1980:	41 e0       	ldi	r20, 0x01	; 1
    1982:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	65 e0       	ldi	r22, 0x05	; 5
    198a:	40 e0       	ldi	r20, 0x00	; 0
    198c:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	66 e0       	ldi	r22, 0x06	; 6
    1994:	41 e0       	ldi	r20, 0x01	; 1
    1996:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	67 e0       	ldi	r22, 0x07	; 7
    199e:	41 e0       	ldi	r20, 0x01	; 1
    19a0:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	60 e0       	ldi	r22, 0x00	; 0
    19a8:	40 e0       	ldi	r20, 0x00	; 0
    19aa:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    19ae:	a3 c0       	rjmp	.+326    	; 0x1af6 <H_SSD_void_DisplayNumber+0x422>
			break;
		case 6:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	61 e0       	ldi	r22, 0x01	; 1
    19b4:	41 e0       	ldi	r20, 0x01	; 1
    19b6:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	62 e0       	ldi	r22, 0x02	; 2
    19be:	40 e0       	ldi	r20, 0x00	; 0
    19c0:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	63 e0       	ldi	r22, 0x03	; 3
    19c8:	41 e0       	ldi	r20, 0x01	; 1
    19ca:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	64 e0       	ldi	r22, 0x04	; 4
    19d2:	41 e0       	ldi	r20, 0x01	; 1
    19d4:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	65 e0       	ldi	r22, 0x05	; 5
    19dc:	41 e0       	ldi	r20, 0x01	; 1
    19de:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	66 e0       	ldi	r22, 0x06	; 6
    19e6:	41 e0       	ldi	r20, 0x01	; 1
    19e8:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	67 e0       	ldi	r22, 0x07	; 7
    19f0:	41 e0       	ldi	r20, 0x01	; 1
    19f2:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	60 e0       	ldi	r22, 0x00	; 0
    19fa:	40 e0       	ldi	r20, 0x00	; 0
    19fc:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    1a00:	7a c0       	rjmp	.+244    	; 0x1af6 <H_SSD_void_DisplayNumber+0x422>
			break;
		case 7:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	61 e0       	ldi	r22, 0x01	; 1
    1a06:	41 e0       	ldi	r20, 0x01	; 1
    1a08:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	62 e0       	ldi	r22, 0x02	; 2
    1a10:	41 e0       	ldi	r20, 0x01	; 1
    1a12:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	63 e0       	ldi	r22, 0x03	; 3
    1a1a:	41 e0       	ldi	r20, 0x01	; 1
    1a1c:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	64 e0       	ldi	r22, 0x04	; 4
    1a24:	40 e0       	ldi	r20, 0x00	; 0
    1a26:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	65 e0       	ldi	r22, 0x05	; 5
    1a2e:	40 e0       	ldi	r20, 0x00	; 0
    1a30:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	66 e0       	ldi	r22, 0x06	; 6
    1a38:	40 e0       	ldi	r20, 0x00	; 0
    1a3a:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	67 e0       	ldi	r22, 0x07	; 7
    1a42:	40 e0       	ldi	r20, 0x00	; 0
    1a44:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	60 e0       	ldi	r22, 0x00	; 0
    1a4c:	40 e0       	ldi	r20, 0x00	; 0
    1a4e:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    1a52:	51 c0       	rjmp	.+162    	; 0x1af6 <H_SSD_void_DisplayNumber+0x422>
			break;
		case 8:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	61 e0       	ldi	r22, 0x01	; 1
    1a58:	41 e0       	ldi	r20, 0x01	; 1
    1a5a:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	62 e0       	ldi	r22, 0x02	; 2
    1a62:	41 e0       	ldi	r20, 0x01	; 1
    1a64:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	63 e0       	ldi	r22, 0x03	; 3
    1a6c:	41 e0       	ldi	r20, 0x01	; 1
    1a6e:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	64 e0       	ldi	r22, 0x04	; 4
    1a76:	41 e0       	ldi	r20, 0x01	; 1
    1a78:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	65 e0       	ldi	r22, 0x05	; 5
    1a80:	41 e0       	ldi	r20, 0x01	; 1
    1a82:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	66 e0       	ldi	r22, 0x06	; 6
    1a8a:	41 e0       	ldi	r20, 0x01	; 1
    1a8c:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	67 e0       	ldi	r22, 0x07	; 7
    1a94:	41 e0       	ldi	r20, 0x01	; 1
    1a96:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	60 e0       	ldi	r22, 0x00	; 0
    1a9e:	40 e0       	ldi	r20, 0x00	; 0
    1aa0:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    1aa4:	28 c0       	rjmp	.+80     	; 0x1af6 <H_SSD_void_DisplayNumber+0x422>
			break;
		case 9:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	61 e0       	ldi	r22, 0x01	; 1
    1aaa:	41 e0       	ldi	r20, 0x01	; 1
    1aac:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	62 e0       	ldi	r22, 0x02	; 2
    1ab4:	41 e0       	ldi	r20, 0x01	; 1
    1ab6:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	63 e0       	ldi	r22, 0x03	; 3
    1abe:	41 e0       	ldi	r20, 0x01	; 1
    1ac0:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	64 e0       	ldi	r22, 0x04	; 4
    1ac8:	41 e0       	ldi	r20, 0x01	; 1
    1aca:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	65 e0       	ldi	r22, 0x05	; 5
    1ad2:	40 e0       	ldi	r20, 0x00	; 0
    1ad4:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	66 e0       	ldi	r22, 0x06	; 6
    1adc:	41 e0       	ldi	r20, 0x01	; 1
    1ade:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	67 e0       	ldi	r22, 0x07	; 7
    1ae6:	41 e0       	ldi	r20, 0x01	; 1
    1ae8:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	60 e0       	ldi	r22, 0x00	; 0
    1af0:	40 e0       	ldi	r20, 0x00	; 0
    1af2:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>


		}
		//enable digit 1
		//disable digit 2
		M_DIO_void_setPinValue(SSD_DIG_1_EN_PORT,SSD_DIG_1_EN_PIN,HIGH);
    1af6:	82 e0       	ldi	r24, 0x02	; 2
    1af8:	66 e0       	ldi	r22, 0x06	; 6
    1afa:	41 e0       	ldi	r20, 0x01	; 1
    1afc:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,LOW);
    1b00:	82 e0       	ldi	r24, 0x02	; 2
    1b02:	67 e0       	ldi	r22, 0x07	; 7
    1b04:	40 e0       	ldi	r20, 0x00	; 0
    1b06:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	a0 e8       	ldi	r26, 0x80	; 128
    1b10:	bf e3       	ldi	r27, 0x3F	; 63
    1b12:	89 8f       	std	Y+25, r24	; 0x19
    1b14:	9a 8f       	std	Y+26, r25	; 0x1a
    1b16:	ab 8f       	std	Y+27, r26	; 0x1b
    1b18:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	48 ec       	ldi	r20, 0xC8	; 200
    1b28:	53 e4       	ldi	r21, 0x43	; 67
    1b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	8d 8b       	std	Y+21, r24	; 0x15
    1b34:	9e 8b       	std	Y+22, r25	; 0x16
    1b36:	af 8b       	std	Y+23, r26	; 0x17
    1b38:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b40:	98 8d       	ldd	r25, Y+24	; 0x18
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 e8       	ldi	r20, 0x80	; 128
    1b48:	5f e3       	ldi	r21, 0x3F	; 63
    1b4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b4e:	88 23       	and	r24, r24
    1b50:	2c f4       	brge	.+10     	; 0x1b5c <H_SSD_void_DisplayNumber+0x488>
		__ticks = 1;
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	9c 8b       	std	Y+20, r25	; 0x14
    1b58:	8b 8b       	std	Y+19, r24	; 0x13
    1b5a:	3f c0       	rjmp	.+126    	; 0x1bda <H_SSD_void_DisplayNumber+0x506>
	else if (__tmp > 65535)
    1b5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b60:	8f 89       	ldd	r24, Y+23	; 0x17
    1b62:	98 8d       	ldd	r25, Y+24	; 0x18
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	3f ef       	ldi	r19, 0xFF	; 255
    1b68:	4f e7       	ldi	r20, 0x7F	; 127
    1b6a:	57 e4       	ldi	r21, 0x47	; 71
    1b6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b70:	18 16       	cp	r1, r24
    1b72:	4c f5       	brge	.+82     	; 0x1bc6 <H_SSD_void_DisplayNumber+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b74:	69 8d       	ldd	r22, Y+25	; 0x19
    1b76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e2       	ldi	r20, 0x20	; 32
    1b82:	51 e4       	ldi	r21, 0x41	; 65
    1b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	cd 01       	movw	r24, r26
    1b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	9c 8b       	std	Y+20, r25	; 0x14
    1b9a:	8b 8b       	std	Y+19, r24	; 0x13
    1b9c:	0f c0       	rjmp	.+30     	; 0x1bbc <H_SSD_void_DisplayNumber+0x4e8>
    1b9e:	88 e2       	ldi	r24, 0x28	; 40
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	9a 8b       	std	Y+18, r25	; 0x12
    1ba4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ba6:	89 89       	ldd	r24, Y+17	; 0x11
    1ba8:	9a 89       	ldd	r25, Y+18	; 0x12
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <H_SSD_void_DisplayNumber+0x4d6>
    1bae:	9a 8b       	std	Y+18, r25	; 0x12
    1bb0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb4:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	9c 8b       	std	Y+20, r25	; 0x14
    1bba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bbe:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc0:	00 97       	sbiw	r24, 0x00	; 0
    1bc2:	69 f7       	brne	.-38     	; 0x1b9e <H_SSD_void_DisplayNumber+0x4ca>
    1bc4:	14 c0       	rjmp	.+40     	; 0x1bee <H_SSD_void_DisplayNumber+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc6:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc8:	7e 89       	ldd	r23, Y+22	; 0x16
    1bca:	8f 89       	ldd	r24, Y+23	; 0x17
    1bcc:	98 8d       	ldd	r25, Y+24	; 0x18
    1bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	9c 8b       	std	Y+20, r25	; 0x14
    1bd8:	8b 8b       	std	Y+19, r24	; 0x13
    1bda:	8b 89       	ldd	r24, Y+19	; 0x13
    1bdc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bde:	98 8b       	std	Y+16, r25	; 0x10
    1be0:	8f 87       	std	Y+15, r24	; 0x0f
    1be2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1be4:	98 89       	ldd	r25, Y+16	; 0x10
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	f1 f7       	brne	.-4      	; 0x1be6 <H_SSD_void_DisplayNumber+0x512>
    1bea:	98 8b       	std	Y+16, r25	; 0x10
    1bec:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		M_DIO_void_setPinValue(SSD_DIG_1_EN_PORT,SSD_DIG_1_EN_PIN,LOW);
    1bee:	82 e0       	ldi	r24, 0x02	; 2
    1bf0:	66 e0       	ldi	r22, 0x06	; 6
    1bf2:	40 e0       	ldi	r20, 0x00	; 0
    1bf4:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
		switch (tens)
    1bf8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	3d a3       	std	Y+37, r19	; 0x25
    1c00:	2c a3       	std	Y+36, r18	; 0x24
    1c02:	8c a1       	ldd	r24, Y+36	; 0x24
    1c04:	9d a1       	ldd	r25, Y+37	; 0x25
    1c06:	84 30       	cpi	r24, 0x04	; 4
    1c08:	91 05       	cpc	r25, r1
    1c0a:	09 f4       	brne	.+2      	; 0x1c0e <H_SSD_void_DisplayNumber+0x53a>
    1c0c:	f0 c0       	rjmp	.+480    	; 0x1dee <H_SSD_void_DisplayNumber+0x71a>
    1c0e:	2c a1       	ldd	r18, Y+36	; 0x24
    1c10:	3d a1       	ldd	r19, Y+37	; 0x25
    1c12:	25 30       	cpi	r18, 0x05	; 5
    1c14:	31 05       	cpc	r19, r1
    1c16:	ec f4       	brge	.+58     	; 0x1c52 <H_SSD_void_DisplayNumber+0x57e>
    1c18:	8c a1       	ldd	r24, Y+36	; 0x24
    1c1a:	9d a1       	ldd	r25, Y+37	; 0x25
    1c1c:	81 30       	cpi	r24, 0x01	; 1
    1c1e:	91 05       	cpc	r25, r1
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <H_SSD_void_DisplayNumber+0x550>
    1c22:	6a c0       	rjmp	.+212    	; 0x1cf8 <H_SSD_void_DisplayNumber+0x624>
    1c24:	2c a1       	ldd	r18, Y+36	; 0x24
    1c26:	3d a1       	ldd	r19, Y+37	; 0x25
    1c28:	22 30       	cpi	r18, 0x02	; 2
    1c2a:	31 05       	cpc	r19, r1
    1c2c:	2c f4       	brge	.+10     	; 0x1c38 <H_SSD_void_DisplayNumber+0x564>
    1c2e:	8c a1       	ldd	r24, Y+36	; 0x24
    1c30:	9d a1       	ldd	r25, Y+37	; 0x25
    1c32:	00 97       	sbiw	r24, 0x00	; 0
    1c34:	99 f1       	breq	.+102    	; 0x1c9c <H_SSD_void_DisplayNumber+0x5c8>
    1c36:	d0 c1       	rjmp	.+928    	; 0x1fd8 <H_SSD_void_DisplayNumber+0x904>
    1c38:	2c a1       	ldd	r18, Y+36	; 0x24
    1c3a:	3d a1       	ldd	r19, Y+37	; 0x25
    1c3c:	22 30       	cpi	r18, 0x02	; 2
    1c3e:	31 05       	cpc	r19, r1
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <H_SSD_void_DisplayNumber+0x570>
    1c42:	83 c0       	rjmp	.+262    	; 0x1d4a <H_SSD_void_DisplayNumber+0x676>
    1c44:	8c a1       	ldd	r24, Y+36	; 0x24
    1c46:	9d a1       	ldd	r25, Y+37	; 0x25
    1c48:	83 30       	cpi	r24, 0x03	; 3
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	09 f4       	brne	.+2      	; 0x1c50 <H_SSD_void_DisplayNumber+0x57c>
    1c4e:	a6 c0       	rjmp	.+332    	; 0x1d9c <H_SSD_void_DisplayNumber+0x6c8>
    1c50:	c3 c1       	rjmp	.+902    	; 0x1fd8 <H_SSD_void_DisplayNumber+0x904>
    1c52:	2c a1       	ldd	r18, Y+36	; 0x24
    1c54:	3d a1       	ldd	r19, Y+37	; 0x25
    1c56:	27 30       	cpi	r18, 0x07	; 7
    1c58:	31 05       	cpc	r19, r1
    1c5a:	09 f4       	brne	.+2      	; 0x1c5e <H_SSD_void_DisplayNumber+0x58a>
    1c5c:	43 c1       	rjmp	.+646    	; 0x1ee4 <H_SSD_void_DisplayNumber+0x810>
    1c5e:	8c a1       	ldd	r24, Y+36	; 0x24
    1c60:	9d a1       	ldd	r25, Y+37	; 0x25
    1c62:	88 30       	cpi	r24, 0x08	; 8
    1c64:	91 05       	cpc	r25, r1
    1c66:	6c f4       	brge	.+26     	; 0x1c82 <H_SSD_void_DisplayNumber+0x5ae>
    1c68:	2c a1       	ldd	r18, Y+36	; 0x24
    1c6a:	3d a1       	ldd	r19, Y+37	; 0x25
    1c6c:	25 30       	cpi	r18, 0x05	; 5
    1c6e:	31 05       	cpc	r19, r1
    1c70:	09 f4       	brne	.+2      	; 0x1c74 <H_SSD_void_DisplayNumber+0x5a0>
    1c72:	e6 c0       	rjmp	.+460    	; 0x1e40 <H_SSD_void_DisplayNumber+0x76c>
    1c74:	8c a1       	ldd	r24, Y+36	; 0x24
    1c76:	9d a1       	ldd	r25, Y+37	; 0x25
    1c78:	86 30       	cpi	r24, 0x06	; 6
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	09 f4       	brne	.+2      	; 0x1c80 <H_SSD_void_DisplayNumber+0x5ac>
    1c7e:	09 c1       	rjmp	.+530    	; 0x1e92 <H_SSD_void_DisplayNumber+0x7be>
    1c80:	ab c1       	rjmp	.+854    	; 0x1fd8 <H_SSD_void_DisplayNumber+0x904>
    1c82:	2c a1       	ldd	r18, Y+36	; 0x24
    1c84:	3d a1       	ldd	r19, Y+37	; 0x25
    1c86:	28 30       	cpi	r18, 0x08	; 8
    1c88:	31 05       	cpc	r19, r1
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <H_SSD_void_DisplayNumber+0x5ba>
    1c8c:	54 c1       	rjmp	.+680    	; 0x1f36 <H_SSD_void_DisplayNumber+0x862>
    1c8e:	8c a1       	ldd	r24, Y+36	; 0x24
    1c90:	9d a1       	ldd	r25, Y+37	; 0x25
    1c92:	89 30       	cpi	r24, 0x09	; 9
    1c94:	91 05       	cpc	r25, r1
    1c96:	09 f4       	brne	.+2      	; 0x1c9a <H_SSD_void_DisplayNumber+0x5c6>
    1c98:	77 c1       	rjmp	.+750    	; 0x1f88 <H_SSD_void_DisplayNumber+0x8b4>
    1c9a:	9e c1       	rjmp	.+828    	; 0x1fd8 <H_SSD_void_DisplayNumber+0x904>
		{
		case 0:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	61 e0       	ldi	r22, 0x01	; 1
    1ca0:	41 e0       	ldi	r20, 0x01	; 1
    1ca2:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	62 e0       	ldi	r22, 0x02	; 2
    1caa:	41 e0       	ldi	r20, 0x01	; 1
    1cac:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	63 e0       	ldi	r22, 0x03	; 3
    1cb4:	41 e0       	ldi	r20, 0x01	; 1
    1cb6:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	64 e0       	ldi	r22, 0x04	; 4
    1cbe:	41 e0       	ldi	r20, 0x01	; 1
    1cc0:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	65 e0       	ldi	r22, 0x05	; 5
    1cc8:	41 e0       	ldi	r20, 0x01	; 1
    1cca:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	66 e0       	ldi	r22, 0x06	; 6
    1cd2:	41 e0       	ldi	r20, 0x01	; 1
    1cd4:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	61 e0       	ldi	r22, 0x01	; 1
    1cdc:	41 e0       	ldi	r20, 0x01	; 1
    1cde:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	67 e0       	ldi	r22, 0x07	; 7
    1ce6:	40 e0       	ldi	r20, 0x00	; 0
    1ce8:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	60 e0       	ldi	r22, 0x00	; 0
    1cf0:	40 e0       	ldi	r20, 0x00	; 0
    1cf2:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    1cf6:	70 c1       	rjmp	.+736    	; 0x1fd8 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 1:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	61 e0       	ldi	r22, 0x01	; 1
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	62 e0       	ldi	r22, 0x02	; 2
    1d06:	41 e0       	ldi	r20, 0x01	; 1
    1d08:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	63 e0       	ldi	r22, 0x03	; 3
    1d10:	41 e0       	ldi	r20, 0x01	; 1
    1d12:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	64 e0       	ldi	r22, 0x04	; 4
    1d1a:	40 e0       	ldi	r20, 0x00	; 0
    1d1c:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	65 e0       	ldi	r22, 0x05	; 5
    1d24:	40 e0       	ldi	r20, 0x00	; 0
    1d26:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	66 e0       	ldi	r22, 0x06	; 6
    1d2e:	40 e0       	ldi	r20, 0x00	; 0
    1d30:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	67 e0       	ldi	r22, 0x07	; 7
    1d38:	40 e0       	ldi	r20, 0x00	; 0
    1d3a:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	60 e0       	ldi	r22, 0x00	; 0
    1d42:	40 e0       	ldi	r20, 0x00	; 0
    1d44:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    1d48:	47 c1       	rjmp	.+654    	; 0x1fd8 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 2:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	61 e0       	ldi	r22, 0x01	; 1
    1d4e:	41 e0       	ldi	r20, 0x01	; 1
    1d50:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	62 e0       	ldi	r22, 0x02	; 2
    1d58:	41 e0       	ldi	r20, 0x01	; 1
    1d5a:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,LOW);
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	63 e0       	ldi	r22, 0x03	; 3
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	64 e0       	ldi	r22, 0x04	; 4
    1d6c:	41 e0       	ldi	r20, 0x01	; 1
    1d6e:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	65 e0       	ldi	r22, 0x05	; 5
    1d76:	41 e0       	ldi	r20, 0x01	; 1
    1d78:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	66 e0       	ldi	r22, 0x06	; 6
    1d80:	40 e0       	ldi	r20, 0x00	; 0
    1d82:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	67 e0       	ldi	r22, 0x07	; 7
    1d8a:	41 e0       	ldi	r20, 0x01	; 1
    1d8c:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	60 e0       	ldi	r22, 0x00	; 0
    1d94:	40 e0       	ldi	r20, 0x00	; 0
    1d96:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    1d9a:	1e c1       	rjmp	.+572    	; 0x1fd8 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 3:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	61 e0       	ldi	r22, 0x01	; 1
    1da0:	41 e0       	ldi	r20, 0x01	; 1
    1da2:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	62 e0       	ldi	r22, 0x02	; 2
    1daa:	41 e0       	ldi	r20, 0x01	; 1
    1dac:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	63 e0       	ldi	r22, 0x03	; 3
    1db4:	41 e0       	ldi	r20, 0x01	; 1
    1db6:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	64 e0       	ldi	r22, 0x04	; 4
    1dbe:	41 e0       	ldi	r20, 0x01	; 1
    1dc0:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	65 e0       	ldi	r22, 0x05	; 5
    1dc8:	40 e0       	ldi	r20, 0x00	; 0
    1dca:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	66 e0       	ldi	r22, 0x06	; 6
    1dd2:	40 e0       	ldi	r20, 0x00	; 0
    1dd4:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	67 e0       	ldi	r22, 0x07	; 7
    1ddc:	41 e0       	ldi	r20, 0x01	; 1
    1dde:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	60 e0       	ldi	r22, 0x00	; 0
    1de6:	40 e0       	ldi	r20, 0x00	; 0
    1de8:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    1dec:	f5 c0       	rjmp	.+490    	; 0x1fd8 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 4:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	61 e0       	ldi	r22, 0x01	; 1
    1df2:	40 e0       	ldi	r20, 0x00	; 0
    1df4:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	62 e0       	ldi	r22, 0x02	; 2
    1dfc:	41 e0       	ldi	r20, 0x01	; 1
    1dfe:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	63 e0       	ldi	r22, 0x03	; 3
    1e06:	41 e0       	ldi	r20, 0x01	; 1
    1e08:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	64 e0       	ldi	r22, 0x04	; 4
    1e10:	40 e0       	ldi	r20, 0x00	; 0
    1e12:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	65 e0       	ldi	r22, 0x05	; 5
    1e1a:	40 e0       	ldi	r20, 0x00	; 0
    1e1c:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	66 e0       	ldi	r22, 0x06	; 6
    1e24:	41 e0       	ldi	r20, 0x01	; 1
    1e26:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	67 e0       	ldi	r22, 0x07	; 7
    1e2e:	41 e0       	ldi	r20, 0x01	; 1
    1e30:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	60 e0       	ldi	r22, 0x00	; 0
    1e38:	40 e0       	ldi	r20, 0x00	; 0
    1e3a:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    1e3e:	cc c0       	rjmp	.+408    	; 0x1fd8 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 5:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	61 e0       	ldi	r22, 0x01	; 1
    1e44:	41 e0       	ldi	r20, 0x01	; 1
    1e46:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	62 e0       	ldi	r22, 0x02	; 2
    1e4e:	40 e0       	ldi	r20, 0x00	; 0
    1e50:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	63 e0       	ldi	r22, 0x03	; 3
    1e58:	41 e0       	ldi	r20, 0x01	; 1
    1e5a:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	64 e0       	ldi	r22, 0x04	; 4
    1e62:	41 e0       	ldi	r20, 0x01	; 1
    1e64:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	65 e0       	ldi	r22, 0x05	; 5
    1e6c:	40 e0       	ldi	r20, 0x00	; 0
    1e6e:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	66 e0       	ldi	r22, 0x06	; 6
    1e76:	41 e0       	ldi	r20, 0x01	; 1
    1e78:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	67 e0       	ldi	r22, 0x07	; 7
    1e80:	41 e0       	ldi	r20, 0x01	; 1
    1e82:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	60 e0       	ldi	r22, 0x00	; 0
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    1e90:	a3 c0       	rjmp	.+326    	; 0x1fd8 <H_SSD_void_DisplayNumber+0x904>
					break;
				case 6:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	61 e0       	ldi	r22, 0x01	; 1
    1e96:	41 e0       	ldi	r20, 0x01	; 1
    1e98:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	62 e0       	ldi	r22, 0x02	; 2
    1ea0:	40 e0       	ldi	r20, 0x00	; 0
    1ea2:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	63 e0       	ldi	r22, 0x03	; 3
    1eaa:	41 e0       	ldi	r20, 0x01	; 1
    1eac:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	64 e0       	ldi	r22, 0x04	; 4
    1eb4:	41 e0       	ldi	r20, 0x01	; 1
    1eb6:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	65 e0       	ldi	r22, 0x05	; 5
    1ebe:	41 e0       	ldi	r20, 0x01	; 1
    1ec0:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	66 e0       	ldi	r22, 0x06	; 6
    1ec8:	41 e0       	ldi	r20, 0x01	; 1
    1eca:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	67 e0       	ldi	r22, 0x07	; 7
    1ed2:	41 e0       	ldi	r20, 0x01	; 1
    1ed4:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	60 e0       	ldi	r22, 0x00	; 0
    1edc:	40 e0       	ldi	r20, 0x00	; 0
    1ede:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    1ee2:	7a c0       	rjmp	.+244    	; 0x1fd8 <H_SSD_void_DisplayNumber+0x904>
					break;
				case 7:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	61 e0       	ldi	r22, 0x01	; 1
    1ee8:	41 e0       	ldi	r20, 0x01	; 1
    1eea:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	62 e0       	ldi	r22, 0x02	; 2
    1ef2:	41 e0       	ldi	r20, 0x01	; 1
    1ef4:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	63 e0       	ldi	r22, 0x03	; 3
    1efc:	41 e0       	ldi	r20, 0x01	; 1
    1efe:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	64 e0       	ldi	r22, 0x04	; 4
    1f06:	40 e0       	ldi	r20, 0x00	; 0
    1f08:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	65 e0       	ldi	r22, 0x05	; 5
    1f10:	40 e0       	ldi	r20, 0x00	; 0
    1f12:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	66 e0       	ldi	r22, 0x06	; 6
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	67 e0       	ldi	r22, 0x07	; 7
    1f24:	40 e0       	ldi	r20, 0x00	; 0
    1f26:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	60 e0       	ldi	r22, 0x00	; 0
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    1f34:	51 c0       	rjmp	.+162    	; 0x1fd8 <H_SSD_void_DisplayNumber+0x904>
					break;
				case 8:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	61 e0       	ldi	r22, 0x01	; 1
    1f3a:	41 e0       	ldi	r20, 0x01	; 1
    1f3c:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	62 e0       	ldi	r22, 0x02	; 2
    1f44:	41 e0       	ldi	r20, 0x01	; 1
    1f46:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	63 e0       	ldi	r22, 0x03	; 3
    1f4e:	41 e0       	ldi	r20, 0x01	; 1
    1f50:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	64 e0       	ldi	r22, 0x04	; 4
    1f58:	41 e0       	ldi	r20, 0x01	; 1
    1f5a:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	65 e0       	ldi	r22, 0x05	; 5
    1f62:	41 e0       	ldi	r20, 0x01	; 1
    1f64:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	66 e0       	ldi	r22, 0x06	; 6
    1f6c:	41 e0       	ldi	r20, 0x01	; 1
    1f6e:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	67 e0       	ldi	r22, 0x07	; 7
    1f76:	41 e0       	ldi	r20, 0x01	; 1
    1f78:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	60 e0       	ldi	r22, 0x00	; 0
    1f80:	40 e0       	ldi	r20, 0x00	; 0
    1f82:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    1f86:	28 c0       	rjmp	.+80     	; 0x1fd8 <H_SSD_void_DisplayNumber+0x904>
					break;
				case 9:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	61 e0       	ldi	r22, 0x01	; 1
    1f8c:	41 e0       	ldi	r20, 0x01	; 1
    1f8e:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	62 e0       	ldi	r22, 0x02	; 2
    1f96:	41 e0       	ldi	r20, 0x01	; 1
    1f98:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	63 e0       	ldi	r22, 0x03	; 3
    1fa0:	41 e0       	ldi	r20, 0x01	; 1
    1fa2:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	64 e0       	ldi	r22, 0x04	; 4
    1faa:	41 e0       	ldi	r20, 0x01	; 1
    1fac:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	65 e0       	ldi	r22, 0x05	; 5
    1fb4:	40 e0       	ldi	r20, 0x00	; 0
    1fb6:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	66 e0       	ldi	r22, 0x06	; 6
    1fbe:	41 e0       	ldi	r20, 0x01	; 1
    1fc0:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	67 e0       	ldi	r22, 0x07	; 7
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	60 e0       	ldi	r22, 0x00	; 0
    1fd2:	40 e0       	ldi	r20, 0x00	; 0
    1fd4:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>



				}
		//enable digit 2
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,HIGH);
    1fd8:	82 e0       	ldi	r24, 0x02	; 2
    1fda:	67 e0       	ldi	r22, 0x07	; 7
    1fdc:	41 e0       	ldi	r20, 0x01	; 1
    1fde:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	a0 e8       	ldi	r26, 0x80	; 128
    1fe8:	bf e3       	ldi	r27, 0x3F	; 63
    1fea:	8b 87       	std	Y+11, r24	; 0x0b
    1fec:	9c 87       	std	Y+12, r25	; 0x0c
    1fee:	ad 87       	std	Y+13, r26	; 0x0d
    1ff0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	48 ec       	ldi	r20, 0xC8	; 200
    2000:	53 e4       	ldi	r21, 0x43	; 67
    2002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	8f 83       	std	Y+7, r24	; 0x07
    200c:	98 87       	std	Y+8, r25	; 0x08
    200e:	a9 87       	std	Y+9, r26	; 0x09
    2010:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2012:	6f 81       	ldd	r22, Y+7	; 0x07
    2014:	78 85       	ldd	r23, Y+8	; 0x08
    2016:	89 85       	ldd	r24, Y+9	; 0x09
    2018:	9a 85       	ldd	r25, Y+10	; 0x0a
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 e8       	ldi	r20, 0x80	; 128
    2020:	5f e3       	ldi	r21, 0x3F	; 63
    2022:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2026:	88 23       	and	r24, r24
    2028:	2c f4       	brge	.+10     	; 0x2034 <H_SSD_void_DisplayNumber+0x960>
		__ticks = 1;
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	9e 83       	std	Y+6, r25	; 0x06
    2030:	8d 83       	std	Y+5, r24	; 0x05
    2032:	3f c0       	rjmp	.+126    	; 0x20b2 <H_SSD_void_DisplayNumber+0x9de>
	else if (__tmp > 65535)
    2034:	6f 81       	ldd	r22, Y+7	; 0x07
    2036:	78 85       	ldd	r23, Y+8	; 0x08
    2038:	89 85       	ldd	r24, Y+9	; 0x09
    203a:	9a 85       	ldd	r25, Y+10	; 0x0a
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	3f ef       	ldi	r19, 0xFF	; 255
    2040:	4f e7       	ldi	r20, 0x7F	; 127
    2042:	57 e4       	ldi	r21, 0x47	; 71
    2044:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2048:	18 16       	cp	r1, r24
    204a:	4c f5       	brge	.+82     	; 0x209e <H_SSD_void_DisplayNumber+0x9ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204c:	6b 85       	ldd	r22, Y+11	; 0x0b
    204e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2050:	8d 85       	ldd	r24, Y+13	; 0x0d
    2052:	9e 85       	ldd	r25, Y+14	; 0x0e
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	40 e2       	ldi	r20, 0x20	; 32
    205a:	51 e4       	ldi	r21, 0x41	; 65
    205c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	bc 01       	movw	r22, r24
    2066:	cd 01       	movw	r24, r26
    2068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	9e 83       	std	Y+6, r25	; 0x06
    2072:	8d 83       	std	Y+5, r24	; 0x05
    2074:	0f c0       	rjmp	.+30     	; 0x2094 <H_SSD_void_DisplayNumber+0x9c0>
    2076:	88 e2       	ldi	r24, 0x28	; 40
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	9c 83       	std	Y+4, r25	; 0x04
    207c:	8b 83       	std	Y+3, r24	; 0x03
    207e:	8b 81       	ldd	r24, Y+3	; 0x03
    2080:	9c 81       	ldd	r25, Y+4	; 0x04
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	f1 f7       	brne	.-4      	; 0x2082 <H_SSD_void_DisplayNumber+0x9ae>
    2086:	9c 83       	std	Y+4, r25	; 0x04
    2088:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208a:	8d 81       	ldd	r24, Y+5	; 0x05
    208c:	9e 81       	ldd	r25, Y+6	; 0x06
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	9e 83       	std	Y+6, r25	; 0x06
    2092:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2094:	8d 81       	ldd	r24, Y+5	; 0x05
    2096:	9e 81       	ldd	r25, Y+6	; 0x06
    2098:	00 97       	sbiw	r24, 0x00	; 0
    209a:	69 f7       	brne	.-38     	; 0x2076 <H_SSD_void_DisplayNumber+0x9a2>
    209c:	14 c0       	rjmp	.+40     	; 0x20c6 <H_SSD_void_DisplayNumber+0x9f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    209e:	6f 81       	ldd	r22, Y+7	; 0x07
    20a0:	78 85       	ldd	r23, Y+8	; 0x08
    20a2:	89 85       	ldd	r24, Y+9	; 0x09
    20a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	9e 83       	std	Y+6, r25	; 0x06
    20b0:	8d 83       	std	Y+5, r24	; 0x05
    20b2:	8d 81       	ldd	r24, Y+5	; 0x05
    20b4:	9e 81       	ldd	r25, Y+6	; 0x06
    20b6:	9a 83       	std	Y+2, r25	; 0x02
    20b8:	89 83       	std	Y+1, r24	; 0x01
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	9a 81       	ldd	r25, Y+2	; 0x02
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	f1 f7       	brne	.-4      	; 0x20be <H_SSD_void_DisplayNumber+0x9ea>
    20c2:	9a 83       	std	Y+2, r25	; 0x02
    20c4:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(1);
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,LOW);
    20c6:	82 e0       	ldi	r24, 0x02	; 2
    20c8:	67 e0       	ldi	r22, 0x07	; 7
    20ca:	40 e0       	ldi	r20, 0x00	; 0
    20cc:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
		return;
	}
	u32 i ;
	u8 units =number % 10;
	u8 tens = number/10;
	for(i=0;i<SSD_DISPLAYY_TIME ;i++){
    20d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20d2:	98 a1       	ldd	r25, Y+32	; 0x20
    20d4:	a9 a1       	ldd	r26, Y+33	; 0x21
    20d6:	ba a1       	ldd	r27, Y+34	; 0x22
    20d8:	01 96       	adiw	r24, 0x01	; 1
    20da:	a1 1d       	adc	r26, r1
    20dc:	b1 1d       	adc	r27, r1
    20de:	8f 8f       	std	Y+31, r24	; 0x1f
    20e0:	98 a3       	std	Y+32, r25	; 0x20
    20e2:	a9 a3       	std	Y+33, r26	; 0x21
    20e4:	ba a3       	std	Y+34, r27	; 0x22
    20e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20e8:	98 a1       	ldd	r25, Y+32	; 0x20
    20ea:	a9 a1       	ldd	r26, Y+33	; 0x21
    20ec:	ba a1       	ldd	r27, Y+34	; 0x22
    20ee:	8a 3f       	cpi	r24, 0xFA	; 250
    20f0:	91 05       	cpc	r25, r1
    20f2:	a1 05       	cpc	r26, r1
    20f4:	b1 05       	cpc	r27, r1
    20f6:	08 f4       	brcc	.+2      	; 0x20fa <H_SSD_void_DisplayNumber+0xa26>
    20f8:	0e cb       	rjmp	.-2532   	; 0x1716 <H_SSD_void_DisplayNumber+0x42>
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,HIGH);

		_delay_ms(1);
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,LOW);
	}
}
    20fa:	a7 96       	adiw	r28, 0x27	; 39
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <H_PB_void_init>:
#include"PB_int.h"
#include<util/delay.h>


void H_PB_void_init(const PB_t *ptr)
{
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	00 d0       	rcall	.+0      	; 0x2112 <H_PB_void_init+0x6>
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    2116:	9a 83       	std	Y+2, r25	; 0x02
    2118:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_void_setPinDir(ptr->PB_port, ptr->PB_pin,IN);
    211a:	e9 81       	ldd	r30, Y+1	; 0x01
    211c:	fa 81       	ldd	r31, Y+2	; 0x02
    211e:	81 81       	ldd	r24, Z+1	; 0x01
    2120:	e9 81       	ldd	r30, Y+1	; 0x01
    2122:	fa 81       	ldd	r31, Y+2	; 0x02
    2124:	92 81       	ldd	r25, Z+2	; 0x02
    2126:	69 2f       	mov	r22, r25
    2128:	40 e0       	ldi	r20, 0x00	; 0
    212a:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
}
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	cf 91       	pop	r28
    2134:	df 91       	pop	r29
    2136:	08 95       	ret

00002138 <H_PB_void_read>:
void H_PB_void_read(const PB_t *ptr,VALUE_T *pvalue)
{
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
    2140:	a1 97       	sbiw	r28, 0x21	; 33
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	f8 94       	cli
    2146:	de bf       	out	0x3e, r29	; 62
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	cd bf       	out	0x3d, r28	; 61
    214c:	9f 8f       	std	Y+31, r25	; 0x1f
    214e:	8e 8f       	std	Y+30, r24	; 0x1e
    2150:	79 a3       	std	Y+33, r23	; 0x21
    2152:	68 a3       	std	Y+32, r22	; 0x20
	//u8 read;

	if(ptr -> PB_activeMood == ACTIVE_LOW)
    2154:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2156:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2158:	83 81       	ldd	r24, Z+3	; 0x03
    215a:	88 23       	and	r24, r24
    215c:	09 f0       	breq	.+2      	; 0x2160 <H_PB_void_read+0x28>
    215e:	b0 c0       	rjmp	.+352    	; 0x22c0 <H_PB_void_read+0x188>
	{
		*pvalue=NOT_PRESSED_ACTIVE_LOW ;
    2160:	e8 a1       	ldd	r30, Y+32	; 0x20
    2162:	f9 a1       	ldd	r31, Y+33	; 0x21
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	80 83       	st	Z, r24
		M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, pvalue);
    2168:	ee 8d       	ldd	r30, Y+30	; 0x1e
    216a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    216c:	81 81       	ldd	r24, Z+1	; 0x01
    216e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2170:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2172:	92 81       	ldd	r25, Z+2	; 0x02
    2174:	28 a1       	ldd	r18, Y+32	; 0x20
    2176:	39 a1       	ldd	r19, Y+33	; 0x21
    2178:	69 2f       	mov	r22, r25
    217a:	a9 01       	movw	r20, r18
    217c:	0e 94 30 0a 	call	0x1460	; 0x1460 <M_DIO_void_getPinValue>
		if(*pvalue==PRESSED_ACTIVE_LOW){
    2180:	e8 a1       	ldd	r30, Y+32	; 0x20
    2182:	f9 a1       	ldd	r31, Y+33	; 0x21
    2184:	80 81       	ld	r24, Z
    2186:	88 23       	and	r24, r24
    2188:	09 f0       	breq	.+2      	; 0x218c <H_PB_void_read+0x54>
    218a:	4f c1       	rjmp	.+670    	; 0x242a <H_PB_void_read+0x2f2>
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	a8 e4       	ldi	r26, 0x48	; 72
    2192:	b3 e4       	ldi	r27, 0x43	; 67
    2194:	89 8f       	std	Y+25, r24	; 0x19
    2196:	9a 8f       	std	Y+26, r25	; 0x1a
    2198:	ab 8f       	std	Y+27, r26	; 0x1b
    219a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219c:	69 8d       	ldd	r22, Y+25	; 0x19
    219e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	48 ec       	ldi	r20, 0xC8	; 200
    21aa:	53 e4       	ldi	r21, 0x43	; 67
    21ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	8d 8b       	std	Y+21, r24	; 0x15
    21b6:	9e 8b       	std	Y+22, r25	; 0x16
    21b8:	af 8b       	std	Y+23, r26	; 0x17
    21ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21bc:	6d 89       	ldd	r22, Y+21	; 0x15
    21be:	7e 89       	ldd	r23, Y+22	; 0x16
    21c0:	8f 89       	ldd	r24, Y+23	; 0x17
    21c2:	98 8d       	ldd	r25, Y+24	; 0x18
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e8       	ldi	r20, 0x80	; 128
    21ca:	5f e3       	ldi	r21, 0x3F	; 63
    21cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21d0:	88 23       	and	r24, r24
    21d2:	2c f4       	brge	.+10     	; 0x21de <H_PB_void_read+0xa6>
		__ticks = 1;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	9c 8b       	std	Y+20, r25	; 0x14
    21da:	8b 8b       	std	Y+19, r24	; 0x13
    21dc:	3f c0       	rjmp	.+126    	; 0x225c <H_PB_void_read+0x124>
	else if (__tmp > 65535)
    21de:	6d 89       	ldd	r22, Y+21	; 0x15
    21e0:	7e 89       	ldd	r23, Y+22	; 0x16
    21e2:	8f 89       	ldd	r24, Y+23	; 0x17
    21e4:	98 8d       	ldd	r25, Y+24	; 0x18
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	3f ef       	ldi	r19, 0xFF	; 255
    21ea:	4f e7       	ldi	r20, 0x7F	; 127
    21ec:	57 e4       	ldi	r21, 0x47	; 71
    21ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21f2:	18 16       	cp	r1, r24
    21f4:	4c f5       	brge	.+82     	; 0x2248 <H_PB_void_read+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f6:	69 8d       	ldd	r22, Y+25	; 0x19
    21f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e2       	ldi	r20, 0x20	; 32
    2204:	51 e4       	ldi	r21, 0x41	; 65
    2206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	bc 01       	movw	r22, r24
    2210:	cd 01       	movw	r24, r26
    2212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	9c 8b       	std	Y+20, r25	; 0x14
    221c:	8b 8b       	std	Y+19, r24	; 0x13
    221e:	0f c0       	rjmp	.+30     	; 0x223e <H_PB_void_read+0x106>
    2220:	88 e2       	ldi	r24, 0x28	; 40
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	9a 8b       	std	Y+18, r25	; 0x12
    2226:	89 8b       	std	Y+17, r24	; 0x11
    2228:	89 89       	ldd	r24, Y+17	; 0x11
    222a:	9a 89       	ldd	r25, Y+18	; 0x12
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <H_PB_void_read+0xf4>
    2230:	9a 8b       	std	Y+18, r25	; 0x12
    2232:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2234:	8b 89       	ldd	r24, Y+19	; 0x13
    2236:	9c 89       	ldd	r25, Y+20	; 0x14
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	9c 8b       	std	Y+20, r25	; 0x14
    223c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223e:	8b 89       	ldd	r24, Y+19	; 0x13
    2240:	9c 89       	ldd	r25, Y+20	; 0x14
    2242:	00 97       	sbiw	r24, 0x00	; 0
    2244:	69 f7       	brne	.-38     	; 0x2220 <H_PB_void_read+0xe8>
    2246:	14 c0       	rjmp	.+40     	; 0x2270 <H_PB_void_read+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2248:	6d 89       	ldd	r22, Y+21	; 0x15
    224a:	7e 89       	ldd	r23, Y+22	; 0x16
    224c:	8f 89       	ldd	r24, Y+23	; 0x17
    224e:	98 8d       	ldd	r25, Y+24	; 0x18
    2250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	9c 8b       	std	Y+20, r25	; 0x14
    225a:	8b 8b       	std	Y+19, r24	; 0x13
    225c:	8b 89       	ldd	r24, Y+19	; 0x13
    225e:	9c 89       	ldd	r25, Y+20	; 0x14
    2260:	98 8b       	std	Y+16, r25	; 0x10
    2262:	8f 87       	std	Y+15, r24	; 0x0f
    2264:	8f 85       	ldd	r24, Y+15	; 0x0f
    2266:	98 89       	ldd	r25, Y+16	; 0x10
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	f1 f7       	brne	.-4      	; 0x2268 <H_PB_void_read+0x130>
    226c:	98 8b       	std	Y+16, r25	; 0x10
    226e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);

			M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin,pvalue);
    2270:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2272:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2274:	81 81       	ldd	r24, Z+1	; 0x01
    2276:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2278:	ff 8d       	ldd	r31, Y+31	; 0x1f
    227a:	92 81       	ldd	r25, Z+2	; 0x02
    227c:	28 a1       	ldd	r18, Y+32	; 0x20
    227e:	39 a1       	ldd	r19, Y+33	; 0x21
    2280:	69 2f       	mov	r22, r25
    2282:	a9 01       	movw	r20, r18
    2284:	0e 94 30 0a 	call	0x1460	; 0x1460 <M_DIO_void_getPinValue>
			if (*pvalue==PRESSED_ACTIVE_LOW)
    2288:	e8 a1       	ldd	r30, Y+32	; 0x20
    228a:	f9 a1       	ldd	r31, Y+33	; 0x21
    228c:	80 81       	ld	r24, Z
    228e:	88 23       	and	r24, r24
    2290:	09 f0       	breq	.+2      	; 0x2294 <H_PB_void_read+0x15c>
    2292:	cb c0       	rjmp	.+406    	; 0x242a <H_PB_void_read+0x2f2>
    2294:	0c c0       	rjmp	.+24     	; 0x22ae <H_PB_void_read+0x176>
			{
				while(*pvalue==PRESSED_ACTIVE_LOW)
				{
					M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, pvalue);
    2296:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2298:	ff 8d       	ldd	r31, Y+31	; 0x1f
    229a:	81 81       	ldd	r24, Z+1	; 0x01
    229c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    229e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    22a0:	92 81       	ldd	r25, Z+2	; 0x02
    22a2:	28 a1       	ldd	r18, Y+32	; 0x20
    22a4:	39 a1       	ldd	r19, Y+33	; 0x21
    22a6:	69 2f       	mov	r22, r25
    22a8:	a9 01       	movw	r20, r18
    22aa:	0e 94 30 0a 	call	0x1460	; 0x1460 <M_DIO_void_getPinValue>
			_delay_ms(200);

			M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin,pvalue);
			if (*pvalue==PRESSED_ACTIVE_LOW)
			{
				while(*pvalue==PRESSED_ACTIVE_LOW)
    22ae:	e8 a1       	ldd	r30, Y+32	; 0x20
    22b0:	f9 a1       	ldd	r31, Y+33	; 0x21
    22b2:	80 81       	ld	r24, Z
    22b4:	88 23       	and	r24, r24
    22b6:	79 f3       	breq	.-34     	; 0x2296 <H_PB_void_read+0x15e>
				{
					M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, pvalue);
				}
				*pvalue=PRESSED_ACTIVE_LOW;
    22b8:	e8 a1       	ldd	r30, Y+32	; 0x20
    22ba:	f9 a1       	ldd	r31, Y+33	; 0x21
    22bc:	10 82       	st	Z, r1
    22be:	b5 c0       	rjmp	.+362    	; 0x242a <H_PB_void_read+0x2f2>
				return;
			}

		}
	}
	else if(ptr->PB_activeMood==ACTIVE_HIGH)
    22c0:	ee 8d       	ldd	r30, Y+30	; 0x1e
    22c2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    22c4:	83 81       	ldd	r24, Z+3	; 0x03
    22c6:	81 30       	cpi	r24, 0x01	; 1
    22c8:	09 f0       	breq	.+2      	; 0x22cc <H_PB_void_read+0x194>
    22ca:	af c0       	rjmp	.+350    	; 0x242a <H_PB_void_read+0x2f2>
	{
		u8 read;

		if(ptr->PB_activeMood==ACTIVE_LOW)
    22cc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    22ce:	ff 8d       	ldd	r31, Y+31	; 0x1f
    22d0:	83 81       	ldd	r24, Z+3	; 0x03
    22d2:	88 23       	and	r24, r24
    22d4:	09 f0       	breq	.+2      	; 0x22d8 <H_PB_void_read+0x1a0>
    22d6:	a9 c0       	rjmp	.+338    	; 0x242a <H_PB_void_read+0x2f2>
		{
			read=NOT_PRESSED_ACTIVEHIGH ;
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	8d 8f       	std	Y+29, r24	; 0x1d
			M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
    22dc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    22de:	ff 8d       	ldd	r31, Y+31	; 0x1f
    22e0:	81 81       	ldd	r24, Z+1	; 0x01
    22e2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    22e4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    22e6:	92 81       	ldd	r25, Z+2	; 0x02
    22e8:	9e 01       	movw	r18, r28
    22ea:	20 5e       	subi	r18, 0xE0	; 224
    22ec:	3f 4f       	sbci	r19, 0xFF	; 255
    22ee:	69 2f       	mov	r22, r25
    22f0:	a9 01       	movw	r20, r18
    22f2:	0e 94 30 0a 	call	0x1460	; 0x1460 <M_DIO_void_getPinValue>
			if(read==PRESSED_ACTIVE_LOW){
    22f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22f8:	88 23       	and	r24, r24
    22fa:	09 f0       	breq	.+2      	; 0x22fe <H_PB_void_read+0x1c6>
    22fc:	96 c0       	rjmp	.+300    	; 0x242a <H_PB_void_read+0x2f2>
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	a8 e4       	ldi	r26, 0x48	; 72
    2304:	b3 e4       	ldi	r27, 0x43	; 67
    2306:	8b 87       	std	Y+11, r24	; 0x0b
    2308:	9c 87       	std	Y+12, r25	; 0x0c
    230a:	ad 87       	std	Y+13, r26	; 0x0d
    230c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2310:	7c 85       	ldd	r23, Y+12	; 0x0c
    2312:	8d 85       	ldd	r24, Y+13	; 0x0d
    2314:	9e 85       	ldd	r25, Y+14	; 0x0e
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	48 ec       	ldi	r20, 0xC8	; 200
    231c:	53 e4       	ldi	r21, 0x43	; 67
    231e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	8f 83       	std	Y+7, r24	; 0x07
    2328:	98 87       	std	Y+8, r25	; 0x08
    232a:	a9 87       	std	Y+9, r26	; 0x09
    232c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    232e:	6f 81       	ldd	r22, Y+7	; 0x07
    2330:	78 85       	ldd	r23, Y+8	; 0x08
    2332:	89 85       	ldd	r24, Y+9	; 0x09
    2334:	9a 85       	ldd	r25, Y+10	; 0x0a
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	40 e8       	ldi	r20, 0x80	; 128
    233c:	5f e3       	ldi	r21, 0x3F	; 63
    233e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2342:	88 23       	and	r24, r24
    2344:	2c f4       	brge	.+10     	; 0x2350 <H_PB_void_read+0x218>
		__ticks = 1;
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	9e 83       	std	Y+6, r25	; 0x06
    234c:	8d 83       	std	Y+5, r24	; 0x05
    234e:	3f c0       	rjmp	.+126    	; 0x23ce <H_PB_void_read+0x296>
	else if (__tmp > 65535)
    2350:	6f 81       	ldd	r22, Y+7	; 0x07
    2352:	78 85       	ldd	r23, Y+8	; 0x08
    2354:	89 85       	ldd	r24, Y+9	; 0x09
    2356:	9a 85       	ldd	r25, Y+10	; 0x0a
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	3f ef       	ldi	r19, 0xFF	; 255
    235c:	4f e7       	ldi	r20, 0x7F	; 127
    235e:	57 e4       	ldi	r21, 0x47	; 71
    2360:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2364:	18 16       	cp	r1, r24
    2366:	4c f5       	brge	.+82     	; 0x23ba <H_PB_void_read+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2368:	6b 85       	ldd	r22, Y+11	; 0x0b
    236a:	7c 85       	ldd	r23, Y+12	; 0x0c
    236c:	8d 85       	ldd	r24, Y+13	; 0x0d
    236e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e2       	ldi	r20, 0x20	; 32
    2376:	51 e4       	ldi	r21, 0x41	; 65
    2378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	bc 01       	movw	r22, r24
    2382:	cd 01       	movw	r24, r26
    2384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	9e 83       	std	Y+6, r25	; 0x06
    238e:	8d 83       	std	Y+5, r24	; 0x05
    2390:	0f c0       	rjmp	.+30     	; 0x23b0 <H_PB_void_read+0x278>
    2392:	88 e2       	ldi	r24, 0x28	; 40
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	9c 83       	std	Y+4, r25	; 0x04
    2398:	8b 83       	std	Y+3, r24	; 0x03
    239a:	8b 81       	ldd	r24, Y+3	; 0x03
    239c:	9c 81       	ldd	r25, Y+4	; 0x04
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	f1 f7       	brne	.-4      	; 0x239e <H_PB_void_read+0x266>
    23a2:	9c 83       	std	Y+4, r25	; 0x04
    23a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a6:	8d 81       	ldd	r24, Y+5	; 0x05
    23a8:	9e 81       	ldd	r25, Y+6	; 0x06
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	9e 83       	std	Y+6, r25	; 0x06
    23ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b0:	8d 81       	ldd	r24, Y+5	; 0x05
    23b2:	9e 81       	ldd	r25, Y+6	; 0x06
    23b4:	00 97       	sbiw	r24, 0x00	; 0
    23b6:	69 f7       	brne	.-38     	; 0x2392 <H_PB_void_read+0x25a>
    23b8:	14 c0       	rjmp	.+40     	; 0x23e2 <H_PB_void_read+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ba:	6f 81       	ldd	r22, Y+7	; 0x07
    23bc:	78 85       	ldd	r23, Y+8	; 0x08
    23be:	89 85       	ldd	r24, Y+9	; 0x09
    23c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	9e 83       	std	Y+6, r25	; 0x06
    23cc:	8d 83       	std	Y+5, r24	; 0x05
    23ce:	8d 81       	ldd	r24, Y+5	; 0x05
    23d0:	9e 81       	ldd	r25, Y+6	; 0x06
    23d2:	9a 83       	std	Y+2, r25	; 0x02
    23d4:	89 83       	std	Y+1, r24	; 0x01
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	9a 81       	ldd	r25, Y+2	; 0x02
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	f1 f7       	brne	.-4      	; 0x23da <H_PB_void_read+0x2a2>
    23de:	9a 83       	std	Y+2, r25	; 0x02
    23e0:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(200);

				M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
    23e2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    23e4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    23e6:	81 81       	ldd	r24, Z+1	; 0x01
    23e8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    23ea:	ff 8d       	ldd	r31, Y+31	; 0x1f
    23ec:	92 81       	ldd	r25, Z+2	; 0x02
    23ee:	9e 01       	movw	r18, r28
    23f0:	20 5e       	subi	r18, 0xE0	; 224
    23f2:	3f 4f       	sbci	r19, 0xFF	; 255
    23f4:	69 2f       	mov	r22, r25
    23f6:	a9 01       	movw	r20, r18
    23f8:	0e 94 30 0a 	call	0x1460	; 0x1460 <M_DIO_void_getPinValue>
				if (read==PRESSED_ACTIVE_LOW)
    23fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23fe:	88 23       	and	r24, r24
    2400:	a1 f4       	brne	.+40     	; 0x242a <H_PB_void_read+0x2f2>
    2402:	0d c0       	rjmp	.+26     	; 0x241e <H_PB_void_read+0x2e6>
				{
					while(read==PRESSED_ACTIVE_LOW)
					{
						M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
    2404:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2406:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2408:	81 81       	ldd	r24, Z+1	; 0x01
    240a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    240c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    240e:	92 81       	ldd	r25, Z+2	; 0x02
    2410:	9e 01       	movw	r18, r28
    2412:	20 5e       	subi	r18, 0xE0	; 224
    2414:	3f 4f       	sbci	r19, 0xFF	; 255
    2416:	69 2f       	mov	r22, r25
    2418:	a9 01       	movw	r20, r18
    241a:	0e 94 30 0a 	call	0x1460	; 0x1460 <M_DIO_void_getPinValue>
				_delay_ms(200);

				M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
				if (read==PRESSED_ACTIVE_LOW)
				{
					while(read==PRESSED_ACTIVE_LOW)
    241e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2420:	88 23       	and	r24, r24
    2422:	81 f3       	breq	.-32     	; 0x2404 <H_PB_void_read+0x2cc>
					{
						M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
					}
					*pvalue=PRESSED_ACTIVE_LOW;
    2424:	e8 a1       	ldd	r30, Y+32	; 0x20
    2426:	f9 a1       	ldd	r31, Y+33	; 0x21
    2428:	10 82       	st	Z, r1
				}

			}
		}
	}
}
    242a:	a1 96       	adiw	r28, 0x21	; 33
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	cd bf       	out	0x3d, r28	; 61
    2436:	cf 91       	pop	r28
    2438:	df 91       	pop	r29
    243a:	08 95       	ret

0000243c <H_Led_void_ledInit>:
#include "LED_priv.h"
#include"LED_config.h"
#include"LED_int.h"

void  H_Led_void_ledInit(u8 LedID)
{
    243c:	df 93       	push	r29
    243e:	cf 93       	push	r28
    2440:	00 d0       	rcall	.+0      	; 0x2442 <H_Led_void_ledInit+0x6>
    2442:	0f 92       	push	r0
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	89 83       	std	Y+1, r24	; 0x01
	switch (LedID)
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	28 2f       	mov	r18, r24
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	3b 83       	std	Y+3, r19	; 0x03
    2452:	2a 83       	std	Y+2, r18	; 0x02
    2454:	8a 81       	ldd	r24, Y+2	; 0x02
    2456:	9b 81       	ldd	r25, Y+3	; 0x03
    2458:	81 30       	cpi	r24, 0x01	; 1
    245a:	91 05       	cpc	r25, r1
    245c:	79 f0       	breq	.+30     	; 0x247c <H_Led_void_ledInit+0x40>
    245e:	2a 81       	ldd	r18, Y+2	; 0x02
    2460:	3b 81       	ldd	r19, Y+3	; 0x03
    2462:	22 30       	cpi	r18, 0x02	; 2
    2464:	31 05       	cpc	r19, r1
    2466:	81 f0       	breq	.+32     	; 0x2488 <H_Led_void_ledInit+0x4c>
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	9b 81       	ldd	r25, Y+3	; 0x03
    246c:	00 97       	sbiw	r24, 0x00	; 0
    246e:	89 f4       	brne	.+34     	; 0x2492 <H_Led_void_ledInit+0x56>
	{
	case RED_LED :
			M_DIO_void_setPinDir(LED_RED_PORT,  LED_RED_PIN , OUT);
    2470:	82 e0       	ldi	r24, 0x02	; 2
    2472:	60 e0       	ldi	r22, 0x00	; 0
    2474:	41 e0       	ldi	r20, 0x01	; 1
    2476:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
    247a:	0b c0       	rjmp	.+22     	; 0x2492 <H_Led_void_ledInit+0x56>
		break;
	case GRN_LED :
			M_DIO_void_setPinDir(LED_GRN_PORT,  LED_GRN_PIN , OUT);
    247c:	82 e0       	ldi	r24, 0x02	; 2
    247e:	62 e0       	ldi	r22, 0x02	; 2
    2480:	41 e0       	ldi	r20, 0x01	; 1
    2482:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
    2486:	05 c0       	rjmp	.+10     	; 0x2492 <H_Led_void_ledInit+0x56>
			break;
	case BLU_LED :
			M_DIO_void_setPinDir(LED_BLU_PORT,  LED_BLU_PIN , OUT);
    2488:	82 e0       	ldi	r24, 0x02	; 2
    248a:	61 e0       	ldi	r22, 0x01	; 1
    248c:	41 e0       	ldi	r20, 0x01	; 1
    248e:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
			break;
	}
}
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	08 95       	ret

0000249e <H_Led_void_setON>:


void  H_Led_void_setON(u8 LedID)
{
    249e:	df 93       	push	r29
    24a0:	cf 93       	push	r28
    24a2:	00 d0       	rcall	.+0      	; 0x24a4 <H_Led_void_setON+0x6>
    24a4:	0f 92       	push	r0
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	89 83       	std	Y+1, r24	; 0x01
	switch(LedID)
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	28 2f       	mov	r18, r24
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	3b 83       	std	Y+3, r19	; 0x03
    24b4:	2a 83       	std	Y+2, r18	; 0x02
    24b6:	8a 81       	ldd	r24, Y+2	; 0x02
    24b8:	9b 81       	ldd	r25, Y+3	; 0x03
    24ba:	81 30       	cpi	r24, 0x01	; 1
    24bc:	91 05       	cpc	r25, r1
    24be:	79 f0       	breq	.+30     	; 0x24de <H_Led_void_setON+0x40>
    24c0:	2a 81       	ldd	r18, Y+2	; 0x02
    24c2:	3b 81       	ldd	r19, Y+3	; 0x03
    24c4:	22 30       	cpi	r18, 0x02	; 2
    24c6:	31 05       	cpc	r19, r1
    24c8:	81 f0       	breq	.+32     	; 0x24ea <H_Led_void_setON+0x4c>
    24ca:	8a 81       	ldd	r24, Y+2	; 0x02
    24cc:	9b 81       	ldd	r25, Y+3	; 0x03
    24ce:	00 97       	sbiw	r24, 0x00	; 0
    24d0:	89 f4       	brne	.+34     	; 0x24f4 <H_Led_void_setON+0x56>
	{
	case RED_LED :
#if (LED_RED_DIRECTION == LED_FORWARD )
		M_DIO_void_setPinValue(LED_RED_PORT,LED_RED_PIN,HIGH);
    24d2:	82 e0       	ldi	r24, 0x02	; 2
    24d4:	60 e0       	ldi	r22, 0x00	; 0
    24d6:	41 e0       	ldi	r20, 0x01	; 1
    24d8:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    24dc:	0b c0       	rjmp	.+22     	; 0x24f4 <H_Led_void_setON+0x56>
#endif
		break;

	case GRN_LED :
#if (LED_GRN_DIRECTION == LED_FORWARD )
		M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,HIGH);
    24de:	82 e0       	ldi	r24, 0x02	; 2
    24e0:	62 e0       	ldi	r22, 0x02	; 2
    24e2:	41 e0       	ldi	r20, 0x01	; 1
    24e4:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    24e8:	05 c0       	rjmp	.+10     	; 0x24f4 <H_Led_void_setON+0x56>
		M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,LOW);
#endif
		break;
	case BLU_LED :
	#if (LED_BLU_DIRECTION == LED_FORWARD )
			M_DIO_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,HIGH);
    24ea:	82 e0       	ldi	r24, 0x02	; 2
    24ec:	61 e0       	ldi	r22, 0x01	; 1
    24ee:	41 e0       	ldi	r20, 0x01	; 1
    24f0:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
			break;



	}
}
    24f4:	0f 90       	pop	r0
    24f6:	0f 90       	pop	r0
    24f8:	0f 90       	pop	r0
    24fa:	cf 91       	pop	r28
    24fc:	df 91       	pop	r29
    24fe:	08 95       	ret

00002500 <H_Led_void_setOFF>:
void  H_Led_void_setOFF(u8 LedID)
{
    2500:	df 93       	push	r29
    2502:	cf 93       	push	r28
    2504:	00 d0       	rcall	.+0      	; 0x2506 <H_Led_void_setOFF+0x6>
    2506:	0f 92       	push	r0
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
    250c:	89 83       	std	Y+1, r24	; 0x01
	switch(LedID)
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	28 2f       	mov	r18, r24
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	3b 83       	std	Y+3, r19	; 0x03
    2516:	2a 83       	std	Y+2, r18	; 0x02
    2518:	8a 81       	ldd	r24, Y+2	; 0x02
    251a:	9b 81       	ldd	r25, Y+3	; 0x03
    251c:	81 30       	cpi	r24, 0x01	; 1
    251e:	91 05       	cpc	r25, r1
    2520:	79 f0       	breq	.+30     	; 0x2540 <H_Led_void_setOFF+0x40>
    2522:	2a 81       	ldd	r18, Y+2	; 0x02
    2524:	3b 81       	ldd	r19, Y+3	; 0x03
    2526:	22 30       	cpi	r18, 0x02	; 2
    2528:	31 05       	cpc	r19, r1
    252a:	81 f0       	breq	.+32     	; 0x254c <H_Led_void_setOFF+0x4c>
    252c:	8a 81       	ldd	r24, Y+2	; 0x02
    252e:	9b 81       	ldd	r25, Y+3	; 0x03
    2530:	00 97       	sbiw	r24, 0x00	; 0
    2532:	89 f4       	brne	.+34     	; 0x2556 <H_Led_void_setOFF+0x56>
		{
		case RED_LED :
	#if (LED_RED_DIRECTION == LED_FORWARD )
			M_DIO_void_setPinValue(LED_RED_PORT,LED_RED_PIN,LOW);
    2534:	82 e0       	ldi	r24, 0x02	; 2
    2536:	60 e0       	ldi	r22, 0x00	; 0
    2538:	40 e0       	ldi	r20, 0x00	; 0
    253a:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    253e:	0b c0       	rjmp	.+22     	; 0x2556 <H_Led_void_setOFF+0x56>
	#endif
			break;

		case GRN_LED :
	#if (LED_GRN_DIRECTION == LED_FORWARD )
			M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,LOW);
    2540:	82 e0       	ldi	r24, 0x02	; 2
    2542:	62 e0       	ldi	r22, 0x02	; 2
    2544:	40 e0       	ldi	r20, 0x00	; 0
    2546:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    254a:	05 c0       	rjmp	.+10     	; 0x2556 <H_Led_void_setOFF+0x56>
			M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,HIGH);
	#endif
			break;
		case BLU_LED :
		#if (LED_BLU_DIRECTION == LED_FORWARD )
				M_DIO_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,LOW);
    254c:	82 e0       	ldi	r24, 0x02	; 2
    254e:	61 e0       	ldi	r22, 0x01	; 1
    2550:	40 e0       	ldi	r20, 0x00	; 0
    2552:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
				M_DIO_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,HIGH);
		#endif
				break;

		}
}
    2556:	0f 90       	pop	r0
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	cf 91       	pop	r28
    255e:	df 91       	pop	r29
    2560:	08 95       	ret

00002562 <H_Led_void_toggle>:

void  H_Led_void_toggle(u8 LedID)
{
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	00 d0       	rcall	.+0      	; 0x2568 <H_Led_void_toggle+0x6>
    2568:	0f 92       	push	r0
    256a:	cd b7       	in	r28, 0x3d	; 61
    256c:	de b7       	in	r29, 0x3e	; 62
    256e:	89 83       	std	Y+1, r24	; 0x01
	switch (LedID)
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	28 2f       	mov	r18, r24
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	3b 83       	std	Y+3, r19	; 0x03
    2578:	2a 83       	std	Y+2, r18	; 0x02
    257a:	8a 81       	ldd	r24, Y+2	; 0x02
    257c:	9b 81       	ldd	r25, Y+3	; 0x03
    257e:	81 30       	cpi	r24, 0x01	; 1
    2580:	91 05       	cpc	r25, r1
    2582:	71 f0       	breq	.+28     	; 0x25a0 <H_Led_void_toggle+0x3e>
    2584:	2a 81       	ldd	r18, Y+2	; 0x02
    2586:	3b 81       	ldd	r19, Y+3	; 0x03
    2588:	22 30       	cpi	r18, 0x02	; 2
    258a:	31 05       	cpc	r19, r1
    258c:	71 f0       	breq	.+28     	; 0x25aa <H_Led_void_toggle+0x48>
    258e:	8a 81       	ldd	r24, Y+2	; 0x02
    2590:	9b 81       	ldd	r25, Y+3	; 0x03
    2592:	00 97       	sbiw	r24, 0x00	; 0
    2594:	71 f4       	brne	.+28     	; 0x25b2 <H_Led_void_toggle+0x50>
		{
		case RED_LED :
			 M_DIO_void_TogPinValue(LED_RED_PORT,LED_RED_PIN);
    2596:	82 e0       	ldi	r24, 0x02	; 2
    2598:	60 e0       	ldi	r22, 0x00	; 0
    259a:	0e 94 b4 0a 	call	0x1568	; 0x1568 <M_DIO_void_TogPinValue>
    259e:	09 c0       	rjmp	.+18     	; 0x25b2 <H_Led_void_toggle+0x50>

			break;
		case GRN_LED :
			 M_DIO_void_TogPinValue(LED_GRN_PORT, LED_GRN_PIN);
    25a0:	82 e0       	ldi	r24, 0x02	; 2
    25a2:	62 e0       	ldi	r22, 0x02	; 2
    25a4:	0e 94 b4 0a 	call	0x1568	; 0x1568 <M_DIO_void_TogPinValue>
    25a8:	04 c0       	rjmp	.+8      	; 0x25b2 <H_Led_void_toggle+0x50>

				break;
		case BLU_LED :
			 M_DIO_void_TogPinValue(LED_BLU_PORT,LED_BLU_PIN);
    25aa:	82 e0       	ldi	r24, 0x02	; 2
    25ac:	61 e0       	ldi	r22, 0x01	; 1
    25ae:	0e 94 b4 0a 	call	0x1568	; 0x1568 <M_DIO_void_TogPinValue>

				break;
		}
}
    25b2:	0f 90       	pop	r0
    25b4:	0f 90       	pop	r0
    25b6:	0f 90       	pop	r0
    25b8:	cf 91       	pop	r28
    25ba:	df 91       	pop	r29
    25bc:	08 95       	ret

000025be <Animation1>:

void Animation1()
{
    25be:	0f 93       	push	r16
    25c0:	1f 93       	push	r17
    25c2:	df 93       	push	r29
    25c4:	cf 93       	push	r28
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    25ca:	c4 55       	subi	r28, 0x54	; 84
    25cc:	d0 40       	sbci	r29, 0x00	; 0
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	de bf       	out	0x3e, r29	; 62
    25d4:	0f be       	out	0x3f, r0	; 63
    25d6:	cd bf       	out	0x3d, r28	; 61
	H_Led_void_setON(RED_LED);
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	0e 94 4f 12 	call	0x249e	; 0x249e <H_Led_void_setON>
	H_Led_void_setON(BLU_LED);
    25de:	82 e0       	ldi	r24, 0x02	; 2
    25e0:	0e 94 4f 12 	call	0x249e	; 0x249e <H_Led_void_setON>
    25e4:	fe 01       	movw	r30, r28
    25e6:	ef 5a       	subi	r30, 0xAF	; 175
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	aa ef       	ldi	r26, 0xFA	; 250
    25f0:	b3 e4       	ldi	r27, 0x43	; 67
    25f2:	80 83       	st	Z, r24
    25f4:	91 83       	std	Z+1, r25	; 0x01
    25f6:	a2 83       	std	Z+2, r26	; 0x02
    25f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fa:	8e 01       	movw	r16, r28
    25fc:	03 5b       	subi	r16, 0xB3	; 179
    25fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2600:	fe 01       	movw	r30, r28
    2602:	ef 5a       	subi	r30, 0xAF	; 175
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	60 81       	ld	r22, Z
    2608:	71 81       	ldd	r23, Z+1	; 0x01
    260a:	82 81       	ldd	r24, Z+2	; 0x02
    260c:	93 81       	ldd	r25, Z+3	; 0x03
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	48 ec       	ldi	r20, 0xC8	; 200
    2614:	53 e4       	ldi	r21, 0x43	; 67
    2616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	f8 01       	movw	r30, r16
    2620:	80 83       	st	Z, r24
    2622:	91 83       	std	Z+1, r25	; 0x01
    2624:	a2 83       	std	Z+2, r26	; 0x02
    2626:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2628:	fe 01       	movw	r30, r28
    262a:	e3 5b       	subi	r30, 0xB3	; 179
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	60 81       	ld	r22, Z
    2630:	71 81       	ldd	r23, Z+1	; 0x01
    2632:	82 81       	ldd	r24, Z+2	; 0x02
    2634:	93 81       	ldd	r25, Z+3	; 0x03
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e8       	ldi	r20, 0x80	; 128
    263c:	5f e3       	ldi	r21, 0x3F	; 63
    263e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2642:	88 23       	and	r24, r24
    2644:	44 f4       	brge	.+16     	; 0x2656 <Animation1+0x98>
		__ticks = 1;
    2646:	fe 01       	movw	r30, r28
    2648:	e5 5b       	subi	r30, 0xB5	; 181
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	91 83       	std	Z+1, r25	; 0x01
    2652:	80 83       	st	Z, r24
    2654:	64 c0       	rjmp	.+200    	; 0x271e <Animation1+0x160>
	else if (__tmp > 65535)
    2656:	fe 01       	movw	r30, r28
    2658:	e3 5b       	subi	r30, 0xB3	; 179
    265a:	ff 4f       	sbci	r31, 0xFF	; 255
    265c:	60 81       	ld	r22, Z
    265e:	71 81       	ldd	r23, Z+1	; 0x01
    2660:	82 81       	ldd	r24, Z+2	; 0x02
    2662:	93 81       	ldd	r25, Z+3	; 0x03
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	3f ef       	ldi	r19, 0xFF	; 255
    2668:	4f e7       	ldi	r20, 0x7F	; 127
    266a:	57 e4       	ldi	r21, 0x47	; 71
    266c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2670:	18 16       	cp	r1, r24
    2672:	0c f0       	brlt	.+2      	; 0x2676 <Animation1+0xb8>
    2674:	43 c0       	rjmp	.+134    	; 0x26fc <Animation1+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2676:	fe 01       	movw	r30, r28
    2678:	ef 5a       	subi	r30, 0xAF	; 175
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	60 81       	ld	r22, Z
    267e:	71 81       	ldd	r23, Z+1	; 0x01
    2680:	82 81       	ldd	r24, Z+2	; 0x02
    2682:	93 81       	ldd	r25, Z+3	; 0x03
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e2       	ldi	r20, 0x20	; 32
    268a:	51 e4       	ldi	r21, 0x41	; 65
    268c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	8e 01       	movw	r16, r28
    2696:	05 5b       	subi	r16, 0xB5	; 181
    2698:	1f 4f       	sbci	r17, 0xFF	; 255
    269a:	bc 01       	movw	r22, r24
    269c:	cd 01       	movw	r24, r26
    269e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	f8 01       	movw	r30, r16
    26a8:	91 83       	std	Z+1, r25	; 0x01
    26aa:	80 83       	st	Z, r24
    26ac:	1f c0       	rjmp	.+62     	; 0x26ec <Animation1+0x12e>
    26ae:	fe 01       	movw	r30, r28
    26b0:	e7 5b       	subi	r30, 0xB7	; 183
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	88 e2       	ldi	r24, 0x28	; 40
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	91 83       	std	Z+1, r25	; 0x01
    26ba:	80 83       	st	Z, r24
    26bc:	fe 01       	movw	r30, r28
    26be:	e7 5b       	subi	r30, 0xB7	; 183
    26c0:	ff 4f       	sbci	r31, 0xFF	; 255
    26c2:	80 81       	ld	r24, Z
    26c4:	91 81       	ldd	r25, Z+1	; 0x01
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	f1 f7       	brne	.-4      	; 0x26c6 <Animation1+0x108>
    26ca:	fe 01       	movw	r30, r28
    26cc:	e7 5b       	subi	r30, 0xB7	; 183
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	91 83       	std	Z+1, r25	; 0x01
    26d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d4:	de 01       	movw	r26, r28
    26d6:	a5 5b       	subi	r26, 0xB5	; 181
    26d8:	bf 4f       	sbci	r27, 0xFF	; 255
    26da:	fe 01       	movw	r30, r28
    26dc:	e5 5b       	subi	r30, 0xB5	; 181
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	80 81       	ld	r24, Z
    26e2:	91 81       	ldd	r25, Z+1	; 0x01
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	11 96       	adiw	r26, 0x01	; 1
    26e8:	9c 93       	st	X, r25
    26ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ec:	fe 01       	movw	r30, r28
    26ee:	e5 5b       	subi	r30, 0xB5	; 181
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	80 81       	ld	r24, Z
    26f4:	91 81       	ldd	r25, Z+1	; 0x01
    26f6:	00 97       	sbiw	r24, 0x00	; 0
    26f8:	d1 f6       	brne	.-76     	; 0x26ae <Animation1+0xf0>
    26fa:	27 c0       	rjmp	.+78     	; 0x274a <Animation1+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26fc:	8e 01       	movw	r16, r28
    26fe:	05 5b       	subi	r16, 0xB5	; 181
    2700:	1f 4f       	sbci	r17, 0xFF	; 255
    2702:	fe 01       	movw	r30, r28
    2704:	e3 5b       	subi	r30, 0xB3	; 179
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	60 81       	ld	r22, Z
    270a:	71 81       	ldd	r23, Z+1	; 0x01
    270c:	82 81       	ldd	r24, Z+2	; 0x02
    270e:	93 81       	ldd	r25, Z+3	; 0x03
    2710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	f8 01       	movw	r30, r16
    271a:	91 83       	std	Z+1, r25	; 0x01
    271c:	80 83       	st	Z, r24
    271e:	de 01       	movw	r26, r28
    2720:	a9 5b       	subi	r26, 0xB9	; 185
    2722:	bf 4f       	sbci	r27, 0xFF	; 255
    2724:	fe 01       	movw	r30, r28
    2726:	e5 5b       	subi	r30, 0xB5	; 181
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	80 81       	ld	r24, Z
    272c:	91 81       	ldd	r25, Z+1	; 0x01
    272e:	8d 93       	st	X+, r24
    2730:	9c 93       	st	X, r25
    2732:	fe 01       	movw	r30, r28
    2734:	e9 5b       	subi	r30, 0xB9	; 185
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	80 81       	ld	r24, Z
    273a:	91 81       	ldd	r25, Z+1	; 0x01
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	f1 f7       	brne	.-4      	; 0x273c <Animation1+0x17e>
    2740:	fe 01       	movw	r30, r28
    2742:	e9 5b       	subi	r30, 0xB9	; 185
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	91 83       	std	Z+1, r25	; 0x01
    2748:	80 83       	st	Z, r24
	_delay_ms(500);
	H_Led_void_setOFF(RED_LED);
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	0e 94 80 12 	call	0x2500	; 0x2500 <H_Led_void_setOFF>
	H_Led_void_setOFF(BLU_LED);
    2750:	82 e0       	ldi	r24, 0x02	; 2
    2752:	0e 94 80 12 	call	0x2500	; 0x2500 <H_Led_void_setOFF>
    2756:	fe 01       	movw	r30, r28
    2758:	ed 5b       	subi	r30, 0xBD	; 189
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	aa ef       	ldi	r26, 0xFA	; 250
    2762:	b3 e4       	ldi	r27, 0x43	; 67
    2764:	80 83       	st	Z, r24
    2766:	91 83       	std	Z+1, r25	; 0x01
    2768:	a2 83       	std	Z+2, r26	; 0x02
    276a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    276c:	8e 01       	movw	r16, r28
    276e:	01 5c       	subi	r16, 0xC1	; 193
    2770:	1f 4f       	sbci	r17, 0xFF	; 255
    2772:	fe 01       	movw	r30, r28
    2774:	ed 5b       	subi	r30, 0xBD	; 189
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	60 81       	ld	r22, Z
    277a:	71 81       	ldd	r23, Z+1	; 0x01
    277c:	82 81       	ldd	r24, Z+2	; 0x02
    277e:	93 81       	ldd	r25, Z+3	; 0x03
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	48 ec       	ldi	r20, 0xC8	; 200
    2786:	53 e4       	ldi	r21, 0x43	; 67
    2788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	f8 01       	movw	r30, r16
    2792:	80 83       	st	Z, r24
    2794:	91 83       	std	Z+1, r25	; 0x01
    2796:	a2 83       	std	Z+2, r26	; 0x02
    2798:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    279a:	fe 01       	movw	r30, r28
    279c:	ff 96       	adiw	r30, 0x3f	; 63
    279e:	60 81       	ld	r22, Z
    27a0:	71 81       	ldd	r23, Z+1	; 0x01
    27a2:	82 81       	ldd	r24, Z+2	; 0x02
    27a4:	93 81       	ldd	r25, Z+3	; 0x03
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	40 e8       	ldi	r20, 0x80	; 128
    27ac:	5f e3       	ldi	r21, 0x3F	; 63
    27ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27b2:	88 23       	and	r24, r24
    27b4:	2c f4       	brge	.+10     	; 0x27c0 <Animation1+0x202>
		__ticks = 1;
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	9e af       	std	Y+62, r25	; 0x3e
    27bc:	8d af       	std	Y+61, r24	; 0x3d
    27be:	46 c0       	rjmp	.+140    	; 0x284c <Animation1+0x28e>
	else if (__tmp > 65535)
    27c0:	fe 01       	movw	r30, r28
    27c2:	ff 96       	adiw	r30, 0x3f	; 63
    27c4:	60 81       	ld	r22, Z
    27c6:	71 81       	ldd	r23, Z+1	; 0x01
    27c8:	82 81       	ldd	r24, Z+2	; 0x02
    27ca:	93 81       	ldd	r25, Z+3	; 0x03
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	3f ef       	ldi	r19, 0xFF	; 255
    27d0:	4f e7       	ldi	r20, 0x7F	; 127
    27d2:	57 e4       	ldi	r21, 0x47	; 71
    27d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27d8:	18 16       	cp	r1, r24
    27da:	64 f5       	brge	.+88     	; 0x2834 <Animation1+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27dc:	fe 01       	movw	r30, r28
    27de:	ed 5b       	subi	r30, 0xBD	; 189
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	60 81       	ld	r22, Z
    27e4:	71 81       	ldd	r23, Z+1	; 0x01
    27e6:	82 81       	ldd	r24, Z+2	; 0x02
    27e8:	93 81       	ldd	r25, Z+3	; 0x03
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	40 e2       	ldi	r20, 0x20	; 32
    27f0:	51 e4       	ldi	r21, 0x41	; 65
    27f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	bc 01       	movw	r22, r24
    27fc:	cd 01       	movw	r24, r26
    27fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	9e af       	std	Y+62, r25	; 0x3e
    2808:	8d af       	std	Y+61, r24	; 0x3d
    280a:	0f c0       	rjmp	.+30     	; 0x282a <Animation1+0x26c>
    280c:	88 e2       	ldi	r24, 0x28	; 40
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	9c af       	std	Y+60, r25	; 0x3c
    2812:	8b af       	std	Y+59, r24	; 0x3b
    2814:	8b ad       	ldd	r24, Y+59	; 0x3b
    2816:	9c ad       	ldd	r25, Y+60	; 0x3c
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	f1 f7       	brne	.-4      	; 0x2818 <Animation1+0x25a>
    281c:	9c af       	std	Y+60, r25	; 0x3c
    281e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2820:	8d ad       	ldd	r24, Y+61	; 0x3d
    2822:	9e ad       	ldd	r25, Y+62	; 0x3e
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	9e af       	std	Y+62, r25	; 0x3e
    2828:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282a:	8d ad       	ldd	r24, Y+61	; 0x3d
    282c:	9e ad       	ldd	r25, Y+62	; 0x3e
    282e:	00 97       	sbiw	r24, 0x00	; 0
    2830:	69 f7       	brne	.-38     	; 0x280c <Animation1+0x24e>
    2832:	16 c0       	rjmp	.+44     	; 0x2860 <Animation1+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2834:	fe 01       	movw	r30, r28
    2836:	ff 96       	adiw	r30, 0x3f	; 63
    2838:	60 81       	ld	r22, Z
    283a:	71 81       	ldd	r23, Z+1	; 0x01
    283c:	82 81       	ldd	r24, Z+2	; 0x02
    283e:	93 81       	ldd	r25, Z+3	; 0x03
    2840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	9e af       	std	Y+62, r25	; 0x3e
    284a:	8d af       	std	Y+61, r24	; 0x3d
    284c:	8d ad       	ldd	r24, Y+61	; 0x3d
    284e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2850:	9a af       	std	Y+58, r25	; 0x3a
    2852:	89 af       	std	Y+57, r24	; 0x39
    2854:	89 ad       	ldd	r24, Y+57	; 0x39
    2856:	9a ad       	ldd	r25, Y+58	; 0x3a
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	f1 f7       	brne	.-4      	; 0x2858 <Animation1+0x29a>
    285c:	9a af       	std	Y+58, r25	; 0x3a
    285e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(500);
    H_Led_void_setON(BLU_LED);
    2860:	82 e0       	ldi	r24, 0x02	; 2
    2862:	0e 94 4f 12 	call	0x249e	; 0x249e <H_Led_void_setON>
    H_Led_void_setON(GRN_LED);
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	0e 94 4f 12 	call	0x249e	; 0x249e <H_Led_void_setON>
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	aa ef       	ldi	r26, 0xFA	; 250
    2872:	b3 e4       	ldi	r27, 0x43	; 67
    2874:	8d ab       	std	Y+53, r24	; 0x35
    2876:	9e ab       	std	Y+54, r25	; 0x36
    2878:	af ab       	std	Y+55, r26	; 0x37
    287a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287c:	6d a9       	ldd	r22, Y+53	; 0x35
    287e:	7e a9       	ldd	r23, Y+54	; 0x36
    2880:	8f a9       	ldd	r24, Y+55	; 0x37
    2882:	98 ad       	ldd	r25, Y+56	; 0x38
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	48 ec       	ldi	r20, 0xC8	; 200
    288a:	53 e4       	ldi	r21, 0x43	; 67
    288c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	89 ab       	std	Y+49, r24	; 0x31
    2896:	9a ab       	std	Y+50, r25	; 0x32
    2898:	ab ab       	std	Y+51, r26	; 0x33
    289a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    289c:	69 a9       	ldd	r22, Y+49	; 0x31
    289e:	7a a9       	ldd	r23, Y+50	; 0x32
    28a0:	8b a9       	ldd	r24, Y+51	; 0x33
    28a2:	9c a9       	ldd	r25, Y+52	; 0x34
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	40 e8       	ldi	r20, 0x80	; 128
    28aa:	5f e3       	ldi	r21, 0x3F	; 63
    28ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28b0:	88 23       	and	r24, r24
    28b2:	2c f4       	brge	.+10     	; 0x28be <Animation1+0x300>
		__ticks = 1;
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	98 ab       	std	Y+48, r25	; 0x30
    28ba:	8f a7       	std	Y+47, r24	; 0x2f
    28bc:	3f c0       	rjmp	.+126    	; 0x293c <Animation1+0x37e>
	else if (__tmp > 65535)
    28be:	69 a9       	ldd	r22, Y+49	; 0x31
    28c0:	7a a9       	ldd	r23, Y+50	; 0x32
    28c2:	8b a9       	ldd	r24, Y+51	; 0x33
    28c4:	9c a9       	ldd	r25, Y+52	; 0x34
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	3f ef       	ldi	r19, 0xFF	; 255
    28ca:	4f e7       	ldi	r20, 0x7F	; 127
    28cc:	57 e4       	ldi	r21, 0x47	; 71
    28ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28d2:	18 16       	cp	r1, r24
    28d4:	4c f5       	brge	.+82     	; 0x2928 <Animation1+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d6:	6d a9       	ldd	r22, Y+53	; 0x35
    28d8:	7e a9       	ldd	r23, Y+54	; 0x36
    28da:	8f a9       	ldd	r24, Y+55	; 0x37
    28dc:	98 ad       	ldd	r25, Y+56	; 0x38
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	40 e2       	ldi	r20, 0x20	; 32
    28e4:	51 e4       	ldi	r21, 0x41	; 65
    28e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	bc 01       	movw	r22, r24
    28f0:	cd 01       	movw	r24, r26
    28f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	98 ab       	std	Y+48, r25	; 0x30
    28fc:	8f a7       	std	Y+47, r24	; 0x2f
    28fe:	0f c0       	rjmp	.+30     	; 0x291e <Animation1+0x360>
    2900:	88 e2       	ldi	r24, 0x28	; 40
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	9e a7       	std	Y+46, r25	; 0x2e
    2906:	8d a7       	std	Y+45, r24	; 0x2d
    2908:	8d a5       	ldd	r24, Y+45	; 0x2d
    290a:	9e a5       	ldd	r25, Y+46	; 0x2e
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	f1 f7       	brne	.-4      	; 0x290c <Animation1+0x34e>
    2910:	9e a7       	std	Y+46, r25	; 0x2e
    2912:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2914:	8f a5       	ldd	r24, Y+47	; 0x2f
    2916:	98 a9       	ldd	r25, Y+48	; 0x30
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	98 ab       	std	Y+48, r25	; 0x30
    291c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    291e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2920:	98 a9       	ldd	r25, Y+48	; 0x30
    2922:	00 97       	sbiw	r24, 0x00	; 0
    2924:	69 f7       	brne	.-38     	; 0x2900 <Animation1+0x342>
    2926:	14 c0       	rjmp	.+40     	; 0x2950 <Animation1+0x392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2928:	69 a9       	ldd	r22, Y+49	; 0x31
    292a:	7a a9       	ldd	r23, Y+50	; 0x32
    292c:	8b a9       	ldd	r24, Y+51	; 0x33
    292e:	9c a9       	ldd	r25, Y+52	; 0x34
    2930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	98 ab       	std	Y+48, r25	; 0x30
    293a:	8f a7       	std	Y+47, r24	; 0x2f
    293c:	8f a5       	ldd	r24, Y+47	; 0x2f
    293e:	98 a9       	ldd	r25, Y+48	; 0x30
    2940:	9c a7       	std	Y+44, r25	; 0x2c
    2942:	8b a7       	std	Y+43, r24	; 0x2b
    2944:	8b a5       	ldd	r24, Y+43	; 0x2b
    2946:	9c a5       	ldd	r25, Y+44	; 0x2c
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	f1 f7       	brne	.-4      	; 0x2948 <Animation1+0x38a>
    294c:	9c a7       	std	Y+44, r25	; 0x2c
    294e:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(500);
    H_Led_void_setOFF(BLU_LED);
    2950:	82 e0       	ldi	r24, 0x02	; 2
    2952:	0e 94 80 12 	call	0x2500	; 0x2500 <H_Led_void_setOFF>
    H_Led_void_setOFF(GRN_LED);
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	0e 94 80 12 	call	0x2500	; 0x2500 <H_Led_void_setOFF>
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	aa ef       	ldi	r26, 0xFA	; 250
    2962:	b3 e4       	ldi	r27, 0x43	; 67
    2964:	8f a3       	std	Y+39, r24	; 0x27
    2966:	98 a7       	std	Y+40, r25	; 0x28
    2968:	a9 a7       	std	Y+41, r26	; 0x29
    296a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    296c:	6f a1       	ldd	r22, Y+39	; 0x27
    296e:	78 a5       	ldd	r23, Y+40	; 0x28
    2970:	89 a5       	ldd	r24, Y+41	; 0x29
    2972:	9a a5       	ldd	r25, Y+42	; 0x2a
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	48 ec       	ldi	r20, 0xC8	; 200
    297a:	53 e4       	ldi	r21, 0x43	; 67
    297c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	8b a3       	std	Y+35, r24	; 0x23
    2986:	9c a3       	std	Y+36, r25	; 0x24
    2988:	ad a3       	std	Y+37, r26	; 0x25
    298a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    298c:	6b a1       	ldd	r22, Y+35	; 0x23
    298e:	7c a1       	ldd	r23, Y+36	; 0x24
    2990:	8d a1       	ldd	r24, Y+37	; 0x25
    2992:	9e a1       	ldd	r25, Y+38	; 0x26
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	40 e8       	ldi	r20, 0x80	; 128
    299a:	5f e3       	ldi	r21, 0x3F	; 63
    299c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29a0:	88 23       	and	r24, r24
    29a2:	2c f4       	brge	.+10     	; 0x29ae <Animation1+0x3f0>
		__ticks = 1;
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	9a a3       	std	Y+34, r25	; 0x22
    29aa:	89 a3       	std	Y+33, r24	; 0x21
    29ac:	3f c0       	rjmp	.+126    	; 0x2a2c <Animation1+0x46e>
	else if (__tmp > 65535)
    29ae:	6b a1       	ldd	r22, Y+35	; 0x23
    29b0:	7c a1       	ldd	r23, Y+36	; 0x24
    29b2:	8d a1       	ldd	r24, Y+37	; 0x25
    29b4:	9e a1       	ldd	r25, Y+38	; 0x26
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	3f ef       	ldi	r19, 0xFF	; 255
    29ba:	4f e7       	ldi	r20, 0x7F	; 127
    29bc:	57 e4       	ldi	r21, 0x47	; 71
    29be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29c2:	18 16       	cp	r1, r24
    29c4:	4c f5       	brge	.+82     	; 0x2a18 <Animation1+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c6:	6f a1       	ldd	r22, Y+39	; 0x27
    29c8:	78 a5       	ldd	r23, Y+40	; 0x28
    29ca:	89 a5       	ldd	r24, Y+41	; 0x29
    29cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	40 e2       	ldi	r20, 0x20	; 32
    29d4:	51 e4       	ldi	r21, 0x41	; 65
    29d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	bc 01       	movw	r22, r24
    29e0:	cd 01       	movw	r24, r26
    29e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	9a a3       	std	Y+34, r25	; 0x22
    29ec:	89 a3       	std	Y+33, r24	; 0x21
    29ee:	0f c0       	rjmp	.+30     	; 0x2a0e <Animation1+0x450>
    29f0:	88 e2       	ldi	r24, 0x28	; 40
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	98 a3       	std	Y+32, r25	; 0x20
    29f6:	8f 8f       	std	Y+31, r24	; 0x1f
    29f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29fa:	98 a1       	ldd	r25, Y+32	; 0x20
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	f1 f7       	brne	.-4      	; 0x29fc <Animation1+0x43e>
    2a00:	98 a3       	std	Y+32, r25	; 0x20
    2a02:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a04:	89 a1       	ldd	r24, Y+33	; 0x21
    2a06:	9a a1       	ldd	r25, Y+34	; 0x22
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	9a a3       	std	Y+34, r25	; 0x22
    2a0c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a10:	9a a1       	ldd	r25, Y+34	; 0x22
    2a12:	00 97       	sbiw	r24, 0x00	; 0
    2a14:	69 f7       	brne	.-38     	; 0x29f0 <Animation1+0x432>
    2a16:	14 c0       	rjmp	.+40     	; 0x2a40 <Animation1+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a18:	6b a1       	ldd	r22, Y+35	; 0x23
    2a1a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a1c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a1e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	9a a3       	std	Y+34, r25	; 0x22
    2a2a:	89 a3       	std	Y+33, r24	; 0x21
    2a2c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a2e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a30:	9e 8f       	std	Y+30, r25	; 0x1e
    2a32:	8d 8f       	std	Y+29, r24	; 0x1d
    2a34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a36:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	f1 f7       	brne	.-4      	; 0x2a38 <Animation1+0x47a>
    2a3c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a3e:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(500);
    H_Led_void_setON(RED_LED);
    2a40:	80 e0       	ldi	r24, 0x00	; 0
    2a42:	0e 94 4f 12 	call	0x249e	; 0x249e <H_Led_void_setON>
    H_Led_void_setON(GRN_LED);
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	0e 94 4f 12 	call	0x249e	; 0x249e <H_Led_void_setON>
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	aa ef       	ldi	r26, 0xFA	; 250
    2a52:	b3 e4       	ldi	r27, 0x43	; 67
    2a54:	89 8f       	std	Y+25, r24	; 0x19
    2a56:	9a 8f       	std	Y+26, r25	; 0x1a
    2a58:	ab 8f       	std	Y+27, r26	; 0x1b
    2a5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	48 ec       	ldi	r20, 0xC8	; 200
    2a6a:	53 e4       	ldi	r21, 0x43	; 67
    2a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	8d 8b       	std	Y+21, r24	; 0x15
    2a76:	9e 8b       	std	Y+22, r25	; 0x16
    2a78:	af 8b       	std	Y+23, r26	; 0x17
    2a7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a7c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a7e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a80:	8f 89       	ldd	r24, Y+23	; 0x17
    2a82:	98 8d       	ldd	r25, Y+24	; 0x18
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	40 e8       	ldi	r20, 0x80	; 128
    2a8a:	5f e3       	ldi	r21, 0x3F	; 63
    2a8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a90:	88 23       	and	r24, r24
    2a92:	2c f4       	brge	.+10     	; 0x2a9e <Animation1+0x4e0>
		__ticks = 1;
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	9c 8b       	std	Y+20, r25	; 0x14
    2a9a:	8b 8b       	std	Y+19, r24	; 0x13
    2a9c:	3f c0       	rjmp	.+126    	; 0x2b1c <Animation1+0x55e>
	else if (__tmp > 65535)
    2a9e:	6d 89       	ldd	r22, Y+21	; 0x15
    2aa0:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa2:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa4:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	3f ef       	ldi	r19, 0xFF	; 255
    2aaa:	4f e7       	ldi	r20, 0x7F	; 127
    2aac:	57 e4       	ldi	r21, 0x47	; 71
    2aae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ab2:	18 16       	cp	r1, r24
    2ab4:	4c f5       	brge	.+82     	; 0x2b08 <Animation1+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ab8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2abc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	40 e2       	ldi	r20, 0x20	; 32
    2ac4:	51 e4       	ldi	r21, 0x41	; 65
    2ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aca:	dc 01       	movw	r26, r24
    2acc:	cb 01       	movw	r24, r22
    2ace:	bc 01       	movw	r22, r24
    2ad0:	cd 01       	movw	r24, r26
    2ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	9c 8b       	std	Y+20, r25	; 0x14
    2adc:	8b 8b       	std	Y+19, r24	; 0x13
    2ade:	0f c0       	rjmp	.+30     	; 0x2afe <Animation1+0x540>
    2ae0:	88 e2       	ldi	r24, 0x28	; 40
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	9a 8b       	std	Y+18, r25	; 0x12
    2ae6:	89 8b       	std	Y+17, r24	; 0x11
    2ae8:	89 89       	ldd	r24, Y+17	; 0x11
    2aea:	9a 89       	ldd	r25, Y+18	; 0x12
    2aec:	01 97       	sbiw	r24, 0x01	; 1
    2aee:	f1 f7       	brne	.-4      	; 0x2aec <Animation1+0x52e>
    2af0:	9a 8b       	std	Y+18, r25	; 0x12
    2af2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af4:	8b 89       	ldd	r24, Y+19	; 0x13
    2af6:	9c 89       	ldd	r25, Y+20	; 0x14
    2af8:	01 97       	sbiw	r24, 0x01	; 1
    2afa:	9c 8b       	std	Y+20, r25	; 0x14
    2afc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afe:	8b 89       	ldd	r24, Y+19	; 0x13
    2b00:	9c 89       	ldd	r25, Y+20	; 0x14
    2b02:	00 97       	sbiw	r24, 0x00	; 0
    2b04:	69 f7       	brne	.-38     	; 0x2ae0 <Animation1+0x522>
    2b06:	14 c0       	rjmp	.+40     	; 0x2b30 <Animation1+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b08:	6d 89       	ldd	r22, Y+21	; 0x15
    2b0a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	9c 8b       	std	Y+20, r25	; 0x14
    2b1a:	8b 8b       	std	Y+19, r24	; 0x13
    2b1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b20:	98 8b       	std	Y+16, r25	; 0x10
    2b22:	8f 87       	std	Y+15, r24	; 0x0f
    2b24:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b26:	98 89       	ldd	r25, Y+16	; 0x10
    2b28:	01 97       	sbiw	r24, 0x01	; 1
    2b2a:	f1 f7       	brne	.-4      	; 0x2b28 <Animation1+0x56a>
    2b2c:	98 8b       	std	Y+16, r25	; 0x10
    2b2e:	8f 87       	std	Y+15, r24	; 0x0f
     _delay_ms(500);
     H_Led_void_setOFF(RED_LED);
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	0e 94 80 12 	call	0x2500	; 0x2500 <H_Led_void_setOFF>
     H_Led_void_setOFF(GRN_LED);
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	0e 94 80 12 	call	0x2500	; 0x2500 <H_Led_void_setOFF>
    2b3c:	80 e0       	ldi	r24, 0x00	; 0
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	aa ef       	ldi	r26, 0xFA	; 250
    2b42:	b3 e4       	ldi	r27, 0x43	; 67
    2b44:	8b 87       	std	Y+11, r24	; 0x0b
    2b46:	9c 87       	std	Y+12, r25	; 0x0c
    2b48:	ad 87       	std	Y+13, r26	; 0x0d
    2b4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b50:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b52:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	48 ec       	ldi	r20, 0xC8	; 200
    2b5a:	53 e4       	ldi	r21, 0x43	; 67
    2b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	8f 83       	std	Y+7, r24	; 0x07
    2b66:	98 87       	std	Y+8, r25	; 0x08
    2b68:	a9 87       	std	Y+9, r26	; 0x09
    2b6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b6c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b6e:	78 85       	ldd	r23, Y+8	; 0x08
    2b70:	89 85       	ldd	r24, Y+9	; 0x09
    2b72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	40 e8       	ldi	r20, 0x80	; 128
    2b7a:	5f e3       	ldi	r21, 0x3F	; 63
    2b7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b80:	88 23       	and	r24, r24
    2b82:	2c f4       	brge	.+10     	; 0x2b8e <Animation1+0x5d0>
		__ticks = 1;
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	9e 83       	std	Y+6, r25	; 0x06
    2b8a:	8d 83       	std	Y+5, r24	; 0x05
    2b8c:	3f c0       	rjmp	.+126    	; 0x2c0c <Animation1+0x64e>
	else if (__tmp > 65535)
    2b8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b90:	78 85       	ldd	r23, Y+8	; 0x08
    2b92:	89 85       	ldd	r24, Y+9	; 0x09
    2b94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b96:	20 e0       	ldi	r18, 0x00	; 0
    2b98:	3f ef       	ldi	r19, 0xFF	; 255
    2b9a:	4f e7       	ldi	r20, 0x7F	; 127
    2b9c:	57 e4       	ldi	r21, 0x47	; 71
    2b9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ba2:	18 16       	cp	r1, r24
    2ba4:	4c f5       	brge	.+82     	; 0x2bf8 <Animation1+0x63a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2baa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bac:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	40 e2       	ldi	r20, 0x20	; 32
    2bb4:	51 e4       	ldi	r21, 0x41	; 65
    2bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	bc 01       	movw	r22, r24
    2bc0:	cd 01       	movw	r24, r26
    2bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	9e 83       	std	Y+6, r25	; 0x06
    2bcc:	8d 83       	std	Y+5, r24	; 0x05
    2bce:	0f c0       	rjmp	.+30     	; 0x2bee <Animation1+0x630>
    2bd0:	88 e2       	ldi	r24, 0x28	; 40
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	9c 83       	std	Y+4, r25	; 0x04
    2bd6:	8b 83       	std	Y+3, r24	; 0x03
    2bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bda:	9c 81       	ldd	r25, Y+4	; 0x04
    2bdc:	01 97       	sbiw	r24, 0x01	; 1
    2bde:	f1 f7       	brne	.-4      	; 0x2bdc <Animation1+0x61e>
    2be0:	9c 83       	std	Y+4, r25	; 0x04
    2be2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be4:	8d 81       	ldd	r24, Y+5	; 0x05
    2be6:	9e 81       	ldd	r25, Y+6	; 0x06
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	9e 83       	std	Y+6, r25	; 0x06
    2bec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bee:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf2:	00 97       	sbiw	r24, 0x00	; 0
    2bf4:	69 f7       	brne	.-38     	; 0x2bd0 <Animation1+0x612>
    2bf6:	14 c0       	rjmp	.+40     	; 0x2c20 <Animation1+0x662>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bfa:	78 85       	ldd	r23, Y+8	; 0x08
    2bfc:	89 85       	ldd	r24, Y+9	; 0x09
    2bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	9e 83       	std	Y+6, r25	; 0x06
    2c0a:	8d 83       	std	Y+5, r24	; 0x05
    2c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c10:	9a 83       	std	Y+2, r25	; 0x02
    2c12:	89 83       	std	Y+1, r24	; 0x01
    2c14:	89 81       	ldd	r24, Y+1	; 0x01
    2c16:	9a 81       	ldd	r25, Y+2	; 0x02
    2c18:	01 97       	sbiw	r24, 0x01	; 1
    2c1a:	f1 f7       	brne	.-4      	; 0x2c18 <Animation1+0x65a>
    2c1c:	9a 83       	std	Y+2, r25	; 0x02
    2c1e:	89 83       	std	Y+1, r24	; 0x01
     _delay_ms(500);

}
    2c20:	cc 5a       	subi	r28, 0xAC	; 172
    2c22:	df 4f       	sbci	r29, 0xFF	; 255
    2c24:	0f b6       	in	r0, 0x3f	; 63
    2c26:	f8 94       	cli
    2c28:	de bf       	out	0x3e, r29	; 62
    2c2a:	0f be       	out	0x3f, r0	; 63
    2c2c:	cd bf       	out	0x3d, r28	; 61
    2c2e:	cf 91       	pop	r28
    2c30:	df 91       	pop	r29
    2c32:	1f 91       	pop	r17
    2c34:	0f 91       	pop	r16
    2c36:	08 95       	ret

00002c38 <Animation2>:
void Animation2()
{
    2c38:	0f 93       	push	r16
    2c3a:	1f 93       	push	r17
    2c3c:	df 93       	push	r29
    2c3e:	cf 93       	push	r28
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
    2c44:	c4 55       	subi	r28, 0x54	; 84
    2c46:	d0 40       	sbci	r29, 0x00	; 0
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	f8 94       	cli
    2c4c:	de bf       	out	0x3e, r29	; 62
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	cd bf       	out	0x3d, r28	; 61
	H_Led_void_setON(RED_LED);
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	0e 94 4f 12 	call	0x249e	; 0x249e <H_Led_void_setON>
    2c58:	fe 01       	movw	r30, r28
    2c5a:	ef 5a       	subi	r30, 0xAF	; 175
    2c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	aa ef       	ldi	r26, 0xFA	; 250
    2c64:	b3 e4       	ldi	r27, 0x43	; 67
    2c66:	80 83       	st	Z, r24
    2c68:	91 83       	std	Z+1, r25	; 0x01
    2c6a:	a2 83       	std	Z+2, r26	; 0x02
    2c6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c6e:	8e 01       	movw	r16, r28
    2c70:	03 5b       	subi	r16, 0xB3	; 179
    2c72:	1f 4f       	sbci	r17, 0xFF	; 255
    2c74:	fe 01       	movw	r30, r28
    2c76:	ef 5a       	subi	r30, 0xAF	; 175
    2c78:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7a:	60 81       	ld	r22, Z
    2c7c:	71 81       	ldd	r23, Z+1	; 0x01
    2c7e:	82 81       	ldd	r24, Z+2	; 0x02
    2c80:	93 81       	ldd	r25, Z+3	; 0x03
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	48 ec       	ldi	r20, 0xC8	; 200
    2c88:	53 e4       	ldi	r21, 0x43	; 67
    2c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	f8 01       	movw	r30, r16
    2c94:	80 83       	st	Z, r24
    2c96:	91 83       	std	Z+1, r25	; 0x01
    2c98:	a2 83       	std	Z+2, r26	; 0x02
    2c9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	e3 5b       	subi	r30, 0xB3	; 179
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	60 81       	ld	r22, Z
    2ca4:	71 81       	ldd	r23, Z+1	; 0x01
    2ca6:	82 81       	ldd	r24, Z+2	; 0x02
    2ca8:	93 81       	ldd	r25, Z+3	; 0x03
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	40 e8       	ldi	r20, 0x80	; 128
    2cb0:	5f e3       	ldi	r21, 0x3F	; 63
    2cb2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cb6:	88 23       	and	r24, r24
    2cb8:	44 f4       	brge	.+16     	; 0x2cca <Animation2+0x92>
		__ticks = 1;
    2cba:	fe 01       	movw	r30, r28
    2cbc:	e5 5b       	subi	r30, 0xB5	; 181
    2cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	91 83       	std	Z+1, r25	; 0x01
    2cc6:	80 83       	st	Z, r24
    2cc8:	64 c0       	rjmp	.+200    	; 0x2d92 <Animation2+0x15a>
	else if (__tmp > 65535)
    2cca:	fe 01       	movw	r30, r28
    2ccc:	e3 5b       	subi	r30, 0xB3	; 179
    2cce:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd0:	60 81       	ld	r22, Z
    2cd2:	71 81       	ldd	r23, Z+1	; 0x01
    2cd4:	82 81       	ldd	r24, Z+2	; 0x02
    2cd6:	93 81       	ldd	r25, Z+3	; 0x03
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	3f ef       	ldi	r19, 0xFF	; 255
    2cdc:	4f e7       	ldi	r20, 0x7F	; 127
    2cde:	57 e4       	ldi	r21, 0x47	; 71
    2ce0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ce4:	18 16       	cp	r1, r24
    2ce6:	0c f0       	brlt	.+2      	; 0x2cea <Animation2+0xb2>
    2ce8:	43 c0       	rjmp	.+134    	; 0x2d70 <Animation2+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cea:	fe 01       	movw	r30, r28
    2cec:	ef 5a       	subi	r30, 0xAF	; 175
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	60 81       	ld	r22, Z
    2cf2:	71 81       	ldd	r23, Z+1	; 0x01
    2cf4:	82 81       	ldd	r24, Z+2	; 0x02
    2cf6:	93 81       	ldd	r25, Z+3	; 0x03
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	40 e2       	ldi	r20, 0x20	; 32
    2cfe:	51 e4       	ldi	r21, 0x41	; 65
    2d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	8e 01       	movw	r16, r28
    2d0a:	05 5b       	subi	r16, 0xB5	; 181
    2d0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d0e:	bc 01       	movw	r22, r24
    2d10:	cd 01       	movw	r24, r26
    2d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	f8 01       	movw	r30, r16
    2d1c:	91 83       	std	Z+1, r25	; 0x01
    2d1e:	80 83       	st	Z, r24
    2d20:	1f c0       	rjmp	.+62     	; 0x2d60 <Animation2+0x128>
    2d22:	fe 01       	movw	r30, r28
    2d24:	e7 5b       	subi	r30, 0xB7	; 183
    2d26:	ff 4f       	sbci	r31, 0xFF	; 255
    2d28:	88 e2       	ldi	r24, 0x28	; 40
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	91 83       	std	Z+1, r25	; 0x01
    2d2e:	80 83       	st	Z, r24
    2d30:	fe 01       	movw	r30, r28
    2d32:	e7 5b       	subi	r30, 0xB7	; 183
    2d34:	ff 4f       	sbci	r31, 0xFF	; 255
    2d36:	80 81       	ld	r24, Z
    2d38:	91 81       	ldd	r25, Z+1	; 0x01
    2d3a:	01 97       	sbiw	r24, 0x01	; 1
    2d3c:	f1 f7       	brne	.-4      	; 0x2d3a <Animation2+0x102>
    2d3e:	fe 01       	movw	r30, r28
    2d40:	e7 5b       	subi	r30, 0xB7	; 183
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	91 83       	std	Z+1, r25	; 0x01
    2d46:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d48:	de 01       	movw	r26, r28
    2d4a:	a5 5b       	subi	r26, 0xB5	; 181
    2d4c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d4e:	fe 01       	movw	r30, r28
    2d50:	e5 5b       	subi	r30, 0xB5	; 181
    2d52:	ff 4f       	sbci	r31, 0xFF	; 255
    2d54:	80 81       	ld	r24, Z
    2d56:	91 81       	ldd	r25, Z+1	; 0x01
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	11 96       	adiw	r26, 0x01	; 1
    2d5c:	9c 93       	st	X, r25
    2d5e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d60:	fe 01       	movw	r30, r28
    2d62:	e5 5b       	subi	r30, 0xB5	; 181
    2d64:	ff 4f       	sbci	r31, 0xFF	; 255
    2d66:	80 81       	ld	r24, Z
    2d68:	91 81       	ldd	r25, Z+1	; 0x01
    2d6a:	00 97       	sbiw	r24, 0x00	; 0
    2d6c:	d1 f6       	brne	.-76     	; 0x2d22 <Animation2+0xea>
    2d6e:	27 c0       	rjmp	.+78     	; 0x2dbe <Animation2+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d70:	8e 01       	movw	r16, r28
    2d72:	05 5b       	subi	r16, 0xB5	; 181
    2d74:	1f 4f       	sbci	r17, 0xFF	; 255
    2d76:	fe 01       	movw	r30, r28
    2d78:	e3 5b       	subi	r30, 0xB3	; 179
    2d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7c:	60 81       	ld	r22, Z
    2d7e:	71 81       	ldd	r23, Z+1	; 0x01
    2d80:	82 81       	ldd	r24, Z+2	; 0x02
    2d82:	93 81       	ldd	r25, Z+3	; 0x03
    2d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	f8 01       	movw	r30, r16
    2d8e:	91 83       	std	Z+1, r25	; 0x01
    2d90:	80 83       	st	Z, r24
    2d92:	de 01       	movw	r26, r28
    2d94:	a9 5b       	subi	r26, 0xB9	; 185
    2d96:	bf 4f       	sbci	r27, 0xFF	; 255
    2d98:	fe 01       	movw	r30, r28
    2d9a:	e5 5b       	subi	r30, 0xB5	; 181
    2d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9e:	80 81       	ld	r24, Z
    2da0:	91 81       	ldd	r25, Z+1	; 0x01
    2da2:	8d 93       	st	X+, r24
    2da4:	9c 93       	st	X, r25
    2da6:	fe 01       	movw	r30, r28
    2da8:	e9 5b       	subi	r30, 0xB9	; 185
    2daa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dac:	80 81       	ld	r24, Z
    2dae:	91 81       	ldd	r25, Z+1	; 0x01
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	f1 f7       	brne	.-4      	; 0x2db0 <Animation2+0x178>
    2db4:	fe 01       	movw	r30, r28
    2db6:	e9 5b       	subi	r30, 0xB9	; 185
    2db8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dba:	91 83       	std	Z+1, r25	; 0x01
    2dbc:	80 83       	st	Z, r24
	_delay_ms(500);
	H_Led_void_setOFF(RED_LED);
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	0e 94 80 12 	call	0x2500	; 0x2500 <H_Led_void_setOFF>
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	ed 5b       	subi	r30, 0xBD	; 189
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	80 e0       	ldi	r24, 0x00	; 0
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	aa ef       	ldi	r26, 0xFA	; 250
    2dd0:	b3 e4       	ldi	r27, 0x43	; 67
    2dd2:	80 83       	st	Z, r24
    2dd4:	91 83       	std	Z+1, r25	; 0x01
    2dd6:	a2 83       	std	Z+2, r26	; 0x02
    2dd8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dda:	8e 01       	movw	r16, r28
    2ddc:	01 5c       	subi	r16, 0xC1	; 193
    2dde:	1f 4f       	sbci	r17, 0xFF	; 255
    2de0:	fe 01       	movw	r30, r28
    2de2:	ed 5b       	subi	r30, 0xBD	; 189
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	60 81       	ld	r22, Z
    2de8:	71 81       	ldd	r23, Z+1	; 0x01
    2dea:	82 81       	ldd	r24, Z+2	; 0x02
    2dec:	93 81       	ldd	r25, Z+3	; 0x03
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	48 ec       	ldi	r20, 0xC8	; 200
    2df4:	53 e4       	ldi	r21, 0x43	; 67
    2df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	f8 01       	movw	r30, r16
    2e00:	80 83       	st	Z, r24
    2e02:	91 83       	std	Z+1, r25	; 0x01
    2e04:	a2 83       	std	Z+2, r26	; 0x02
    2e06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e08:	fe 01       	movw	r30, r28
    2e0a:	ff 96       	adiw	r30, 0x3f	; 63
    2e0c:	60 81       	ld	r22, Z
    2e0e:	71 81       	ldd	r23, Z+1	; 0x01
    2e10:	82 81       	ldd	r24, Z+2	; 0x02
    2e12:	93 81       	ldd	r25, Z+3	; 0x03
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	40 e8       	ldi	r20, 0x80	; 128
    2e1a:	5f e3       	ldi	r21, 0x3F	; 63
    2e1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e20:	88 23       	and	r24, r24
    2e22:	2c f4       	brge	.+10     	; 0x2e2e <Animation2+0x1f6>
		__ticks = 1;
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	9e af       	std	Y+62, r25	; 0x3e
    2e2a:	8d af       	std	Y+61, r24	; 0x3d
    2e2c:	46 c0       	rjmp	.+140    	; 0x2eba <Animation2+0x282>
	else if (__tmp > 65535)
    2e2e:	fe 01       	movw	r30, r28
    2e30:	ff 96       	adiw	r30, 0x3f	; 63
    2e32:	60 81       	ld	r22, Z
    2e34:	71 81       	ldd	r23, Z+1	; 0x01
    2e36:	82 81       	ldd	r24, Z+2	; 0x02
    2e38:	93 81       	ldd	r25, Z+3	; 0x03
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	3f ef       	ldi	r19, 0xFF	; 255
    2e3e:	4f e7       	ldi	r20, 0x7F	; 127
    2e40:	57 e4       	ldi	r21, 0x47	; 71
    2e42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e46:	18 16       	cp	r1, r24
    2e48:	64 f5       	brge	.+88     	; 0x2ea2 <Animation2+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	ed 5b       	subi	r30, 0xBD	; 189
    2e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e50:	60 81       	ld	r22, Z
    2e52:	71 81       	ldd	r23, Z+1	; 0x01
    2e54:	82 81       	ldd	r24, Z+2	; 0x02
    2e56:	93 81       	ldd	r25, Z+3	; 0x03
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	40 e2       	ldi	r20, 0x20	; 32
    2e5e:	51 e4       	ldi	r21, 0x41	; 65
    2e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	bc 01       	movw	r22, r24
    2e6a:	cd 01       	movw	r24, r26
    2e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	9e af       	std	Y+62, r25	; 0x3e
    2e76:	8d af       	std	Y+61, r24	; 0x3d
    2e78:	0f c0       	rjmp	.+30     	; 0x2e98 <Animation2+0x260>
    2e7a:	88 e2       	ldi	r24, 0x28	; 40
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	9c af       	std	Y+60, r25	; 0x3c
    2e80:	8b af       	std	Y+59, r24	; 0x3b
    2e82:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e84:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e86:	01 97       	sbiw	r24, 0x01	; 1
    2e88:	f1 f7       	brne	.-4      	; 0x2e86 <Animation2+0x24e>
    2e8a:	9c af       	std	Y+60, r25	; 0x3c
    2e8c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e8e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e90:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	9e af       	std	Y+62, r25	; 0x3e
    2e96:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e98:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e9c:	00 97       	sbiw	r24, 0x00	; 0
    2e9e:	69 f7       	brne	.-38     	; 0x2e7a <Animation2+0x242>
    2ea0:	16 c0       	rjmp	.+44     	; 0x2ece <Animation2+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	ff 96       	adiw	r30, 0x3f	; 63
    2ea6:	60 81       	ld	r22, Z
    2ea8:	71 81       	ldd	r23, Z+1	; 0x01
    2eaa:	82 81       	ldd	r24, Z+2	; 0x02
    2eac:	93 81       	ldd	r25, Z+3	; 0x03
    2eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	9e af       	std	Y+62, r25	; 0x3e
    2eb8:	8d af       	std	Y+61, r24	; 0x3d
    2eba:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ebc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ebe:	9a af       	std	Y+58, r25	; 0x3a
    2ec0:	89 af       	std	Y+57, r24	; 0x39
    2ec2:	89 ad       	ldd	r24, Y+57	; 0x39
    2ec4:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ec6:	01 97       	sbiw	r24, 0x01	; 1
    2ec8:	f1 f7       	brne	.-4      	; 0x2ec6 <Animation2+0x28e>
    2eca:	9a af       	std	Y+58, r25	; 0x3a
    2ecc:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(500);
    H_Led_void_setON(BLU_LED);
    2ece:	82 e0       	ldi	r24, 0x02	; 2
    2ed0:	0e 94 4f 12 	call	0x249e	; 0x249e <H_Led_void_setON>
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	aa ef       	ldi	r26, 0xFA	; 250
    2eda:	b3 e4       	ldi	r27, 0x43	; 67
    2edc:	8d ab       	std	Y+53, r24	; 0x35
    2ede:	9e ab       	std	Y+54, r25	; 0x36
    2ee0:	af ab       	std	Y+55, r26	; 0x37
    2ee2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee4:	6d a9       	ldd	r22, Y+53	; 0x35
    2ee6:	7e a9       	ldd	r23, Y+54	; 0x36
    2ee8:	8f a9       	ldd	r24, Y+55	; 0x37
    2eea:	98 ad       	ldd	r25, Y+56	; 0x38
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	48 ec       	ldi	r20, 0xC8	; 200
    2ef2:	53 e4       	ldi	r21, 0x43	; 67
    2ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	89 ab       	std	Y+49, r24	; 0x31
    2efe:	9a ab       	std	Y+50, r25	; 0x32
    2f00:	ab ab       	std	Y+51, r26	; 0x33
    2f02:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f04:	69 a9       	ldd	r22, Y+49	; 0x31
    2f06:	7a a9       	ldd	r23, Y+50	; 0x32
    2f08:	8b a9       	ldd	r24, Y+51	; 0x33
    2f0a:	9c a9       	ldd	r25, Y+52	; 0x34
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	40 e8       	ldi	r20, 0x80	; 128
    2f12:	5f e3       	ldi	r21, 0x3F	; 63
    2f14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f18:	88 23       	and	r24, r24
    2f1a:	2c f4       	brge	.+10     	; 0x2f26 <Animation2+0x2ee>
		__ticks = 1;
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	98 ab       	std	Y+48, r25	; 0x30
    2f22:	8f a7       	std	Y+47, r24	; 0x2f
    2f24:	3f c0       	rjmp	.+126    	; 0x2fa4 <Animation2+0x36c>
	else if (__tmp > 65535)
    2f26:	69 a9       	ldd	r22, Y+49	; 0x31
    2f28:	7a a9       	ldd	r23, Y+50	; 0x32
    2f2a:	8b a9       	ldd	r24, Y+51	; 0x33
    2f2c:	9c a9       	ldd	r25, Y+52	; 0x34
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	3f ef       	ldi	r19, 0xFF	; 255
    2f32:	4f e7       	ldi	r20, 0x7F	; 127
    2f34:	57 e4       	ldi	r21, 0x47	; 71
    2f36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f3a:	18 16       	cp	r1, r24
    2f3c:	4c f5       	brge	.+82     	; 0x2f90 <Animation2+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f3e:	6d a9       	ldd	r22, Y+53	; 0x35
    2f40:	7e a9       	ldd	r23, Y+54	; 0x36
    2f42:	8f a9       	ldd	r24, Y+55	; 0x37
    2f44:	98 ad       	ldd	r25, Y+56	; 0x38
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	40 e2       	ldi	r20, 0x20	; 32
    2f4c:	51 e4       	ldi	r21, 0x41	; 65
    2f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	bc 01       	movw	r22, r24
    2f58:	cd 01       	movw	r24, r26
    2f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5e:	dc 01       	movw	r26, r24
    2f60:	cb 01       	movw	r24, r22
    2f62:	98 ab       	std	Y+48, r25	; 0x30
    2f64:	8f a7       	std	Y+47, r24	; 0x2f
    2f66:	0f c0       	rjmp	.+30     	; 0x2f86 <Animation2+0x34e>
    2f68:	88 e2       	ldi	r24, 0x28	; 40
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	9e a7       	std	Y+46, r25	; 0x2e
    2f6e:	8d a7       	std	Y+45, r24	; 0x2d
    2f70:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f72:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f74:	01 97       	sbiw	r24, 0x01	; 1
    2f76:	f1 f7       	brne	.-4      	; 0x2f74 <Animation2+0x33c>
    2f78:	9e a7       	std	Y+46, r25	; 0x2e
    2f7a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f7e:	98 a9       	ldd	r25, Y+48	; 0x30
    2f80:	01 97       	sbiw	r24, 0x01	; 1
    2f82:	98 ab       	std	Y+48, r25	; 0x30
    2f84:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f86:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f88:	98 a9       	ldd	r25, Y+48	; 0x30
    2f8a:	00 97       	sbiw	r24, 0x00	; 0
    2f8c:	69 f7       	brne	.-38     	; 0x2f68 <Animation2+0x330>
    2f8e:	14 c0       	rjmp	.+40     	; 0x2fb8 <Animation2+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f90:	69 a9       	ldd	r22, Y+49	; 0x31
    2f92:	7a a9       	ldd	r23, Y+50	; 0x32
    2f94:	8b a9       	ldd	r24, Y+51	; 0x33
    2f96:	9c a9       	ldd	r25, Y+52	; 0x34
    2f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	98 ab       	std	Y+48, r25	; 0x30
    2fa2:	8f a7       	std	Y+47, r24	; 0x2f
    2fa4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fa6:	98 a9       	ldd	r25, Y+48	; 0x30
    2fa8:	9c a7       	std	Y+44, r25	; 0x2c
    2faa:	8b a7       	std	Y+43, r24	; 0x2b
    2fac:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fae:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	f1 f7       	brne	.-4      	; 0x2fb0 <Animation2+0x378>
    2fb4:	9c a7       	std	Y+44, r25	; 0x2c
    2fb6:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(500);
    H_Led_void_setOFF(BLU_LED);
    2fb8:	82 e0       	ldi	r24, 0x02	; 2
    2fba:	0e 94 80 12 	call	0x2500	; 0x2500 <H_Led_void_setOFF>
    2fbe:	80 e0       	ldi	r24, 0x00	; 0
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	aa ef       	ldi	r26, 0xFA	; 250
    2fc4:	b3 e4       	ldi	r27, 0x43	; 67
    2fc6:	8f a3       	std	Y+39, r24	; 0x27
    2fc8:	98 a7       	std	Y+40, r25	; 0x28
    2fca:	a9 a7       	std	Y+41, r26	; 0x29
    2fcc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fce:	6f a1       	ldd	r22, Y+39	; 0x27
    2fd0:	78 a5       	ldd	r23, Y+40	; 0x28
    2fd2:	89 a5       	ldd	r24, Y+41	; 0x29
    2fd4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	48 ec       	ldi	r20, 0xC8	; 200
    2fdc:	53 e4       	ldi	r21, 0x43	; 67
    2fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	8b a3       	std	Y+35, r24	; 0x23
    2fe8:	9c a3       	std	Y+36, r25	; 0x24
    2fea:	ad a3       	std	Y+37, r26	; 0x25
    2fec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2fee:	6b a1       	ldd	r22, Y+35	; 0x23
    2ff0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ff2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ff4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	40 e8       	ldi	r20, 0x80	; 128
    2ffc:	5f e3       	ldi	r21, 0x3F	; 63
    2ffe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3002:	88 23       	and	r24, r24
    3004:	2c f4       	brge	.+10     	; 0x3010 <Animation2+0x3d8>
		__ticks = 1;
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	9a a3       	std	Y+34, r25	; 0x22
    300c:	89 a3       	std	Y+33, r24	; 0x21
    300e:	3f c0       	rjmp	.+126    	; 0x308e <Animation2+0x456>
	else if (__tmp > 65535)
    3010:	6b a1       	ldd	r22, Y+35	; 0x23
    3012:	7c a1       	ldd	r23, Y+36	; 0x24
    3014:	8d a1       	ldd	r24, Y+37	; 0x25
    3016:	9e a1       	ldd	r25, Y+38	; 0x26
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	3f ef       	ldi	r19, 0xFF	; 255
    301c:	4f e7       	ldi	r20, 0x7F	; 127
    301e:	57 e4       	ldi	r21, 0x47	; 71
    3020:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3024:	18 16       	cp	r1, r24
    3026:	4c f5       	brge	.+82     	; 0x307a <Animation2+0x442>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3028:	6f a1       	ldd	r22, Y+39	; 0x27
    302a:	78 a5       	ldd	r23, Y+40	; 0x28
    302c:	89 a5       	ldd	r24, Y+41	; 0x29
    302e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	40 e2       	ldi	r20, 0x20	; 32
    3036:	51 e4       	ldi	r21, 0x41	; 65
    3038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	bc 01       	movw	r22, r24
    3042:	cd 01       	movw	r24, r26
    3044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	9a a3       	std	Y+34, r25	; 0x22
    304e:	89 a3       	std	Y+33, r24	; 0x21
    3050:	0f c0       	rjmp	.+30     	; 0x3070 <Animation2+0x438>
    3052:	88 e2       	ldi	r24, 0x28	; 40
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	98 a3       	std	Y+32, r25	; 0x20
    3058:	8f 8f       	std	Y+31, r24	; 0x1f
    305a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    305c:	98 a1       	ldd	r25, Y+32	; 0x20
    305e:	01 97       	sbiw	r24, 0x01	; 1
    3060:	f1 f7       	brne	.-4      	; 0x305e <Animation2+0x426>
    3062:	98 a3       	std	Y+32, r25	; 0x20
    3064:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3066:	89 a1       	ldd	r24, Y+33	; 0x21
    3068:	9a a1       	ldd	r25, Y+34	; 0x22
    306a:	01 97       	sbiw	r24, 0x01	; 1
    306c:	9a a3       	std	Y+34, r25	; 0x22
    306e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3070:	89 a1       	ldd	r24, Y+33	; 0x21
    3072:	9a a1       	ldd	r25, Y+34	; 0x22
    3074:	00 97       	sbiw	r24, 0x00	; 0
    3076:	69 f7       	brne	.-38     	; 0x3052 <Animation2+0x41a>
    3078:	14 c0       	rjmp	.+40     	; 0x30a2 <Animation2+0x46a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    307a:	6b a1       	ldd	r22, Y+35	; 0x23
    307c:	7c a1       	ldd	r23, Y+36	; 0x24
    307e:	8d a1       	ldd	r24, Y+37	; 0x25
    3080:	9e a1       	ldd	r25, Y+38	; 0x26
    3082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	9a a3       	std	Y+34, r25	; 0x22
    308c:	89 a3       	std	Y+33, r24	; 0x21
    308e:	89 a1       	ldd	r24, Y+33	; 0x21
    3090:	9a a1       	ldd	r25, Y+34	; 0x22
    3092:	9e 8f       	std	Y+30, r25	; 0x1e
    3094:	8d 8f       	std	Y+29, r24	; 0x1d
    3096:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3098:	9e 8d       	ldd	r25, Y+30	; 0x1e
    309a:	01 97       	sbiw	r24, 0x01	; 1
    309c:	f1 f7       	brne	.-4      	; 0x309a <Animation2+0x462>
    309e:	9e 8f       	std	Y+30, r25	; 0x1e
    30a0:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(500);
    H_Led_void_setON(GRN_LED);
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	0e 94 4f 12 	call	0x249e	; 0x249e <H_Led_void_setON>
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	aa ef       	ldi	r26, 0xFA	; 250
    30ae:	b3 e4       	ldi	r27, 0x43	; 67
    30b0:	89 8f       	std	Y+25, r24	; 0x19
    30b2:	9a 8f       	std	Y+26, r25	; 0x1a
    30b4:	ab 8f       	std	Y+27, r26	; 0x1b
    30b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30b8:	69 8d       	ldd	r22, Y+25	; 0x19
    30ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	48 ec       	ldi	r20, 0xC8	; 200
    30c6:	53 e4       	ldi	r21, 0x43	; 67
    30c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30cc:	dc 01       	movw	r26, r24
    30ce:	cb 01       	movw	r24, r22
    30d0:	8d 8b       	std	Y+21, r24	; 0x15
    30d2:	9e 8b       	std	Y+22, r25	; 0x16
    30d4:	af 8b       	std	Y+23, r26	; 0x17
    30d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30d8:	6d 89       	ldd	r22, Y+21	; 0x15
    30da:	7e 89       	ldd	r23, Y+22	; 0x16
    30dc:	8f 89       	ldd	r24, Y+23	; 0x17
    30de:	98 8d       	ldd	r25, Y+24	; 0x18
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	40 e8       	ldi	r20, 0x80	; 128
    30e6:	5f e3       	ldi	r21, 0x3F	; 63
    30e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30ec:	88 23       	and	r24, r24
    30ee:	2c f4       	brge	.+10     	; 0x30fa <Animation2+0x4c2>
		__ticks = 1;
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	9c 8b       	std	Y+20, r25	; 0x14
    30f6:	8b 8b       	std	Y+19, r24	; 0x13
    30f8:	3f c0       	rjmp	.+126    	; 0x3178 <Animation2+0x540>
	else if (__tmp > 65535)
    30fa:	6d 89       	ldd	r22, Y+21	; 0x15
    30fc:	7e 89       	ldd	r23, Y+22	; 0x16
    30fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3100:	98 8d       	ldd	r25, Y+24	; 0x18
    3102:	20 e0       	ldi	r18, 0x00	; 0
    3104:	3f ef       	ldi	r19, 0xFF	; 255
    3106:	4f e7       	ldi	r20, 0x7F	; 127
    3108:	57 e4       	ldi	r21, 0x47	; 71
    310a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    310e:	18 16       	cp	r1, r24
    3110:	4c f5       	brge	.+82     	; 0x3164 <Animation2+0x52c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3112:	69 8d       	ldd	r22, Y+25	; 0x19
    3114:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3116:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3118:	9c 8d       	ldd	r25, Y+28	; 0x1c
    311a:	20 e0       	ldi	r18, 0x00	; 0
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	40 e2       	ldi	r20, 0x20	; 32
    3120:	51 e4       	ldi	r21, 0x41	; 65
    3122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	bc 01       	movw	r22, r24
    312c:	cd 01       	movw	r24, r26
    312e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	9c 8b       	std	Y+20, r25	; 0x14
    3138:	8b 8b       	std	Y+19, r24	; 0x13
    313a:	0f c0       	rjmp	.+30     	; 0x315a <Animation2+0x522>
    313c:	88 e2       	ldi	r24, 0x28	; 40
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	9a 8b       	std	Y+18, r25	; 0x12
    3142:	89 8b       	std	Y+17, r24	; 0x11
    3144:	89 89       	ldd	r24, Y+17	; 0x11
    3146:	9a 89       	ldd	r25, Y+18	; 0x12
    3148:	01 97       	sbiw	r24, 0x01	; 1
    314a:	f1 f7       	brne	.-4      	; 0x3148 <Animation2+0x510>
    314c:	9a 8b       	std	Y+18, r25	; 0x12
    314e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3150:	8b 89       	ldd	r24, Y+19	; 0x13
    3152:	9c 89       	ldd	r25, Y+20	; 0x14
    3154:	01 97       	sbiw	r24, 0x01	; 1
    3156:	9c 8b       	std	Y+20, r25	; 0x14
    3158:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    315a:	8b 89       	ldd	r24, Y+19	; 0x13
    315c:	9c 89       	ldd	r25, Y+20	; 0x14
    315e:	00 97       	sbiw	r24, 0x00	; 0
    3160:	69 f7       	brne	.-38     	; 0x313c <Animation2+0x504>
    3162:	14 c0       	rjmp	.+40     	; 0x318c <Animation2+0x554>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3164:	6d 89       	ldd	r22, Y+21	; 0x15
    3166:	7e 89       	ldd	r23, Y+22	; 0x16
    3168:	8f 89       	ldd	r24, Y+23	; 0x17
    316a:	98 8d       	ldd	r25, Y+24	; 0x18
    316c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	9c 8b       	std	Y+20, r25	; 0x14
    3176:	8b 8b       	std	Y+19, r24	; 0x13
    3178:	8b 89       	ldd	r24, Y+19	; 0x13
    317a:	9c 89       	ldd	r25, Y+20	; 0x14
    317c:	98 8b       	std	Y+16, r25	; 0x10
    317e:	8f 87       	std	Y+15, r24	; 0x0f
    3180:	8f 85       	ldd	r24, Y+15	; 0x0f
    3182:	98 89       	ldd	r25, Y+16	; 0x10
    3184:	01 97       	sbiw	r24, 0x01	; 1
    3186:	f1 f7       	brne	.-4      	; 0x3184 <Animation2+0x54c>
    3188:	98 8b       	std	Y+16, r25	; 0x10
    318a:	8f 87       	std	Y+15, r24	; 0x0f
     _delay_ms(500);
    H_Led_void_setOFF(GRN_LED);
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	0e 94 80 12 	call	0x2500	; 0x2500 <H_Led_void_setOFF>
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	aa ef       	ldi	r26, 0xFA	; 250
    3198:	b3 e4       	ldi	r27, 0x43	; 67
    319a:	8b 87       	std	Y+11, r24	; 0x0b
    319c:	9c 87       	std	Y+12, r25	; 0x0c
    319e:	ad 87       	std	Y+13, r26	; 0x0d
    31a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    31a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    31a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	48 ec       	ldi	r20, 0xC8	; 200
    31b0:	53 e4       	ldi	r21, 0x43	; 67
    31b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	8f 83       	std	Y+7, r24	; 0x07
    31bc:	98 87       	std	Y+8, r25	; 0x08
    31be:	a9 87       	std	Y+9, r26	; 0x09
    31c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31c2:	6f 81       	ldd	r22, Y+7	; 0x07
    31c4:	78 85       	ldd	r23, Y+8	; 0x08
    31c6:	89 85       	ldd	r24, Y+9	; 0x09
    31c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	40 e8       	ldi	r20, 0x80	; 128
    31d0:	5f e3       	ldi	r21, 0x3F	; 63
    31d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31d6:	88 23       	and	r24, r24
    31d8:	2c f4       	brge	.+10     	; 0x31e4 <Animation2+0x5ac>
		__ticks = 1;
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	9e 83       	std	Y+6, r25	; 0x06
    31e0:	8d 83       	std	Y+5, r24	; 0x05
    31e2:	3f c0       	rjmp	.+126    	; 0x3262 <Animation2+0x62a>
	else if (__tmp > 65535)
    31e4:	6f 81       	ldd	r22, Y+7	; 0x07
    31e6:	78 85       	ldd	r23, Y+8	; 0x08
    31e8:	89 85       	ldd	r24, Y+9	; 0x09
    31ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ec:	20 e0       	ldi	r18, 0x00	; 0
    31ee:	3f ef       	ldi	r19, 0xFF	; 255
    31f0:	4f e7       	ldi	r20, 0x7F	; 127
    31f2:	57 e4       	ldi	r21, 0x47	; 71
    31f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31f8:	18 16       	cp	r1, r24
    31fa:	4c f5       	brge	.+82     	; 0x324e <Animation2+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    31fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3200:	8d 85       	ldd	r24, Y+13	; 0x0d
    3202:	9e 85       	ldd	r25, Y+14	; 0x0e
    3204:	20 e0       	ldi	r18, 0x00	; 0
    3206:	30 e0       	ldi	r19, 0x00	; 0
    3208:	40 e2       	ldi	r20, 0x20	; 32
    320a:	51 e4       	ldi	r21, 0x41	; 65
    320c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3210:	dc 01       	movw	r26, r24
    3212:	cb 01       	movw	r24, r22
    3214:	bc 01       	movw	r22, r24
    3216:	cd 01       	movw	r24, r26
    3218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321c:	dc 01       	movw	r26, r24
    321e:	cb 01       	movw	r24, r22
    3220:	9e 83       	std	Y+6, r25	; 0x06
    3222:	8d 83       	std	Y+5, r24	; 0x05
    3224:	0f c0       	rjmp	.+30     	; 0x3244 <Animation2+0x60c>
    3226:	88 e2       	ldi	r24, 0x28	; 40
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	9c 83       	std	Y+4, r25	; 0x04
    322c:	8b 83       	std	Y+3, r24	; 0x03
    322e:	8b 81       	ldd	r24, Y+3	; 0x03
    3230:	9c 81       	ldd	r25, Y+4	; 0x04
    3232:	01 97       	sbiw	r24, 0x01	; 1
    3234:	f1 f7       	brne	.-4      	; 0x3232 <Animation2+0x5fa>
    3236:	9c 83       	std	Y+4, r25	; 0x04
    3238:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    323a:	8d 81       	ldd	r24, Y+5	; 0x05
    323c:	9e 81       	ldd	r25, Y+6	; 0x06
    323e:	01 97       	sbiw	r24, 0x01	; 1
    3240:	9e 83       	std	Y+6, r25	; 0x06
    3242:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3244:	8d 81       	ldd	r24, Y+5	; 0x05
    3246:	9e 81       	ldd	r25, Y+6	; 0x06
    3248:	00 97       	sbiw	r24, 0x00	; 0
    324a:	69 f7       	brne	.-38     	; 0x3226 <Animation2+0x5ee>
    324c:	14 c0       	rjmp	.+40     	; 0x3276 <Animation2+0x63e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    324e:	6f 81       	ldd	r22, Y+7	; 0x07
    3250:	78 85       	ldd	r23, Y+8	; 0x08
    3252:	89 85       	ldd	r24, Y+9	; 0x09
    3254:	9a 85       	ldd	r25, Y+10	; 0x0a
    3256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	9e 83       	std	Y+6, r25	; 0x06
    3260:	8d 83       	std	Y+5, r24	; 0x05
    3262:	8d 81       	ldd	r24, Y+5	; 0x05
    3264:	9e 81       	ldd	r25, Y+6	; 0x06
    3266:	9a 83       	std	Y+2, r25	; 0x02
    3268:	89 83       	std	Y+1, r24	; 0x01
    326a:	89 81       	ldd	r24, Y+1	; 0x01
    326c:	9a 81       	ldd	r25, Y+2	; 0x02
    326e:	01 97       	sbiw	r24, 0x01	; 1
    3270:	f1 f7       	brne	.-4      	; 0x326e <Animation2+0x636>
    3272:	9a 83       	std	Y+2, r25	; 0x02
    3274:	89 83       	std	Y+1, r24	; 0x01
     _delay_ms(500);

}
    3276:	cc 5a       	subi	r28, 0xAC	; 172
    3278:	df 4f       	sbci	r29, 0xFF	; 255
    327a:	0f b6       	in	r0, 0x3f	; 63
    327c:	f8 94       	cli
    327e:	de bf       	out	0x3e, r29	; 62
    3280:	0f be       	out	0x3f, r0	; 63
    3282:	cd bf       	out	0x3d, r28	; 61
    3284:	cf 91       	pop	r28
    3286:	df 91       	pop	r29
    3288:	1f 91       	pop	r17
    328a:	0f 91       	pop	r16
    328c:	08 95       	ret

0000328e <Animation3>:
void Animation3()
{
    328e:	df 93       	push	r29
    3290:	cf 93       	push	r28
    3292:	cd b7       	in	r28, 0x3d	; 61
    3294:	de b7       	in	r29, 0x3e	; 62
    3296:	6c 97       	sbiw	r28, 0x1c	; 28
    3298:	0f b6       	in	r0, 0x3f	; 63
    329a:	f8 94       	cli
    329c:	de bf       	out	0x3e, r29	; 62
    329e:	0f be       	out	0x3f, r0	; 63
    32a0:	cd bf       	out	0x3d, r28	; 61
	H_Led_void_setON(RED_LED);
    32a2:	80 e0       	ldi	r24, 0x00	; 0
    32a4:	0e 94 4f 12 	call	0x249e	; 0x249e <H_Led_void_setON>
	H_Led_void_setON(BLU_LED);
    32a8:	82 e0       	ldi	r24, 0x02	; 2
    32aa:	0e 94 4f 12 	call	0x249e	; 0x249e <H_Led_void_setON>
	H_Led_void_setON(GRN_LED);
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	0e 94 4f 12 	call	0x249e	; 0x249e <H_Led_void_setON>
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	aa ef       	ldi	r26, 0xFA	; 250
    32ba:	b3 e4       	ldi	r27, 0x43	; 67
    32bc:	89 8f       	std	Y+25, r24	; 0x19
    32be:	9a 8f       	std	Y+26, r25	; 0x1a
    32c0:	ab 8f       	std	Y+27, r26	; 0x1b
    32c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c4:	69 8d       	ldd	r22, Y+25	; 0x19
    32c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	48 ec       	ldi	r20, 0xC8	; 200
    32d2:	53 e4       	ldi	r21, 0x43	; 67
    32d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d8:	dc 01       	movw	r26, r24
    32da:	cb 01       	movw	r24, r22
    32dc:	8d 8b       	std	Y+21, r24	; 0x15
    32de:	9e 8b       	std	Y+22, r25	; 0x16
    32e0:	af 8b       	std	Y+23, r26	; 0x17
    32e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32e4:	6d 89       	ldd	r22, Y+21	; 0x15
    32e6:	7e 89       	ldd	r23, Y+22	; 0x16
    32e8:	8f 89       	ldd	r24, Y+23	; 0x17
    32ea:	98 8d       	ldd	r25, Y+24	; 0x18
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	40 e8       	ldi	r20, 0x80	; 128
    32f2:	5f e3       	ldi	r21, 0x3F	; 63
    32f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32f8:	88 23       	and	r24, r24
    32fa:	2c f4       	brge	.+10     	; 0x3306 <Animation3+0x78>
		__ticks = 1;
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	9c 8b       	std	Y+20, r25	; 0x14
    3302:	8b 8b       	std	Y+19, r24	; 0x13
    3304:	3f c0       	rjmp	.+126    	; 0x3384 <Animation3+0xf6>
	else if (__tmp > 65535)
    3306:	6d 89       	ldd	r22, Y+21	; 0x15
    3308:	7e 89       	ldd	r23, Y+22	; 0x16
    330a:	8f 89       	ldd	r24, Y+23	; 0x17
    330c:	98 8d       	ldd	r25, Y+24	; 0x18
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	3f ef       	ldi	r19, 0xFF	; 255
    3312:	4f e7       	ldi	r20, 0x7F	; 127
    3314:	57 e4       	ldi	r21, 0x47	; 71
    3316:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    331a:	18 16       	cp	r1, r24
    331c:	4c f5       	brge	.+82     	; 0x3370 <Animation3+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    331e:	69 8d       	ldd	r22, Y+25	; 0x19
    3320:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3322:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3324:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	40 e2       	ldi	r20, 0x20	; 32
    332c:	51 e4       	ldi	r21, 0x41	; 65
    332e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	bc 01       	movw	r22, r24
    3338:	cd 01       	movw	r24, r26
    333a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	9c 8b       	std	Y+20, r25	; 0x14
    3344:	8b 8b       	std	Y+19, r24	; 0x13
    3346:	0f c0       	rjmp	.+30     	; 0x3366 <Animation3+0xd8>
    3348:	88 e2       	ldi	r24, 0x28	; 40
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	9a 8b       	std	Y+18, r25	; 0x12
    334e:	89 8b       	std	Y+17, r24	; 0x11
    3350:	89 89       	ldd	r24, Y+17	; 0x11
    3352:	9a 89       	ldd	r25, Y+18	; 0x12
    3354:	01 97       	sbiw	r24, 0x01	; 1
    3356:	f1 f7       	brne	.-4      	; 0x3354 <Animation3+0xc6>
    3358:	9a 8b       	std	Y+18, r25	; 0x12
    335a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    335c:	8b 89       	ldd	r24, Y+19	; 0x13
    335e:	9c 89       	ldd	r25, Y+20	; 0x14
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	9c 8b       	std	Y+20, r25	; 0x14
    3364:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3366:	8b 89       	ldd	r24, Y+19	; 0x13
    3368:	9c 89       	ldd	r25, Y+20	; 0x14
    336a:	00 97       	sbiw	r24, 0x00	; 0
    336c:	69 f7       	brne	.-38     	; 0x3348 <Animation3+0xba>
    336e:	14 c0       	rjmp	.+40     	; 0x3398 <Animation3+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3370:	6d 89       	ldd	r22, Y+21	; 0x15
    3372:	7e 89       	ldd	r23, Y+22	; 0x16
    3374:	8f 89       	ldd	r24, Y+23	; 0x17
    3376:	98 8d       	ldd	r25, Y+24	; 0x18
    3378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	9c 8b       	std	Y+20, r25	; 0x14
    3382:	8b 8b       	std	Y+19, r24	; 0x13
    3384:	8b 89       	ldd	r24, Y+19	; 0x13
    3386:	9c 89       	ldd	r25, Y+20	; 0x14
    3388:	98 8b       	std	Y+16, r25	; 0x10
    338a:	8f 87       	std	Y+15, r24	; 0x0f
    338c:	8f 85       	ldd	r24, Y+15	; 0x0f
    338e:	98 89       	ldd	r25, Y+16	; 0x10
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	f1 f7       	brne	.-4      	; 0x3390 <Animation3+0x102>
    3394:	98 8b       	std	Y+16, r25	; 0x10
    3396:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	H_Led_void_setOFF(RED_LED);
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	0e 94 80 12 	call	0x2500	; 0x2500 <H_Led_void_setOFF>
	H_Led_void_setOFF(BLU_LED);
    339e:	82 e0       	ldi	r24, 0x02	; 2
    33a0:	0e 94 80 12 	call	0x2500	; 0x2500 <H_Led_void_setOFF>
	H_Led_void_setOFF(GRN_LED);
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	0e 94 80 12 	call	0x2500	; 0x2500 <H_Led_void_setOFF>
    33aa:	80 e0       	ldi	r24, 0x00	; 0
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	aa ef       	ldi	r26, 0xFA	; 250
    33b0:	b3 e4       	ldi	r27, 0x43	; 67
    33b2:	8b 87       	std	Y+11, r24	; 0x0b
    33b4:	9c 87       	std	Y+12, r25	; 0x0c
    33b6:	ad 87       	std	Y+13, r26	; 0x0d
    33b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    33bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    33be:	8d 85       	ldd	r24, Y+13	; 0x0d
    33c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	48 ec       	ldi	r20, 0xC8	; 200
    33c8:	53 e4       	ldi	r21, 0x43	; 67
    33ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ce:	dc 01       	movw	r26, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	8f 83       	std	Y+7, r24	; 0x07
    33d4:	98 87       	std	Y+8, r25	; 0x08
    33d6:	a9 87       	std	Y+9, r26	; 0x09
    33d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33da:	6f 81       	ldd	r22, Y+7	; 0x07
    33dc:	78 85       	ldd	r23, Y+8	; 0x08
    33de:	89 85       	ldd	r24, Y+9	; 0x09
    33e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e2:	20 e0       	ldi	r18, 0x00	; 0
    33e4:	30 e0       	ldi	r19, 0x00	; 0
    33e6:	40 e8       	ldi	r20, 0x80	; 128
    33e8:	5f e3       	ldi	r21, 0x3F	; 63
    33ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33ee:	88 23       	and	r24, r24
    33f0:	2c f4       	brge	.+10     	; 0x33fc <Animation3+0x16e>
		__ticks = 1;
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	9e 83       	std	Y+6, r25	; 0x06
    33f8:	8d 83       	std	Y+5, r24	; 0x05
    33fa:	3f c0       	rjmp	.+126    	; 0x347a <Animation3+0x1ec>
	else if (__tmp > 65535)
    33fc:	6f 81       	ldd	r22, Y+7	; 0x07
    33fe:	78 85       	ldd	r23, Y+8	; 0x08
    3400:	89 85       	ldd	r24, Y+9	; 0x09
    3402:	9a 85       	ldd	r25, Y+10	; 0x0a
    3404:	20 e0       	ldi	r18, 0x00	; 0
    3406:	3f ef       	ldi	r19, 0xFF	; 255
    3408:	4f e7       	ldi	r20, 0x7F	; 127
    340a:	57 e4       	ldi	r21, 0x47	; 71
    340c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3410:	18 16       	cp	r1, r24
    3412:	4c f5       	brge	.+82     	; 0x3466 <Animation3+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3414:	6b 85       	ldd	r22, Y+11	; 0x0b
    3416:	7c 85       	ldd	r23, Y+12	; 0x0c
    3418:	8d 85       	ldd	r24, Y+13	; 0x0d
    341a:	9e 85       	ldd	r25, Y+14	; 0x0e
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	40 e2       	ldi	r20, 0x20	; 32
    3422:	51 e4       	ldi	r21, 0x41	; 65
    3424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3428:	dc 01       	movw	r26, r24
    342a:	cb 01       	movw	r24, r22
    342c:	bc 01       	movw	r22, r24
    342e:	cd 01       	movw	r24, r26
    3430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3434:	dc 01       	movw	r26, r24
    3436:	cb 01       	movw	r24, r22
    3438:	9e 83       	std	Y+6, r25	; 0x06
    343a:	8d 83       	std	Y+5, r24	; 0x05
    343c:	0f c0       	rjmp	.+30     	; 0x345c <Animation3+0x1ce>
    343e:	88 e2       	ldi	r24, 0x28	; 40
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	9c 83       	std	Y+4, r25	; 0x04
    3444:	8b 83       	std	Y+3, r24	; 0x03
    3446:	8b 81       	ldd	r24, Y+3	; 0x03
    3448:	9c 81       	ldd	r25, Y+4	; 0x04
    344a:	01 97       	sbiw	r24, 0x01	; 1
    344c:	f1 f7       	brne	.-4      	; 0x344a <Animation3+0x1bc>
    344e:	9c 83       	std	Y+4, r25	; 0x04
    3450:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3452:	8d 81       	ldd	r24, Y+5	; 0x05
    3454:	9e 81       	ldd	r25, Y+6	; 0x06
    3456:	01 97       	sbiw	r24, 0x01	; 1
    3458:	9e 83       	std	Y+6, r25	; 0x06
    345a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    345c:	8d 81       	ldd	r24, Y+5	; 0x05
    345e:	9e 81       	ldd	r25, Y+6	; 0x06
    3460:	00 97       	sbiw	r24, 0x00	; 0
    3462:	69 f7       	brne	.-38     	; 0x343e <Animation3+0x1b0>
    3464:	14 c0       	rjmp	.+40     	; 0x348e <Animation3+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3466:	6f 81       	ldd	r22, Y+7	; 0x07
    3468:	78 85       	ldd	r23, Y+8	; 0x08
    346a:	89 85       	ldd	r24, Y+9	; 0x09
    346c:	9a 85       	ldd	r25, Y+10	; 0x0a
    346e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3472:	dc 01       	movw	r26, r24
    3474:	cb 01       	movw	r24, r22
    3476:	9e 83       	std	Y+6, r25	; 0x06
    3478:	8d 83       	std	Y+5, r24	; 0x05
    347a:	8d 81       	ldd	r24, Y+5	; 0x05
    347c:	9e 81       	ldd	r25, Y+6	; 0x06
    347e:	9a 83       	std	Y+2, r25	; 0x02
    3480:	89 83       	std	Y+1, r24	; 0x01
    3482:	89 81       	ldd	r24, Y+1	; 0x01
    3484:	9a 81       	ldd	r25, Y+2	; 0x02
    3486:	01 97       	sbiw	r24, 0x01	; 1
    3488:	f1 f7       	brne	.-4      	; 0x3486 <Animation3+0x1f8>
    348a:	9a 83       	std	Y+2, r25	; 0x02
    348c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

}
    348e:	6c 96       	adiw	r28, 0x1c	; 28
    3490:	0f b6       	in	r0, 0x3f	; 63
    3492:	f8 94       	cli
    3494:	de bf       	out	0x3e, r29	; 62
    3496:	0f be       	out	0x3f, r0	; 63
    3498:	cd bf       	out	0x3d, r28	; 61
    349a:	cf 91       	pop	r28
    349c:	df 91       	pop	r29
    349e:	08 95       	ret

000034a0 <H_LCD_void_Init>:
#include "LCD_int.h"
#include<util/delay.h>


void H_LCD_void_Init(void)
{
    34a0:	df 93       	push	r29
    34a2:	cf 93       	push	r28
    34a4:	cd b7       	in	r28, 0x3d	; 61
    34a6:	de b7       	in	r29, 0x3e	; 62
    34a8:	2e 97       	sbiw	r28, 0x0e	; 14
    34aa:	0f b6       	in	r0, 0x3f	; 63
    34ac:	f8 94       	cli
    34ae:	de bf       	out	0x3e, r29	; 62
    34b0:	0f be       	out	0x3f, r0	; 63
    34b2:	cd bf       	out	0x3d, r28	; 61
	//set direction
	//set direction RS,EN
	M_DIO_void_setPinDir(LCD_RS_PORT,LCD_RS_PIN, OUT);
    34b4:	80 e0       	ldi	r24, 0x00	; 0
    34b6:	61 e0       	ldi	r22, 0x01	; 1
    34b8:	41 e0       	ldi	r20, 0x01	; 1
    34ba:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_EN_PORT,LCD_EN_PORT, OUT);
    34be:	80 e0       	ldi	r24, 0x00	; 0
    34c0:	60 e0       	ldi	r22, 0x00	; 0
    34c2:	41 e0       	ldi	r20, 0x01	; 1
    34c4:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
	//set direction D4....D7
	M_DIO_void_setPinDir(LCD_D7_PORT,LCD_D7_PIN,OUT);
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	67 e0       	ldi	r22, 0x07	; 7
    34cc:	41 e0       	ldi	r20, 0x01	; 1
    34ce:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D6_PORT,LCD_D6_PIN,OUT);
    34d2:	80 e0       	ldi	r24, 0x00	; 0
    34d4:	66 e0       	ldi	r22, 0x06	; 6
    34d6:	41 e0       	ldi	r20, 0x01	; 1
    34d8:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D5_PORT,LCD_D5_PIN,OUT);
    34dc:	80 e0       	ldi	r24, 0x00	; 0
    34de:	65 e0       	ldi	r22, 0x05	; 5
    34e0:	41 e0       	ldi	r20, 0x01	; 1
    34e2:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D4_PORT,LCD_D4_PIN,OUT);
    34e6:	80 e0       	ldi	r24, 0x00	; 0
    34e8:	64 e0       	ldi	r22, 0x04	; 4
    34ea:	41 e0       	ldi	r20, 0x01	; 1
    34ec:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
#if (LCD_MODE== LCD_8BIT_MODE)
	//set direction D3....D0
	M_DIO_void_setPinDir(LCD_D3_PORT,LCD_D3_PIN,OUT);
    34f0:	80 e0       	ldi	r24, 0x00	; 0
    34f2:	63 e0       	ldi	r22, 0x03	; 3
    34f4:	41 e0       	ldi	r20, 0x01	; 1
    34f6:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D2_PORT,LCD_D2_PIN,OUT);
    34fa:	80 e0       	ldi	r24, 0x00	; 0
    34fc:	62 e0       	ldi	r22, 0x02	; 2
    34fe:	41 e0       	ldi	r20, 0x01	; 1
    3500:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D1_PORT,LCD_D1_PIN,OUT);
    3504:	80 e0       	ldi	r24, 0x00	; 0
    3506:	61 e0       	ldi	r22, 0x01	; 1
    3508:	41 e0       	ldi	r20, 0x01	; 1
    350a:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D0_PORT,LCD_D0_PIN,OUT);
    350e:	80 e0       	ldi	r24, 0x00	; 0
    3510:	60 e0       	ldi	r22, 0x00	; 0
    3512:	41 e0       	ldi	r20, 0x01	; 1
    3514:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
    3518:	80 e0       	ldi	r24, 0x00	; 0
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	ac e0       	ldi	r26, 0x0C	; 12
    351e:	b2 e4       	ldi	r27, 0x42	; 66
    3520:	8b 87       	std	Y+11, r24	; 0x0b
    3522:	9c 87       	std	Y+12, r25	; 0x0c
    3524:	ad 87       	std	Y+13, r26	; 0x0d
    3526:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3528:	6b 85       	ldd	r22, Y+11	; 0x0b
    352a:	7c 85       	ldd	r23, Y+12	; 0x0c
    352c:	8d 85       	ldd	r24, Y+13	; 0x0d
    352e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	48 ec       	ldi	r20, 0xC8	; 200
    3536:	53 e4       	ldi	r21, 0x43	; 67
    3538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	8f 83       	std	Y+7, r24	; 0x07
    3542:	98 87       	std	Y+8, r25	; 0x08
    3544:	a9 87       	std	Y+9, r26	; 0x09
    3546:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3548:	6f 81       	ldd	r22, Y+7	; 0x07
    354a:	78 85       	ldd	r23, Y+8	; 0x08
    354c:	89 85       	ldd	r24, Y+9	; 0x09
    354e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3550:	20 e0       	ldi	r18, 0x00	; 0
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	40 e8       	ldi	r20, 0x80	; 128
    3556:	5f e3       	ldi	r21, 0x3F	; 63
    3558:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    355c:	88 23       	and	r24, r24
    355e:	2c f4       	brge	.+10     	; 0x356a <H_LCD_void_Init+0xca>
		__ticks = 1;
    3560:	81 e0       	ldi	r24, 0x01	; 1
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	9e 83       	std	Y+6, r25	; 0x06
    3566:	8d 83       	std	Y+5, r24	; 0x05
    3568:	3f c0       	rjmp	.+126    	; 0x35e8 <H_LCD_void_Init+0x148>
	else if (__tmp > 65535)
    356a:	6f 81       	ldd	r22, Y+7	; 0x07
    356c:	78 85       	ldd	r23, Y+8	; 0x08
    356e:	89 85       	ldd	r24, Y+9	; 0x09
    3570:	9a 85       	ldd	r25, Y+10	; 0x0a
    3572:	20 e0       	ldi	r18, 0x00	; 0
    3574:	3f ef       	ldi	r19, 0xFF	; 255
    3576:	4f e7       	ldi	r20, 0x7F	; 127
    3578:	57 e4       	ldi	r21, 0x47	; 71
    357a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    357e:	18 16       	cp	r1, r24
    3580:	4c f5       	brge	.+82     	; 0x35d4 <H_LCD_void_Init+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3582:	6b 85       	ldd	r22, Y+11	; 0x0b
    3584:	7c 85       	ldd	r23, Y+12	; 0x0c
    3586:	8d 85       	ldd	r24, Y+13	; 0x0d
    3588:	9e 85       	ldd	r25, Y+14	; 0x0e
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	40 e2       	ldi	r20, 0x20	; 32
    3590:	51 e4       	ldi	r21, 0x41	; 65
    3592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3596:	dc 01       	movw	r26, r24
    3598:	cb 01       	movw	r24, r22
    359a:	bc 01       	movw	r22, r24
    359c:	cd 01       	movw	r24, r26
    359e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a2:	dc 01       	movw	r26, r24
    35a4:	cb 01       	movw	r24, r22
    35a6:	9e 83       	std	Y+6, r25	; 0x06
    35a8:	8d 83       	std	Y+5, r24	; 0x05
    35aa:	0f c0       	rjmp	.+30     	; 0x35ca <H_LCD_void_Init+0x12a>
    35ac:	88 e2       	ldi	r24, 0x28	; 40
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	9c 83       	std	Y+4, r25	; 0x04
    35b2:	8b 83       	std	Y+3, r24	; 0x03
    35b4:	8b 81       	ldd	r24, Y+3	; 0x03
    35b6:	9c 81       	ldd	r25, Y+4	; 0x04
    35b8:	01 97       	sbiw	r24, 0x01	; 1
    35ba:	f1 f7       	brne	.-4      	; 0x35b8 <H_LCD_void_Init+0x118>
    35bc:	9c 83       	std	Y+4, r25	; 0x04
    35be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c0:	8d 81       	ldd	r24, Y+5	; 0x05
    35c2:	9e 81       	ldd	r25, Y+6	; 0x06
    35c4:	01 97       	sbiw	r24, 0x01	; 1
    35c6:	9e 83       	std	Y+6, r25	; 0x06
    35c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ca:	8d 81       	ldd	r24, Y+5	; 0x05
    35cc:	9e 81       	ldd	r25, Y+6	; 0x06
    35ce:	00 97       	sbiw	r24, 0x00	; 0
    35d0:	69 f7       	brne	.-38     	; 0x35ac <H_LCD_void_Init+0x10c>
    35d2:	14 c0       	rjmp	.+40     	; 0x35fc <H_LCD_void_Init+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d4:	6f 81       	ldd	r22, Y+7	; 0x07
    35d6:	78 85       	ldd	r23, Y+8	; 0x08
    35d8:	89 85       	ldd	r24, Y+9	; 0x09
    35da:	9a 85       	ldd	r25, Y+10	; 0x0a
    35dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	9e 83       	std	Y+6, r25	; 0x06
    35e6:	8d 83       	std	Y+5, r24	; 0x05
    35e8:	8d 81       	ldd	r24, Y+5	; 0x05
    35ea:	9e 81       	ldd	r25, Y+6	; 0x06
    35ec:	9a 83       	std	Y+2, r25	; 0x02
    35ee:	89 83       	std	Y+1, r24	; 0x01
    35f0:	89 81       	ldd	r24, Y+1	; 0x01
    35f2:	9a 81       	ldd	r25, Y+2	; 0x02
    35f4:	01 97       	sbiw	r24, 0x01	; 1
    35f6:	f1 f7       	brne	.-4      	; 0x35f4 <H_LCD_void_Init+0x154>
    35f8:	9a 83       	std	Y+2, r25	; 0x02
    35fa:	89 83       	std	Y+1, r24	; 0x01

#endif
	//send init sequence
#if(LCD_MODE== LCD_8BIT_MODE)
	_delay_ms(35);
	H_LCD_void_sendCommand(LCD_8BIT_MODE_2LINES_5X7);
    35fc:	88 e3       	ldi	r24, 0x38	; 56
    35fe:	0e 94 25 1b 	call	0x364a	; 0x364a <H_LCD_void_sendCommand>

#else
#error("wrong lcd mood")
#endif
	//display ON ,OFF
	H_LCD_void_sendCommand(LCD_DISPON_CURS0N_BLINKOFF);
    3602:	8e e0       	ldi	r24, 0x0E	; 14
    3604:	0e 94 25 1b 	call	0x364a	; 0x364a <H_LCD_void_sendCommand>
	//display clear
	H_LCD_void_sendCommand(LCD_CLEAR_DISPLAY);
    3608:	81 e0       	ldi	r24, 0x01	; 1
    360a:	0e 94 25 1b 	call	0x364a	; 0x364a <H_LCD_void_sendCommand>
	//entry mode set
	H_LCD_void_sendCommand(LCD_ENTRY_MODE_SET);
    360e:	86 e0       	ldi	r24, 0x06	; 6
    3610:	0e 94 25 1b 	call	0x364a	; 0x364a <H_LCD_void_sendCommand>
}
    3614:	2e 96       	adiw	r28, 0x0e	; 14
    3616:	0f b6       	in	r0, 0x3f	; 63
    3618:	f8 94       	cli
    361a:	de bf       	out	0x3e, r29	; 62
    361c:	0f be       	out	0x3f, r0	; 63
    361e:	cd bf       	out	0x3d, r28	; 61
    3620:	cf 91       	pop	r28
    3622:	df 91       	pop	r29
    3624:	08 95       	ret

00003626 <H_LCD_void_sendData>:
void H_LCD_void_sendData(u8 copy_u8data)
{
    3626:	df 93       	push	r29
    3628:	cf 93       	push	r28
    362a:	0f 92       	push	r0
    362c:	cd b7       	in	r28, 0x3d	; 61
    362e:	de b7       	in	r29, 0x3e	; 62
    3630:	89 83       	std	Y+1, r24	; 0x01
	//step 1 RS=1;
	M_DIO_void_setPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    3632:	80 e0       	ldi	r24, 0x00	; 0
    3634:	61 e0       	ldi	r22, 0x01	; 1
    3636:	41 e0       	ldi	r20, 0x01	; 1
    3638:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>

	//step 2   write data
	H_LCD_void_writeNLatch( copy_u8data);
    363c:	89 81       	ldd	r24, Y+1	; 0x01
    363e:	0e 94 c5 1c 	call	0x398a	; 0x398a <H_LCD_void_writeNLatch>
}
    3642:	0f 90       	pop	r0
    3644:	cf 91       	pop	r28
    3646:	df 91       	pop	r29
    3648:	08 95       	ret

0000364a <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8command)
{
    364a:	df 93       	push	r29
    364c:	cf 93       	push	r28
    364e:	0f 92       	push	r0
    3650:	cd b7       	in	r28, 0x3d	; 61
    3652:	de b7       	in	r29, 0x3e	; 62
    3654:	89 83       	std	Y+1, r24	; 0x01
	//step 1 RS=0
	M_DIO_void_setPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	61 e0       	ldi	r22, 0x01	; 1
    365a:	40 e0       	ldi	r20, 0x00	; 0
    365c:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
	//step 2 write command
	H_LCD_void_writeNLatch( copy_u8command)	;
    3660:	89 81       	ldd	r24, Y+1	; 0x01
    3662:	0e 94 c5 1c 	call	0x398a	; 0x398a <H_LCD_void_writeNLatch>
}
    3666:	0f 90       	pop	r0
    3668:	cf 91       	pop	r28
    366a:	df 91       	pop	r29
    366c:	08 95       	ret

0000366e <H_LCD_void_sendString>:
void H_LCD_void_sendString(const u8 *pstr)
{
    366e:	df 93       	push	r29
    3670:	cf 93       	push	r28
    3672:	00 d0       	rcall	.+0      	; 0x3674 <H_LCD_void_sendString+0x6>
    3674:	cd b7       	in	r28, 0x3d	; 61
    3676:	de b7       	in	r29, 0x3e	; 62
    3678:	9a 83       	std	Y+2, r25	; 0x02
    367a:	89 83       	std	Y+1, r24	; 0x01
    367c:	0a c0       	rjmp	.+20     	; 0x3692 <H_LCD_void_sendString+0x24>
	while(*pstr)
	{
		H_LCD_void_sendData(*pstr);
    367e:	e9 81       	ldd	r30, Y+1	; 0x01
    3680:	fa 81       	ldd	r31, Y+2	; 0x02
    3682:	80 81       	ld	r24, Z
    3684:	0e 94 13 1b 	call	0x3626	; 0x3626 <H_LCD_void_sendData>
		pstr++;
    3688:	89 81       	ldd	r24, Y+1	; 0x01
    368a:	9a 81       	ldd	r25, Y+2	; 0x02
    368c:	01 96       	adiw	r24, 0x01	; 1
    368e:	9a 83       	std	Y+2, r25	; 0x02
    3690:	89 83       	std	Y+1, r24	; 0x01
	//step 2 write command
	H_LCD_void_writeNLatch( copy_u8command)	;
}
void H_LCD_void_sendString(const u8 *pstr)
{
	while(*pstr)
    3692:	e9 81       	ldd	r30, Y+1	; 0x01
    3694:	fa 81       	ldd	r31, Y+2	; 0x02
    3696:	80 81       	ld	r24, Z
    3698:	88 23       	and	r24, r24
    369a:	89 f7       	brne	.-30     	; 0x367e <H_LCD_void_sendString+0x10>
		H_LCD_void_sendData(*pstr);
		pstr++;

	}

}
    369c:	0f 90       	pop	r0
    369e:	0f 90       	pop	r0
    36a0:	cf 91       	pop	r28
    36a2:	df 91       	pop	r29
    36a4:	08 95       	ret

000036a6 <H_LCD_void_clear>:
void H_LCD_void_clear(void)
{
    36a6:	df 93       	push	r29
    36a8:	cf 93       	push	r28
    36aa:	cd b7       	in	r28, 0x3d	; 61
    36ac:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(LCD_CLEAR_DISPLAY);
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	0e 94 25 1b 	call	0x364a	; 0x364a <H_LCD_void_sendCommand>
}
    36b4:	cf 91       	pop	r28
    36b6:	df 91       	pop	r29
    36b8:	08 95       	ret

000036ba <H_LCD_void_sendIntNum>:
void H_LCD_void_sendIntNum(s32 copy_s32_Num)
{
    36ba:	0f 93       	push	r16
    36bc:	1f 93       	push	r17
    36be:	df 93       	push	r29
    36c0:	cf 93       	push	r28
    36c2:	cd b7       	in	r28, 0x3d	; 61
    36c4:	de b7       	in	r29, 0x3e	; 62
    36c6:	2f 97       	sbiw	r28, 0x0f	; 15
    36c8:	0f b6       	in	r0, 0x3f	; 63
    36ca:	f8 94       	cli
    36cc:	de bf       	out	0x3e, r29	; 62
    36ce:	0f be       	out	0x3f, r0	; 63
    36d0:	cd bf       	out	0x3d, r28	; 61
    36d2:	6c 87       	std	Y+12, r22	; 0x0c
    36d4:	7d 87       	std	Y+13, r23	; 0x0d
    36d6:	8e 87       	std	Y+14, r24	; 0x0e
    36d8:	9f 87       	std	Y+15, r25	; 0x0f
  u8 loc_Arr[10]={0};
    36da:	8a e0       	ldi	r24, 0x0A	; 10
    36dc:	fe 01       	movw	r30, r28
    36de:	32 96       	adiw	r30, 0x02	; 2
    36e0:	df 01       	movw	r26, r30
    36e2:	98 2f       	mov	r25, r24
    36e4:	1d 92       	st	X+, r1
    36e6:	9a 95       	dec	r25
    36e8:	e9 f7       	brne	.-6      	; 0x36e4 <H_LCD_void_sendIntNum+0x2a>
  s8 i;
  if(copy_s32_Num==0)
    36ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    36ec:	9d 85       	ldd	r25, Y+13	; 0x0d
    36ee:	ae 85       	ldd	r26, Y+14	; 0x0e
    36f0:	bf 85       	ldd	r27, Y+15	; 0x0f
    36f2:	00 97       	sbiw	r24, 0x00	; 0
    36f4:	a1 05       	cpc	r26, r1
    36f6:	b1 05       	cpc	r27, r1
    36f8:	21 f4       	brne	.+8      	; 0x3702 <H_LCD_void_sendIntNum+0x48>
  {
	  H_LCD_void_sendData('0');
    36fa:	80 e3       	ldi	r24, 0x30	; 48
    36fc:	0e 94 13 1b 	call	0x3626	; 0x3626 <H_LCD_void_sendData>
    3700:	49 c0       	rjmp	.+146    	; 0x3794 <H_LCD_void_sendIntNum+0xda>

  }
  else if (copy_s32_Num<0)
    3702:	8c 85       	ldd	r24, Y+12	; 0x0c
    3704:	9d 85       	ldd	r25, Y+13	; 0x0d
    3706:	ae 85       	ldd	r26, Y+14	; 0x0e
    3708:	bf 85       	ldd	r27, Y+15	; 0x0f
    370a:	bb 23       	and	r27, r27
    370c:	0c f0       	brlt	.+2      	; 0x3710 <H_LCD_void_sendIntNum+0x56>
    370e:	42 c0       	rjmp	.+132    	; 0x3794 <H_LCD_void_sendIntNum+0xda>
  {
	  H_LCD_void_sendData('-');
    3710:	8d e2       	ldi	r24, 0x2D	; 45
    3712:	0e 94 13 1b 	call	0x3626	; 0x3626 <H_LCD_void_sendData>
	  copy_s32_Num*=-1;
    3716:	8c 85       	ldd	r24, Y+12	; 0x0c
    3718:	9d 85       	ldd	r25, Y+13	; 0x0d
    371a:	ae 85       	ldd	r26, Y+14	; 0x0e
    371c:	bf 85       	ldd	r27, Y+15	; 0x0f
    371e:	b0 95       	com	r27
    3720:	a0 95       	com	r26
    3722:	90 95       	com	r25
    3724:	81 95       	neg	r24
    3726:	9f 4f       	sbci	r25, 0xFF	; 255
    3728:	af 4f       	sbci	r26, 0xFF	; 255
    372a:	bf 4f       	sbci	r27, 0xFF	; 255
    372c:	8c 87       	std	Y+12, r24	; 0x0c
    372e:	9d 87       	std	Y+13, r25	; 0x0d
    3730:	ae 87       	std	Y+14, r26	; 0x0e
    3732:	bf 87       	std	Y+15, r27	; 0x0f
    3734:	2f c0       	rjmp	.+94     	; 0x3794 <H_LCD_void_sendIntNum+0xda>
  }
  while (copy_s32_Num!=0)
  {
	  loc_Arr[i]=copy_s32_Num%10;
    3736:	89 81       	ldd	r24, Y+1	; 0x01
    3738:	08 2f       	mov	r16, r24
    373a:	11 27       	eor	r17, r17
    373c:	07 fd       	sbrc	r16, 7
    373e:	10 95       	com	r17
    3740:	8c 85       	ldd	r24, Y+12	; 0x0c
    3742:	9d 85       	ldd	r25, Y+13	; 0x0d
    3744:	ae 85       	ldd	r26, Y+14	; 0x0e
    3746:	bf 85       	ldd	r27, Y+15	; 0x0f
    3748:	2a e0       	ldi	r18, 0x0A	; 10
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	40 e0       	ldi	r20, 0x00	; 0
    374e:	50 e0       	ldi	r21, 0x00	; 0
    3750:	bc 01       	movw	r22, r24
    3752:	cd 01       	movw	r24, r26
    3754:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__divmodsi4>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	28 2f       	mov	r18, r24
    375e:	ce 01       	movw	r24, r28
    3760:	02 96       	adiw	r24, 0x02	; 2
    3762:	fc 01       	movw	r30, r24
    3764:	e0 0f       	add	r30, r16
    3766:	f1 1f       	adc	r31, r17
    3768:	20 83       	st	Z, r18
	  copy_s32_Num=copy_s32_Num/10;
    376a:	8c 85       	ldd	r24, Y+12	; 0x0c
    376c:	9d 85       	ldd	r25, Y+13	; 0x0d
    376e:	ae 85       	ldd	r26, Y+14	; 0x0e
    3770:	bf 85       	ldd	r27, Y+15	; 0x0f
    3772:	2a e0       	ldi	r18, 0x0A	; 10
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	40 e0       	ldi	r20, 0x00	; 0
    3778:	50 e0       	ldi	r21, 0x00	; 0
    377a:	bc 01       	movw	r22, r24
    377c:	cd 01       	movw	r24, r26
    377e:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__divmodsi4>
    3782:	da 01       	movw	r26, r20
    3784:	c9 01       	movw	r24, r18
    3786:	8c 87       	std	Y+12, r24	; 0x0c
    3788:	9d 87       	std	Y+13, r25	; 0x0d
    378a:	ae 87       	std	Y+14, r26	; 0x0e
    378c:	bf 87       	std	Y+15, r27	; 0x0f
	  i++;
    378e:	89 81       	ldd	r24, Y+1	; 0x01
    3790:	8f 5f       	subi	r24, 0xFF	; 255
    3792:	89 83       	std	Y+1, r24	; 0x01
  else if (copy_s32_Num<0)
  {
	  H_LCD_void_sendData('-');
	  copy_s32_Num*=-1;
  }
  while (copy_s32_Num!=0)
    3794:	8c 85       	ldd	r24, Y+12	; 0x0c
    3796:	9d 85       	ldd	r25, Y+13	; 0x0d
    3798:	ae 85       	ldd	r26, Y+14	; 0x0e
    379a:	bf 85       	ldd	r27, Y+15	; 0x0f
    379c:	00 97       	sbiw	r24, 0x00	; 0
    379e:	a1 05       	cpc	r26, r1
    37a0:	b1 05       	cpc	r27, r1
    37a2:	49 f6       	brne	.-110    	; 0x3736 <H_LCD_void_sendIntNum+0x7c>
  {
	  loc_Arr[i]=copy_s32_Num%10;
	  copy_s32_Num=copy_s32_Num/10;
	  i++;
  }
  i--;
    37a4:	89 81       	ldd	r24, Y+1	; 0x01
    37a6:	81 50       	subi	r24, 0x01	; 1
    37a8:	89 83       	std	Y+1, r24	; 0x01
    37aa:	11 c0       	rjmp	.+34     	; 0x37ce <H_LCD_void_sendIntNum+0x114>
  while(i>=0)
  {
	  H_LCD_void_sendData(loc_Arr[i]+'0');
    37ac:	89 81       	ldd	r24, Y+1	; 0x01
    37ae:	28 2f       	mov	r18, r24
    37b0:	33 27       	eor	r19, r19
    37b2:	27 fd       	sbrc	r18, 7
    37b4:	30 95       	com	r19
    37b6:	ce 01       	movw	r24, r28
    37b8:	02 96       	adiw	r24, 0x02	; 2
    37ba:	fc 01       	movw	r30, r24
    37bc:	e2 0f       	add	r30, r18
    37be:	f3 1f       	adc	r31, r19
    37c0:	80 81       	ld	r24, Z
    37c2:	80 5d       	subi	r24, 0xD0	; 208
    37c4:	0e 94 13 1b 	call	0x3626	; 0x3626 <H_LCD_void_sendData>
	  i--;
    37c8:	89 81       	ldd	r24, Y+1	; 0x01
    37ca:	81 50       	subi	r24, 0x01	; 1
    37cc:	89 83       	std	Y+1, r24	; 0x01
	  loc_Arr[i]=copy_s32_Num%10;
	  copy_s32_Num=copy_s32_Num/10;
	  i++;
  }
  i--;
  while(i>=0)
    37ce:	89 81       	ldd	r24, Y+1	; 0x01
    37d0:	88 23       	and	r24, r24
    37d2:	64 f7       	brge	.-40     	; 0x37ac <H_LCD_void_sendIntNum+0xf2>
  {
	  H_LCD_void_sendData(loc_Arr[i]+'0');
	  i--;
  }
}
    37d4:	2f 96       	adiw	r28, 0x0f	; 15
    37d6:	0f b6       	in	r0, 0x3f	; 63
    37d8:	f8 94       	cli
    37da:	de bf       	out	0x3e, r29	; 62
    37dc:	0f be       	out	0x3f, r0	; 63
    37de:	cd bf       	out	0x3d, r28	; 61
    37e0:	cf 91       	pop	r28
    37e2:	df 91       	pop	r29
    37e4:	1f 91       	pop	r17
    37e6:	0f 91       	pop	r16
    37e8:	08 95       	ret

000037ea <H_LCD_void_gotXY>:
void H_LCD_void_gotXY(u8 copy_u8Row,u8 copy_u8Col)
{
    37ea:	df 93       	push	r29
    37ec:	cf 93       	push	r28
    37ee:	00 d0       	rcall	.+0      	; 0x37f0 <H_LCD_void_gotXY+0x6>
    37f0:	00 d0       	rcall	.+0      	; 0x37f2 <H_LCD_void_gotXY+0x8>
    37f2:	cd b7       	in	r28, 0x3d	; 61
    37f4:	de b7       	in	r29, 0x3e	; 62
    37f6:	89 83       	std	Y+1, r24	; 0x01
    37f8:	6a 83       	std	Y+2, r22	; 0x02
 if (copy_u8Row==0||copy_u8Row==1)
    37fa:	89 81       	ldd	r24, Y+1	; 0x01
    37fc:	88 23       	and	r24, r24
    37fe:	19 f0       	breq	.+6      	; 0x3806 <H_LCD_void_gotXY+0x1c>
    3800:	89 81       	ldd	r24, Y+1	; 0x01
    3802:	81 30       	cpi	r24, 0x01	; 1
    3804:	d9 f4       	brne	.+54     	; 0x383c <H_LCD_void_gotXY+0x52>
 {
	 if(copy_u8Col >= 0 &&copy_u8Col <=15)
    3806:	8a 81       	ldd	r24, Y+2	; 0x02
    3808:	80 31       	cpi	r24, 0x10	; 16
    380a:	c0 f4       	brcc	.+48     	; 0x383c <H_LCD_void_gotXY+0x52>
	 {
		 switch(copy_u8Row)
    380c:	89 81       	ldd	r24, Y+1	; 0x01
    380e:	28 2f       	mov	r18, r24
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	3c 83       	std	Y+4, r19	; 0x04
    3814:	2b 83       	std	Y+3, r18	; 0x03
    3816:	8b 81       	ldd	r24, Y+3	; 0x03
    3818:	9c 81       	ldd	r25, Y+4	; 0x04
    381a:	00 97       	sbiw	r24, 0x00	; 0
    381c:	31 f0       	breq	.+12     	; 0x382a <H_LCD_void_gotXY+0x40>
    381e:	2b 81       	ldd	r18, Y+3	; 0x03
    3820:	3c 81       	ldd	r19, Y+4	; 0x04
    3822:	21 30       	cpi	r18, 0x01	; 1
    3824:	31 05       	cpc	r19, r1
    3826:	31 f0       	breq	.+12     	; 0x3834 <H_LCD_void_gotXY+0x4a>
    3828:	09 c0       	rjmp	.+18     	; 0x383c <H_LCD_void_gotXY+0x52>
		 {
		 case 0 :
			 H_LCD_void_sendCommand(LCD_R0C0+copy_u8Col);
    382a:	8a 81       	ldd	r24, Y+2	; 0x02
    382c:	80 58       	subi	r24, 0x80	; 128
    382e:	0e 94 25 1b 	call	0x364a	; 0x364a <H_LCD_void_sendCommand>
    3832:	04 c0       	rjmp	.+8      	; 0x383c <H_LCD_void_gotXY+0x52>
			 break;

		 case 1:
			 H_LCD_void_sendCommand(LCD_R1C0+copy_u8Col);
    3834:	8a 81       	ldd	r24, Y+2	; 0x02
    3836:	80 54       	subi	r24, 0x40	; 64
    3838:	0e 94 25 1b 	call	0x364a	; 0x364a <H_LCD_void_sendCommand>
			 break;

		 }
	 }
 }
}
    383c:	0f 90       	pop	r0
    383e:	0f 90       	pop	r0
    3840:	0f 90       	pop	r0
    3842:	0f 90       	pop	r0
    3844:	cf 91       	pop	r28
    3846:	df 91       	pop	r29
    3848:	08 95       	ret

0000384a <H_LCD_void_creatCustomChar>:
void H_LCD_void_creatCustomChar(const u8 *ArrPattern,u8 copy_u8char)
{
    384a:	df 93       	push	r29
    384c:	cf 93       	push	r28
    384e:	00 d0       	rcall	.+0      	; 0x3850 <H_LCD_void_creatCustomChar+0x6>
    3850:	0f 92       	push	r0
    3852:	cd b7       	in	r28, 0x3d	; 61
    3854:	de b7       	in	r29, 0x3e	; 62
    3856:	9a 83       	std	Y+2, r25	; 0x02
    3858:	89 83       	std	Y+1, r24	; 0x01
    385a:	6b 83       	std	Y+3, r22	; 0x03

}
    385c:	0f 90       	pop	r0
    385e:	0f 90       	pop	r0
    3860:	0f 90       	pop	r0
    3862:	cf 91       	pop	r28
    3864:	df 91       	pop	r29
    3866:	08 95       	ret

00003868 <H_LCD_void_displayCustomChar>:
void H_LCD_void_displayCustomChar(u8 copy_u8char)
{
    3868:	df 93       	push	r29
    386a:	cf 93       	push	r28
    386c:	0f 92       	push	r0
    386e:	cd b7       	in	r28, 0x3d	; 61
    3870:	de b7       	in	r29, 0x3e	; 62
    3872:	89 83       	std	Y+1, r24	; 0x01

}
    3874:	0f 90       	pop	r0
    3876:	cf 91       	pop	r28
    3878:	df 91       	pop	r29
    387a:	08 95       	ret

0000387c <calculator_App>:
f32  calculator_App(f32 a,f32 b,u8 operator)
{
    387c:	0f 93       	push	r16
    387e:	df 93       	push	r29
    3880:	cf 93       	push	r28
    3882:	cd b7       	in	r28, 0x3d	; 61
    3884:	de b7       	in	r29, 0x3e	; 62
    3886:	2f 97       	sbiw	r28, 0x0f	; 15
    3888:	0f b6       	in	r0, 0x3f	; 63
    388a:	f8 94       	cli
    388c:	de bf       	out	0x3e, r29	; 62
    388e:	0f be       	out	0x3f, r0	; 63
    3890:	cd bf       	out	0x3d, r28	; 61
    3892:	6d 83       	std	Y+5, r22	; 0x05
    3894:	7e 83       	std	Y+6, r23	; 0x06
    3896:	8f 83       	std	Y+7, r24	; 0x07
    3898:	98 87       	std	Y+8, r25	; 0x08
    389a:	29 87       	std	Y+9, r18	; 0x09
    389c:	3a 87       	std	Y+10, r19	; 0x0a
    389e:	4b 87       	std	Y+11, r20	; 0x0b
    38a0:	5c 87       	std	Y+12, r21	; 0x0c
    38a2:	0d 87       	std	Y+13, r16	; 0x0d
	f32 result;
	switch(operator)
    38a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    38a6:	28 2f       	mov	r18, r24
    38a8:	30 e0       	ldi	r19, 0x00	; 0
    38aa:	3f 87       	std	Y+15, r19	; 0x0f
    38ac:	2e 87       	std	Y+14, r18	; 0x0e
    38ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    38b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    38b2:	8b 32       	cpi	r24, 0x2B	; 43
    38b4:	91 05       	cpc	r25, r1
    38b6:	b1 f0       	breq	.+44     	; 0x38e4 <calculator_App+0x68>
    38b8:	2e 85       	ldd	r18, Y+14	; 0x0e
    38ba:	3f 85       	ldd	r19, Y+15	; 0x0f
    38bc:	2c 32       	cpi	r18, 0x2C	; 44
    38be:	31 05       	cpc	r19, r1
    38c0:	34 f4       	brge	.+12     	; 0x38ce <calculator_App+0x52>
    38c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    38c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    38c6:	8a 32       	cpi	r24, 0x2A	; 42
    38c8:	91 05       	cpc	r25, r1
    38ca:	71 f1       	breq	.+92     	; 0x3928 <calculator_App+0xac>
    38cc:	4e c0       	rjmp	.+156    	; 0x396a <calculator_App+0xee>
    38ce:	2e 85       	ldd	r18, Y+14	; 0x0e
    38d0:	3f 85       	ldd	r19, Y+15	; 0x0f
    38d2:	2d 32       	cpi	r18, 0x2D	; 45
    38d4:	31 05       	cpc	r19, r1
    38d6:	b9 f0       	breq	.+46     	; 0x3906 <calculator_App+0x8a>
    38d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    38da:	9f 85       	ldd	r25, Y+15	; 0x0f
    38dc:	8f 32       	cpi	r24, 0x2F	; 47
    38de:	91 05       	cpc	r25, r1
    38e0:	a1 f1       	breq	.+104    	; 0x394a <calculator_App+0xce>
    38e2:	43 c0       	rjmp	.+134    	; 0x396a <calculator_App+0xee>
	{
	case('+'):
			result=a+b;
    38e4:	6d 81       	ldd	r22, Y+5	; 0x05
    38e6:	7e 81       	ldd	r23, Y+6	; 0x06
    38e8:	8f 81       	ldd	r24, Y+7	; 0x07
    38ea:	98 85       	ldd	r25, Y+8	; 0x08
    38ec:	29 85       	ldd	r18, Y+9	; 0x09
    38ee:	3a 85       	ldd	r19, Y+10	; 0x0a
    38f0:	4b 85       	ldd	r20, Y+11	; 0x0b
    38f2:	5c 85       	ldd	r21, Y+12	; 0x0c
    38f4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    38f8:	dc 01       	movw	r26, r24
    38fa:	cb 01       	movw	r24, r22
    38fc:	89 83       	std	Y+1, r24	; 0x01
    38fe:	9a 83       	std	Y+2, r25	; 0x02
    3900:	ab 83       	std	Y+3, r26	; 0x03
    3902:	bc 83       	std	Y+4, r27	; 0x04
    3904:	32 c0       	rjmp	.+100    	; 0x396a <calculator_App+0xee>
	        break;
	case('-'):
			result=a-b;
    3906:	6d 81       	ldd	r22, Y+5	; 0x05
    3908:	7e 81       	ldd	r23, Y+6	; 0x06
    390a:	8f 81       	ldd	r24, Y+7	; 0x07
    390c:	98 85       	ldd	r25, Y+8	; 0x08
    390e:	29 85       	ldd	r18, Y+9	; 0x09
    3910:	3a 85       	ldd	r19, Y+10	; 0x0a
    3912:	4b 85       	ldd	r20, Y+11	; 0x0b
    3914:	5c 85       	ldd	r21, Y+12	; 0x0c
    3916:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    391a:	dc 01       	movw	r26, r24
    391c:	cb 01       	movw	r24, r22
    391e:	89 83       	std	Y+1, r24	; 0x01
    3920:	9a 83       	std	Y+2, r25	; 0x02
    3922:	ab 83       	std	Y+3, r26	; 0x03
    3924:	bc 83       	std	Y+4, r27	; 0x04
    3926:	21 c0       	rjmp	.+66     	; 0x396a <calculator_App+0xee>
		     break;
	case('*'):
			result=a*b;
    3928:	6d 81       	ldd	r22, Y+5	; 0x05
    392a:	7e 81       	ldd	r23, Y+6	; 0x06
    392c:	8f 81       	ldd	r24, Y+7	; 0x07
    392e:	98 85       	ldd	r25, Y+8	; 0x08
    3930:	29 85       	ldd	r18, Y+9	; 0x09
    3932:	3a 85       	ldd	r19, Y+10	; 0x0a
    3934:	4b 85       	ldd	r20, Y+11	; 0x0b
    3936:	5c 85       	ldd	r21, Y+12	; 0x0c
    3938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	89 83       	std	Y+1, r24	; 0x01
    3942:	9a 83       	std	Y+2, r25	; 0x02
    3944:	ab 83       	std	Y+3, r26	; 0x03
    3946:	bc 83       	std	Y+4, r27	; 0x04
    3948:	10 c0       	rjmp	.+32     	; 0x396a <calculator_App+0xee>
		     break;
	case('/'):
			result=a/b;
    394a:	6d 81       	ldd	r22, Y+5	; 0x05
    394c:	7e 81       	ldd	r23, Y+6	; 0x06
    394e:	8f 81       	ldd	r24, Y+7	; 0x07
    3950:	98 85       	ldd	r25, Y+8	; 0x08
    3952:	29 85       	ldd	r18, Y+9	; 0x09
    3954:	3a 85       	ldd	r19, Y+10	; 0x0a
    3956:	4b 85       	ldd	r20, Y+11	; 0x0b
    3958:	5c 85       	ldd	r21, Y+12	; 0x0c
    395a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    395e:	dc 01       	movw	r26, r24
    3960:	cb 01       	movw	r24, r22
    3962:	89 83       	std	Y+1, r24	; 0x01
    3964:	9a 83       	std	Y+2, r25	; 0x02
    3966:	ab 83       	std	Y+3, r26	; 0x03
    3968:	bc 83       	std	Y+4, r27	; 0x04
		      break;

	}
	return result;
    396a:	89 81       	ldd	r24, Y+1	; 0x01
    396c:	9a 81       	ldd	r25, Y+2	; 0x02
    396e:	ab 81       	ldd	r26, Y+3	; 0x03
    3970:	bc 81       	ldd	r27, Y+4	; 0x04

}
    3972:	bc 01       	movw	r22, r24
    3974:	cd 01       	movw	r24, r26
    3976:	2f 96       	adiw	r28, 0x0f	; 15
    3978:	0f b6       	in	r0, 0x3f	; 63
    397a:	f8 94       	cli
    397c:	de bf       	out	0x3e, r29	; 62
    397e:	0f be       	out	0x3f, r0	; 63
    3980:	cd bf       	out	0x3d, r28	; 61
    3982:	cf 91       	pop	r28
    3984:	df 91       	pop	r29
    3986:	0f 91       	pop	r16
    3988:	08 95       	ret

0000398a <H_LCD_void_writeNLatch>:
static void H_LCD_void_writeNLatch(u8 copy_u8Byte)
{
    398a:	df 93       	push	r29
    398c:	cf 93       	push	r28
    398e:	cd b7       	in	r28, 0x3d	; 61
    3990:	de b7       	in	r29, 0x3e	; 62
    3992:	6d 97       	sbiw	r28, 0x1d	; 29
    3994:	0f b6       	in	r0, 0x3f	; 63
    3996:	f8 94       	cli
    3998:	de bf       	out	0x3e, r29	; 62
    399a:	0f be       	out	0x3f, r0	; 63
    399c:	cd bf       	out	0x3d, r28	; 61
    399e:	8d 8f       	std	Y+29, r24	; 0x1d
#if(LCD_MODE== LCD_8BIT_MODE)
	//EN=0, disabled
		M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
    39a0:	80 e0       	ldi	r24, 0x00	; 0
    39a2:	62 e0       	ldi	r22, 0x02	; 2
    39a4:	40 e0       	ldi	r20, 0x00	; 0
    39a6:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
	//step1 prepare data (DB7...DB0)

	M_DIO_void_setPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(copy_u8Byte,7));
    39aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39ac:	98 2f       	mov	r25, r24
    39ae:	99 1f       	adc	r25, r25
    39b0:	99 27       	eor	r25, r25
    39b2:	99 1f       	adc	r25, r25
    39b4:	80 e0       	ldi	r24, 0x00	; 0
    39b6:	67 e0       	ldi	r22, 0x07	; 7
    39b8:	49 2f       	mov	r20, r25
    39ba:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(copy_u8Byte,6));
    39be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39c0:	82 95       	swap	r24
    39c2:	86 95       	lsr	r24
    39c4:	86 95       	lsr	r24
    39c6:	83 70       	andi	r24, 0x03	; 3
    39c8:	98 2f       	mov	r25, r24
    39ca:	91 70       	andi	r25, 0x01	; 1
    39cc:	80 e0       	ldi	r24, 0x00	; 0
    39ce:	66 e0       	ldi	r22, 0x06	; 6
    39d0:	49 2f       	mov	r20, r25
    39d2:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(copy_u8Byte,5));
    39d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39d8:	82 95       	swap	r24
    39da:	86 95       	lsr	r24
    39dc:	87 70       	andi	r24, 0x07	; 7
    39de:	98 2f       	mov	r25, r24
    39e0:	91 70       	andi	r25, 0x01	; 1
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	65 e0       	ldi	r22, 0x05	; 5
    39e6:	49 2f       	mov	r20, r25
    39e8:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(copy_u8Byte,4));
    39ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39ee:	82 95       	swap	r24
    39f0:	8f 70       	andi	r24, 0x0F	; 15
    39f2:	98 2f       	mov	r25, r24
    39f4:	91 70       	andi	r25, 0x01	; 1
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	64 e0       	ldi	r22, 0x04	; 4
    39fa:	49 2f       	mov	r20, r25
    39fc:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D3_PORT,LCD_D3_PIN,GET_BIT(copy_u8Byte,3));
    3a00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a02:	86 95       	lsr	r24
    3a04:	86 95       	lsr	r24
    3a06:	86 95       	lsr	r24
    3a08:	98 2f       	mov	r25, r24
    3a0a:	91 70       	andi	r25, 0x01	; 1
    3a0c:	80 e0       	ldi	r24, 0x00	; 0
    3a0e:	63 e0       	ldi	r22, 0x03	; 3
    3a10:	49 2f       	mov	r20, r25
    3a12:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D2_PORT,LCD_D2_PIN,GET_BIT(copy_u8Byte,2));
    3a16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a18:	86 95       	lsr	r24
    3a1a:	86 95       	lsr	r24
    3a1c:	98 2f       	mov	r25, r24
    3a1e:	91 70       	andi	r25, 0x01	; 1
    3a20:	80 e0       	ldi	r24, 0x00	; 0
    3a22:	62 e0       	ldi	r22, 0x02	; 2
    3a24:	49 2f       	mov	r20, r25
    3a26:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D1_PORT,LCD_D1_PIN,GET_BIT(copy_u8Byte,1));
    3a2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a2c:	86 95       	lsr	r24
    3a2e:	98 2f       	mov	r25, r24
    3a30:	91 70       	andi	r25, 0x01	; 1
    3a32:	80 e0       	ldi	r24, 0x00	; 0
    3a34:	61 e0       	ldi	r22, 0x01	; 1
    3a36:	49 2f       	mov	r20, r25
    3a38:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D0_PORT,LCD_D0_PIN,GET_BIT(copy_u8Byte,0));
    3a3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a3e:	98 2f       	mov	r25, r24
    3a40:	91 70       	andi	r25, 0x01	; 1
    3a42:	80 e0       	ldi	r24, 0x00	; 0
    3a44:	60 e0       	ldi	r22, 0x00	; 0
    3a46:	49 2f       	mov	r20, r25
    3a48:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
	//step2 activate enable ,(E=1)
	M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    3a4c:	80 e0       	ldi	r24, 0x00	; 0
    3a4e:	62 e0       	ldi	r22, 0x02	; 2
    3a50:	41 e0       	ldi	r20, 0x01	; 1
    3a52:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    3a56:	80 e0       	ldi	r24, 0x00	; 0
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	a0 e8       	ldi	r26, 0x80	; 128
    3a5c:	bf e3       	ldi	r27, 0x3F	; 63
    3a5e:	89 8f       	std	Y+25, r24	; 0x19
    3a60:	9a 8f       	std	Y+26, r25	; 0x1a
    3a62:	ab 8f       	std	Y+27, r26	; 0x1b
    3a64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a66:	69 8d       	ldd	r22, Y+25	; 0x19
    3a68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a6e:	20 e0       	ldi	r18, 0x00	; 0
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	48 ec       	ldi	r20, 0xC8	; 200
    3a74:	53 e4       	ldi	r21, 0x43	; 67
    3a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a7a:	dc 01       	movw	r26, r24
    3a7c:	cb 01       	movw	r24, r22
    3a7e:	8d 8b       	std	Y+21, r24	; 0x15
    3a80:	9e 8b       	std	Y+22, r25	; 0x16
    3a82:	af 8b       	std	Y+23, r26	; 0x17
    3a84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a86:	6d 89       	ldd	r22, Y+21	; 0x15
    3a88:	7e 89       	ldd	r23, Y+22	; 0x16
    3a8a:	8f 89       	ldd	r24, Y+23	; 0x17
    3a8c:	98 8d       	ldd	r25, Y+24	; 0x18
    3a8e:	20 e0       	ldi	r18, 0x00	; 0
    3a90:	30 e0       	ldi	r19, 0x00	; 0
    3a92:	40 e8       	ldi	r20, 0x80	; 128
    3a94:	5f e3       	ldi	r21, 0x3F	; 63
    3a96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a9a:	88 23       	and	r24, r24
    3a9c:	2c f4       	brge	.+10     	; 0x3aa8 <H_LCD_void_writeNLatch+0x11e>
		__ticks = 1;
    3a9e:	81 e0       	ldi	r24, 0x01	; 1
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	9c 8b       	std	Y+20, r25	; 0x14
    3aa4:	8b 8b       	std	Y+19, r24	; 0x13
    3aa6:	3f c0       	rjmp	.+126    	; 0x3b26 <H_LCD_void_writeNLatch+0x19c>
	else if (__tmp > 65535)
    3aa8:	6d 89       	ldd	r22, Y+21	; 0x15
    3aaa:	7e 89       	ldd	r23, Y+22	; 0x16
    3aac:	8f 89       	ldd	r24, Y+23	; 0x17
    3aae:	98 8d       	ldd	r25, Y+24	; 0x18
    3ab0:	20 e0       	ldi	r18, 0x00	; 0
    3ab2:	3f ef       	ldi	r19, 0xFF	; 255
    3ab4:	4f e7       	ldi	r20, 0x7F	; 127
    3ab6:	57 e4       	ldi	r21, 0x47	; 71
    3ab8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3abc:	18 16       	cp	r1, r24
    3abe:	4c f5       	brge	.+82     	; 0x3b12 <H_LCD_void_writeNLatch+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ac0:	69 8d       	ldd	r22, Y+25	; 0x19
    3ac2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ac4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ac6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ac8:	20 e0       	ldi	r18, 0x00	; 0
    3aca:	30 e0       	ldi	r19, 0x00	; 0
    3acc:	40 e2       	ldi	r20, 0x20	; 32
    3ace:	51 e4       	ldi	r21, 0x41	; 65
    3ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	cb 01       	movw	r24, r22
    3ad8:	bc 01       	movw	r22, r24
    3ada:	cd 01       	movw	r24, r26
    3adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae0:	dc 01       	movw	r26, r24
    3ae2:	cb 01       	movw	r24, r22
    3ae4:	9c 8b       	std	Y+20, r25	; 0x14
    3ae6:	8b 8b       	std	Y+19, r24	; 0x13
    3ae8:	0f c0       	rjmp	.+30     	; 0x3b08 <H_LCD_void_writeNLatch+0x17e>
    3aea:	88 e2       	ldi	r24, 0x28	; 40
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	9a 8b       	std	Y+18, r25	; 0x12
    3af0:	89 8b       	std	Y+17, r24	; 0x11
    3af2:	89 89       	ldd	r24, Y+17	; 0x11
    3af4:	9a 89       	ldd	r25, Y+18	; 0x12
    3af6:	01 97       	sbiw	r24, 0x01	; 1
    3af8:	f1 f7       	brne	.-4      	; 0x3af6 <H_LCD_void_writeNLatch+0x16c>
    3afa:	9a 8b       	std	Y+18, r25	; 0x12
    3afc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3afe:	8b 89       	ldd	r24, Y+19	; 0x13
    3b00:	9c 89       	ldd	r25, Y+20	; 0x14
    3b02:	01 97       	sbiw	r24, 0x01	; 1
    3b04:	9c 8b       	std	Y+20, r25	; 0x14
    3b06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b08:	8b 89       	ldd	r24, Y+19	; 0x13
    3b0a:	9c 89       	ldd	r25, Y+20	; 0x14
    3b0c:	00 97       	sbiw	r24, 0x00	; 0
    3b0e:	69 f7       	brne	.-38     	; 0x3aea <H_LCD_void_writeNLatch+0x160>
    3b10:	14 c0       	rjmp	.+40     	; 0x3b3a <H_LCD_void_writeNLatch+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b12:	6d 89       	ldd	r22, Y+21	; 0x15
    3b14:	7e 89       	ldd	r23, Y+22	; 0x16
    3b16:	8f 89       	ldd	r24, Y+23	; 0x17
    3b18:	98 8d       	ldd	r25, Y+24	; 0x18
    3b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b1e:	dc 01       	movw	r26, r24
    3b20:	cb 01       	movw	r24, r22
    3b22:	9c 8b       	std	Y+20, r25	; 0x14
    3b24:	8b 8b       	std	Y+19, r24	; 0x13
    3b26:	8b 89       	ldd	r24, Y+19	; 0x13
    3b28:	9c 89       	ldd	r25, Y+20	; 0x14
    3b2a:	98 8b       	std	Y+16, r25	; 0x10
    3b2c:	8f 87       	std	Y+15, r24	; 0x0f
    3b2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b30:	98 89       	ldd	r25, Y+16	; 0x10
    3b32:	01 97       	sbiw	r24, 0x01	; 1
    3b34:	f1 f7       	brne	.-4      	; 0x3b32 <H_LCD_void_writeNLatch+0x1a8>
    3b36:	98 8b       	std	Y+16, r25	; 0x10
    3b38:	8f 87       	std	Y+15, r24	; 0x0f

	//step3 : delay for 1msec
	_delay_ms(1);

	//step4 :deactivate enable (E=10)
	M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    3b3a:	80 e0       	ldi	r24, 0x00	; 0
    3b3c:	62 e0       	ldi	r22, 0x02	; 2
    3b3e:	40 e0       	ldi	r20, 0x00	; 0
    3b40:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    3b44:	80 e0       	ldi	r24, 0x00	; 0
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	a0 ea       	ldi	r26, 0xA0	; 160
    3b4a:	b0 e4       	ldi	r27, 0x40	; 64
    3b4c:	8b 87       	std	Y+11, r24	; 0x0b
    3b4e:	9c 87       	std	Y+12, r25	; 0x0c
    3b50:	ad 87       	std	Y+13, r26	; 0x0d
    3b52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b54:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b56:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b58:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b5c:	20 e0       	ldi	r18, 0x00	; 0
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	48 ec       	ldi	r20, 0xC8	; 200
    3b62:	53 e4       	ldi	r21, 0x43	; 67
    3b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b68:	dc 01       	movw	r26, r24
    3b6a:	cb 01       	movw	r24, r22
    3b6c:	8f 83       	std	Y+7, r24	; 0x07
    3b6e:	98 87       	std	Y+8, r25	; 0x08
    3b70:	a9 87       	std	Y+9, r26	; 0x09
    3b72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b74:	6f 81       	ldd	r22, Y+7	; 0x07
    3b76:	78 85       	ldd	r23, Y+8	; 0x08
    3b78:	89 85       	ldd	r24, Y+9	; 0x09
    3b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b7c:	20 e0       	ldi	r18, 0x00	; 0
    3b7e:	30 e0       	ldi	r19, 0x00	; 0
    3b80:	40 e8       	ldi	r20, 0x80	; 128
    3b82:	5f e3       	ldi	r21, 0x3F	; 63
    3b84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b88:	88 23       	and	r24, r24
    3b8a:	2c f4       	brge	.+10     	; 0x3b96 <H_LCD_void_writeNLatch+0x20c>
		__ticks = 1;
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	9e 83       	std	Y+6, r25	; 0x06
    3b92:	8d 83       	std	Y+5, r24	; 0x05
    3b94:	3f c0       	rjmp	.+126    	; 0x3c14 <H_LCD_void_writeNLatch+0x28a>
	else if (__tmp > 65535)
    3b96:	6f 81       	ldd	r22, Y+7	; 0x07
    3b98:	78 85       	ldd	r23, Y+8	; 0x08
    3b9a:	89 85       	ldd	r24, Y+9	; 0x09
    3b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b9e:	20 e0       	ldi	r18, 0x00	; 0
    3ba0:	3f ef       	ldi	r19, 0xFF	; 255
    3ba2:	4f e7       	ldi	r20, 0x7F	; 127
    3ba4:	57 e4       	ldi	r21, 0x47	; 71
    3ba6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3baa:	18 16       	cp	r1, r24
    3bac:	4c f5       	brge	.+82     	; 0x3c00 <H_LCD_void_writeNLatch+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bae:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bb6:	20 e0       	ldi	r18, 0x00	; 0
    3bb8:	30 e0       	ldi	r19, 0x00	; 0
    3bba:	40 e2       	ldi	r20, 0x20	; 32
    3bbc:	51 e4       	ldi	r21, 0x41	; 65
    3bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc2:	dc 01       	movw	r26, r24
    3bc4:	cb 01       	movw	r24, r22
    3bc6:	bc 01       	movw	r22, r24
    3bc8:	cd 01       	movw	r24, r26
    3bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bce:	dc 01       	movw	r26, r24
    3bd0:	cb 01       	movw	r24, r22
    3bd2:	9e 83       	std	Y+6, r25	; 0x06
    3bd4:	8d 83       	std	Y+5, r24	; 0x05
    3bd6:	0f c0       	rjmp	.+30     	; 0x3bf6 <H_LCD_void_writeNLatch+0x26c>
    3bd8:	88 e2       	ldi	r24, 0x28	; 40
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	9c 83       	std	Y+4, r25	; 0x04
    3bde:	8b 83       	std	Y+3, r24	; 0x03
    3be0:	8b 81       	ldd	r24, Y+3	; 0x03
    3be2:	9c 81       	ldd	r25, Y+4	; 0x04
    3be4:	01 97       	sbiw	r24, 0x01	; 1
    3be6:	f1 f7       	brne	.-4      	; 0x3be4 <H_LCD_void_writeNLatch+0x25a>
    3be8:	9c 83       	std	Y+4, r25	; 0x04
    3bea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bec:	8d 81       	ldd	r24, Y+5	; 0x05
    3bee:	9e 81       	ldd	r25, Y+6	; 0x06
    3bf0:	01 97       	sbiw	r24, 0x01	; 1
    3bf2:	9e 83       	std	Y+6, r25	; 0x06
    3bf4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bfa:	00 97       	sbiw	r24, 0x00	; 0
    3bfc:	69 f7       	brne	.-38     	; 0x3bd8 <H_LCD_void_writeNLatch+0x24e>
    3bfe:	14 c0       	rjmp	.+40     	; 0x3c28 <H_LCD_void_writeNLatch+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c00:	6f 81       	ldd	r22, Y+7	; 0x07
    3c02:	78 85       	ldd	r23, Y+8	; 0x08
    3c04:	89 85       	ldd	r24, Y+9	; 0x09
    3c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c0c:	dc 01       	movw	r26, r24
    3c0e:	cb 01       	movw	r24, r22
    3c10:	9e 83       	std	Y+6, r25	; 0x06
    3c12:	8d 83       	std	Y+5, r24	; 0x05
    3c14:	8d 81       	ldd	r24, Y+5	; 0x05
    3c16:	9e 81       	ldd	r25, Y+6	; 0x06
    3c18:	9a 83       	std	Y+2, r25	; 0x02
    3c1a:	89 83       	std	Y+1, r24	; 0x01
    3c1c:	89 81       	ldd	r24, Y+1	; 0x01
    3c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c20:	01 97       	sbiw	r24, 0x01	; 1
    3c22:	f1 f7       	brne	.-4      	; 0x3c20 <H_LCD_void_writeNLatch+0x296>
    3c24:	9a 83       	std	Y+2, r25	; 0x02
    3c26:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
#else
  #error("wrong lcd mode")
#endif

}
    3c28:	6d 96       	adiw	r28, 0x1d	; 29
    3c2a:	0f b6       	in	r0, 0x3f	; 63
    3c2c:	f8 94       	cli
    3c2e:	de bf       	out	0x3e, r29	; 62
    3c30:	0f be       	out	0x3f, r0	; 63
    3c32:	cd bf       	out	0x3d, r28	; 61
    3c34:	cf 91       	pop	r28
    3c36:	df 91       	pop	r29
    3c38:	08 95       	ret

00003c3a <H_KEYPAD_void_init>:
#include"KEYPAD_config.h"
#include"KEYPAD_int.h"
#include<util/delay.h>

void H_KEYPAD_void_init()
{
    3c3a:	df 93       	push	r29
    3c3c:	cf 93       	push	r28
    3c3e:	cd b7       	in	r28, 0x3d	; 61
    3c40:	de b7       	in	r29, 0x3e	; 62
	//set all rows  direction as output
	M_DIO_void_setPinDir(KEYPAD_R0_PORT, KEYPAD_R0_PIN, OUT);
    3c42:	81 e0       	ldi	r24, 0x01	; 1
    3c44:	64 e0       	ldi	r22, 0x04	; 4
    3c46:	41 e0       	ldi	r20, 0x01	; 1
    3c48:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_R1_PORT, KEYPAD_R1_PIN, OUT);
    3c4c:	81 e0       	ldi	r24, 0x01	; 1
    3c4e:	65 e0       	ldi	r22, 0x05	; 5
    3c50:	41 e0       	ldi	r20, 0x01	; 1
    3c52:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_R2_PORT, KEYPAD_R2_PIN, OUT);
    3c56:	81 e0       	ldi	r24, 0x01	; 1
    3c58:	66 e0       	ldi	r22, 0x06	; 6
    3c5a:	41 e0       	ldi	r20, 0x01	; 1
    3c5c:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_R3_PORT, KEYPAD_R3_PIN, OUT);
    3c60:	81 e0       	ldi	r24, 0x01	; 1
    3c62:	67 e0       	ldi	r22, 0x07	; 7
    3c64:	41 e0       	ldi	r20, 0x01	; 1
    3c66:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>

	//set all collums direction as input
	M_DIO_void_setPinDir(KEYPAD_C0_PORT, KEYPAD_C0_PIN, IN);
    3c6a:	83 e0       	ldi	r24, 0x03	; 3
    3c6c:	62 e0       	ldi	r22, 0x02	; 2
    3c6e:	40 e0       	ldi	r20, 0x00	; 0
    3c70:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_C1_PORT, KEYPAD_C1_PIN, IN);
    3c74:	83 e0       	ldi	r24, 0x03	; 3
    3c76:	63 e0       	ldi	r22, 0x03	; 3
    3c78:	40 e0       	ldi	r20, 0x00	; 0
    3c7a:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_C2_PORT, KEYPAD_C2_PIN, IN);
    3c7e:	83 e0       	ldi	r24, 0x03	; 3
    3c80:	64 e0       	ldi	r22, 0x04	; 4
    3c82:	40 e0       	ldi	r20, 0x00	; 0
    3c84:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_C3_PORT, KEYPAD_C3_PIN, IN);
    3c88:	83 e0       	ldi	r24, 0x03	; 3
    3c8a:	65 e0       	ldi	r22, 0x05	; 5
    3c8c:	40 e0       	ldi	r20, 0x00	; 0
    3c8e:	0e 94 02 08 	call	0x1004	; 0x1004 <M_DIO_void_setPinDir>

	//deactivate rows (high)
	M_DIO_void_setPinValue(KEYPAD_R0_PORT,KEYPAD_R0_PIN,HIGH);
    3c92:	81 e0       	ldi	r24, 0x01	; 1
    3c94:	64 e0       	ldi	r22, 0x04	; 4
    3c96:	41 e0       	ldi	r20, 0x01	; 1
    3c98:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(KEYPAD_R1_PORT,KEYPAD_R1_PIN,HIGH);
    3c9c:	81 e0       	ldi	r24, 0x01	; 1
    3c9e:	65 e0       	ldi	r22, 0x05	; 5
    3ca0:	41 e0       	ldi	r20, 0x01	; 1
    3ca2:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(KEYPAD_R2_PORT,KEYPAD_R2_PIN,HIGH);
    3ca6:	81 e0       	ldi	r24, 0x01	; 1
    3ca8:	66 e0       	ldi	r22, 0x06	; 6
    3caa:	41 e0       	ldi	r20, 0x01	; 1
    3cac:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(KEYPAD_R3_PORT,KEYPAD_R3_PIN,HIGH);
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	67 e0       	ldi	r22, 0x07	; 7
    3cb4:	41 e0       	ldi	r20, 0x01	; 1
    3cb6:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
    }
    3cba:	cf 91       	pop	r28
    3cbc:	df 91       	pop	r29
    3cbe:	08 95       	ret

00003cc0 <H_KEYPAD_void_getPressedKey>:

u8 H_KEYPAD_void_getPressedKey()
{
    3cc0:	df 93       	push	r29
    3cc2:	cf 93       	push	r28
    3cc4:	cd b7       	in	r28, 0x3d	; 61
    3cc6:	de b7       	in	r29, 0x3e	; 62
    3cc8:	a8 97       	sbiw	r28, 0x28	; 40
    3cca:	0f b6       	in	r0, 0x3f	; 63
    3ccc:	f8 94       	cli
    3cce:	de bf       	out	0x3e, r29	; 62
    3cd0:	0f be       	out	0x3f, r0	; 63
    3cd2:	cd bf       	out	0x3d, r28	; 61
	u8 loc_Key= NUM_PRESSED_KEY ;
    3cd4:	8f ef       	ldi	r24, 0xFF	; 255
    3cd6:	89 8b       	std	Y+17, r24	; 0x11
	u8 loc_row_indx;
	u8 loc_col_indx;
	u8 loc_keypad_arr [4][4]=KEYPAD_ARR_MAP;
    3cd8:	ce 01       	movw	r24, r28
    3cda:	42 96       	adiw	r24, 0x12	; 18
    3cdc:	9d a3       	std	Y+37, r25	; 0x25
    3cde:	8c a3       	std	Y+36, r24	; 0x24
    3ce0:	e8 e6       	ldi	r30, 0x68	; 104
    3ce2:	f0 e0       	ldi	r31, 0x00	; 0
    3ce4:	ff a3       	std	Y+39, r31	; 0x27
    3ce6:	ee a3       	std	Y+38, r30	; 0x26
    3ce8:	f0 e1       	ldi	r31, 0x10	; 16
    3cea:	f8 a7       	std	Y+40, r31	; 0x28
    3cec:	ee a1       	ldd	r30, Y+38	; 0x26
    3cee:	ff a1       	ldd	r31, Y+39	; 0x27
    3cf0:	00 80       	ld	r0, Z
    3cf2:	8e a1       	ldd	r24, Y+38	; 0x26
    3cf4:	9f a1       	ldd	r25, Y+39	; 0x27
    3cf6:	01 96       	adiw	r24, 0x01	; 1
    3cf8:	9f a3       	std	Y+39, r25	; 0x27
    3cfa:	8e a3       	std	Y+38, r24	; 0x26
    3cfc:	ec a1       	ldd	r30, Y+36	; 0x24
    3cfe:	fd a1       	ldd	r31, Y+37	; 0x25
    3d00:	00 82       	st	Z, r0
    3d02:	8c a1       	ldd	r24, Y+36	; 0x24
    3d04:	9d a1       	ldd	r25, Y+37	; 0x25
    3d06:	01 96       	adiw	r24, 0x01	; 1
    3d08:	9d a3       	std	Y+37, r25	; 0x25
    3d0a:	8c a3       	std	Y+36, r24	; 0x24
    3d0c:	98 a5       	ldd	r25, Y+40	; 0x28
    3d0e:	91 50       	subi	r25, 0x01	; 1
    3d10:	98 a7       	std	Y+40, r25	; 0x28
    3d12:	e8 a5       	ldd	r30, Y+40	; 0x28
    3d14:	ee 23       	and	r30, r30
    3d16:	51 f7       	brne	.-44     	; 0x3cec <H_KEYPAD_void_getPressedKey+0x2c>
	u8 read;
	for(loc_row_indx=KEYPAD_R0_PIN;loc_row_indx<=KEYPAD_R3_PIN;loc_row_indx++)
    3d18:	84 e0       	ldi	r24, 0x04	; 4
    3d1a:	88 8b       	std	Y+16, r24	; 0x10
    3d1c:	c9 c0       	rjmp	.+402    	; 0x3eb0 <H_KEYPAD_void_getPressedKey+0x1f0>
	{
		M_DIO_void_setPinValue(KEYPAD_ROWS_PORT,loc_row_indx,LOW);
    3d1e:	81 e0       	ldi	r24, 0x01	; 1
    3d20:	68 89       	ldd	r22, Y+16	; 0x10
    3d22:	40 e0       	ldi	r20, 0x00	; 0
    3d24:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
		for (loc_col_indx=KEYPAD_C0_PIN;loc_col_indx<=KEYPAD_C3_PIN;loc_col_indx ++)
    3d28:	82 e0       	ldi	r24, 0x02	; 2
    3d2a:	8f 87       	std	Y+15, r24	; 0x0f
    3d2c:	b5 c0       	rjmp	.+362    	; 0x3e98 <H_KEYPAD_void_getPressedKey+0x1d8>
		{
			M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
    3d2e:	9e 01       	movw	r18, r28
    3d30:	2e 5d       	subi	r18, 0xDE	; 222
    3d32:	3f 4f       	sbci	r19, 0xFF	; 255
    3d34:	83 e0       	ldi	r24, 0x03	; 3
    3d36:	6f 85       	ldd	r22, Y+15	; 0x0f
    3d38:	a9 01       	movw	r20, r18
    3d3a:	0e 94 30 0a 	call	0x1460	; 0x1460 <M_DIO_void_getPinValue>
			if(read==ACTIVE_LOW_PRESSED)
    3d3e:	8a a1       	ldd	r24, Y+34	; 0x22
    3d40:	88 23       	and	r24, r24
    3d42:	09 f0       	breq	.+2      	; 0x3d46 <H_KEYPAD_void_getPressedKey+0x86>
    3d44:	a6 c0       	rjmp	.+332    	; 0x3e92 <H_KEYPAD_void_getPressedKey+0x1d2>
    3d46:	80 e0       	ldi	r24, 0x00	; 0
    3d48:	90 e0       	ldi	r25, 0x00	; 0
    3d4a:	a8 ec       	ldi	r26, 0xC8	; 200
    3d4c:	b2 e4       	ldi	r27, 0x42	; 66
    3d4e:	8b 87       	std	Y+11, r24	; 0x0b
    3d50:	9c 87       	std	Y+12, r25	; 0x0c
    3d52:	ad 87       	std	Y+13, r26	; 0x0d
    3d54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d56:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d58:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	48 ec       	ldi	r20, 0xC8	; 200
    3d64:	53 e4       	ldi	r21, 0x43	; 67
    3d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d6a:	dc 01       	movw	r26, r24
    3d6c:	cb 01       	movw	r24, r22
    3d6e:	8f 83       	std	Y+7, r24	; 0x07
    3d70:	98 87       	std	Y+8, r25	; 0x08
    3d72:	a9 87       	std	Y+9, r26	; 0x09
    3d74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d76:	6f 81       	ldd	r22, Y+7	; 0x07
    3d78:	78 85       	ldd	r23, Y+8	; 0x08
    3d7a:	89 85       	ldd	r24, Y+9	; 0x09
    3d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d7e:	20 e0       	ldi	r18, 0x00	; 0
    3d80:	30 e0       	ldi	r19, 0x00	; 0
    3d82:	40 e8       	ldi	r20, 0x80	; 128
    3d84:	5f e3       	ldi	r21, 0x3F	; 63
    3d86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d8a:	88 23       	and	r24, r24
    3d8c:	2c f4       	brge	.+10     	; 0x3d98 <H_KEYPAD_void_getPressedKey+0xd8>
		__ticks = 1;
    3d8e:	81 e0       	ldi	r24, 0x01	; 1
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	9e 83       	std	Y+6, r25	; 0x06
    3d94:	8d 83       	std	Y+5, r24	; 0x05
    3d96:	3f c0       	rjmp	.+126    	; 0x3e16 <H_KEYPAD_void_getPressedKey+0x156>
	else if (__tmp > 65535)
    3d98:	6f 81       	ldd	r22, Y+7	; 0x07
    3d9a:	78 85       	ldd	r23, Y+8	; 0x08
    3d9c:	89 85       	ldd	r24, Y+9	; 0x09
    3d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3da0:	20 e0       	ldi	r18, 0x00	; 0
    3da2:	3f ef       	ldi	r19, 0xFF	; 255
    3da4:	4f e7       	ldi	r20, 0x7F	; 127
    3da6:	57 e4       	ldi	r21, 0x47	; 71
    3da8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3dac:	18 16       	cp	r1, r24
    3dae:	4c f5       	brge	.+82     	; 0x3e02 <H_KEYPAD_void_getPressedKey+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3db0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3db2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3db4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3db6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3db8:	20 e0       	ldi	r18, 0x00	; 0
    3dba:	30 e0       	ldi	r19, 0x00	; 0
    3dbc:	40 e2       	ldi	r20, 0x20	; 32
    3dbe:	51 e4       	ldi	r21, 0x41	; 65
    3dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc4:	dc 01       	movw	r26, r24
    3dc6:	cb 01       	movw	r24, r22
    3dc8:	bc 01       	movw	r22, r24
    3dca:	cd 01       	movw	r24, r26
    3dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd0:	dc 01       	movw	r26, r24
    3dd2:	cb 01       	movw	r24, r22
    3dd4:	9e 83       	std	Y+6, r25	; 0x06
    3dd6:	8d 83       	std	Y+5, r24	; 0x05
    3dd8:	0f c0       	rjmp	.+30     	; 0x3df8 <H_KEYPAD_void_getPressedKey+0x138>
    3dda:	88 e2       	ldi	r24, 0x28	; 40
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	9c 83       	std	Y+4, r25	; 0x04
    3de0:	8b 83       	std	Y+3, r24	; 0x03
    3de2:	8b 81       	ldd	r24, Y+3	; 0x03
    3de4:	9c 81       	ldd	r25, Y+4	; 0x04
    3de6:	01 97       	sbiw	r24, 0x01	; 1
    3de8:	f1 f7       	brne	.-4      	; 0x3de6 <H_KEYPAD_void_getPressedKey+0x126>
    3dea:	9c 83       	std	Y+4, r25	; 0x04
    3dec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dee:	8d 81       	ldd	r24, Y+5	; 0x05
    3df0:	9e 81       	ldd	r25, Y+6	; 0x06
    3df2:	01 97       	sbiw	r24, 0x01	; 1
    3df4:	9e 83       	std	Y+6, r25	; 0x06
    3df6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3df8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    3dfc:	00 97       	sbiw	r24, 0x00	; 0
    3dfe:	69 f7       	brne	.-38     	; 0x3dda <H_KEYPAD_void_getPressedKey+0x11a>
    3e00:	14 c0       	rjmp	.+40     	; 0x3e2a <H_KEYPAD_void_getPressedKey+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e02:	6f 81       	ldd	r22, Y+7	; 0x07
    3e04:	78 85       	ldd	r23, Y+8	; 0x08
    3e06:	89 85       	ldd	r24, Y+9	; 0x09
    3e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e0e:	dc 01       	movw	r26, r24
    3e10:	cb 01       	movw	r24, r22
    3e12:	9e 83       	std	Y+6, r25	; 0x06
    3e14:	8d 83       	std	Y+5, r24	; 0x05
    3e16:	8d 81       	ldd	r24, Y+5	; 0x05
    3e18:	9e 81       	ldd	r25, Y+6	; 0x06
    3e1a:	9a 83       	std	Y+2, r25	; 0x02
    3e1c:	89 83       	std	Y+1, r24	; 0x01
    3e1e:	89 81       	ldd	r24, Y+1	; 0x01
    3e20:	9a 81       	ldd	r25, Y+2	; 0x02
    3e22:	01 97       	sbiw	r24, 0x01	; 1
    3e24:	f1 f7       	brne	.-4      	; 0x3e22 <H_KEYPAD_void_getPressedKey+0x162>
    3e26:	9a 83       	std	Y+2, r25	; 0x02
    3e28:	89 83       	std	Y+1, r24	; 0x01
			{
				//debouncing delay
				_delay_ms(100);
				M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
    3e2a:	9e 01       	movw	r18, r28
    3e2c:	2e 5d       	subi	r18, 0xDE	; 222
    3e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e30:	83 e0       	ldi	r24, 0x03	; 3
    3e32:	6f 85       	ldd	r22, Y+15	; 0x0f
    3e34:	a9 01       	movw	r20, r18
    3e36:	0e 94 30 0a 	call	0x1460	; 0x1460 <M_DIO_void_getPinValue>
				if(read==ACTIVE_LOW_PRESSED)
    3e3a:	8a a1       	ldd	r24, Y+34	; 0x22
    3e3c:	88 23       	and	r24, r24
    3e3e:	49 f5       	brne	.+82     	; 0x3e92 <H_KEYPAD_void_getPressedKey+0x1d2>
    3e40:	08 c0       	rjmp	.+16     	; 0x3e52 <H_KEYPAD_void_getPressedKey+0x192>
				{

						while(read==ACTIVE_LOW_PRESSED)
						{
							M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
    3e42:	9e 01       	movw	r18, r28
    3e44:	2e 5d       	subi	r18, 0xDE	; 222
    3e46:	3f 4f       	sbci	r19, 0xFF	; 255
    3e48:	83 e0       	ldi	r24, 0x03	; 3
    3e4a:	6f 85       	ldd	r22, Y+15	; 0x0f
    3e4c:	a9 01       	movw	r20, r18
    3e4e:	0e 94 30 0a 	call	0x1460	; 0x1460 <M_DIO_void_getPinValue>
				_delay_ms(100);
				M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
				if(read==ACTIVE_LOW_PRESSED)
				{

						while(read==ACTIVE_LOW_PRESSED)
    3e52:	8a a1       	ldd	r24, Y+34	; 0x22
    3e54:	88 23       	and	r24, r24
    3e56:	a9 f3       	breq	.-22     	; 0x3e42 <H_KEYPAD_void_getPressedKey+0x182>
						{
							M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
						}//while
						loc_Key =loc_keypad_arr[loc_row_indx - KEYPAD_R0_PIN][loc_col_indx - KEYPAD_C0_PIN];
    3e58:	88 89       	ldd	r24, Y+16	; 0x10
    3e5a:	88 2f       	mov	r24, r24
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	9c 01       	movw	r18, r24
    3e60:	24 50       	subi	r18, 0x04	; 4
    3e62:	30 40       	sbci	r19, 0x00	; 0
    3e64:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e66:	88 2f       	mov	r24, r24
    3e68:	90 e0       	ldi	r25, 0x00	; 0
    3e6a:	ac 01       	movw	r20, r24
    3e6c:	42 50       	subi	r20, 0x02	; 2
    3e6e:	50 40       	sbci	r21, 0x00	; 0
    3e70:	22 0f       	add	r18, r18
    3e72:	33 1f       	adc	r19, r19
    3e74:	22 0f       	add	r18, r18
    3e76:	33 1f       	adc	r19, r19
    3e78:	ce 01       	movw	r24, r28
    3e7a:	01 96       	adiw	r24, 0x01	; 1
    3e7c:	82 0f       	add	r24, r18
    3e7e:	93 1f       	adc	r25, r19
    3e80:	84 0f       	add	r24, r20
    3e82:	95 1f       	adc	r25, r21
    3e84:	fc 01       	movw	r30, r24
    3e86:	71 96       	adiw	r30, 0x11	; 17
    3e88:	80 81       	ld	r24, Z
    3e8a:	89 8b       	std	Y+17, r24	; 0x11
						return loc_Key;
    3e8c:	f9 89       	ldd	r31, Y+17	; 0x11
    3e8e:	fb a3       	std	Y+35, r31	; 0x23
    3e90:	15 c0       	rjmp	.+42     	; 0x3ebc <H_KEYPAD_void_getPressedKey+0x1fc>
	u8 loc_keypad_arr [4][4]=KEYPAD_ARR_MAP;
	u8 read;
	for(loc_row_indx=KEYPAD_R0_PIN;loc_row_indx<=KEYPAD_R3_PIN;loc_row_indx++)
	{
		M_DIO_void_setPinValue(KEYPAD_ROWS_PORT,loc_row_indx,LOW);
		for (loc_col_indx=KEYPAD_C0_PIN;loc_col_indx<=KEYPAD_C3_PIN;loc_col_indx ++)
    3e92:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e94:	8f 5f       	subi	r24, 0xFF	; 255
    3e96:	8f 87       	std	Y+15, r24	; 0x0f
    3e98:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e9a:	86 30       	cpi	r24, 0x06	; 6
    3e9c:	08 f4       	brcc	.+2      	; 0x3ea0 <H_KEYPAD_void_getPressedKey+0x1e0>
    3e9e:	47 cf       	rjmp	.-370    	; 0x3d2e <H_KEYPAD_void_getPressedKey+0x6e>
					}// if 2nd reading
				}// if 1St reading

			}// for
			// Deactivate row (HIGH )
		M_DIO_void_setPinValue(KEYPAD_ROWS_PORT,loc_row_indx,HIGH);
    3ea0:	81 e0       	ldi	r24, 0x01	; 1
    3ea2:	68 89       	ldd	r22, Y+16	; 0x10
    3ea4:	41 e0       	ldi	r20, 0x01	; 1
    3ea6:	0e 94 19 09 	call	0x1232	; 0x1232 <M_DIO_void_setPinValue>
	u8 loc_Key= NUM_PRESSED_KEY ;
	u8 loc_row_indx;
	u8 loc_col_indx;
	u8 loc_keypad_arr [4][4]=KEYPAD_ARR_MAP;
	u8 read;
	for(loc_row_indx=KEYPAD_R0_PIN;loc_row_indx<=KEYPAD_R3_PIN;loc_row_indx++)
    3eaa:	88 89       	ldd	r24, Y+16	; 0x10
    3eac:	8f 5f       	subi	r24, 0xFF	; 255
    3eae:	88 8b       	std	Y+16, r24	; 0x10
    3eb0:	88 89       	ldd	r24, Y+16	; 0x10
    3eb2:	88 30       	cpi	r24, 0x08	; 8
    3eb4:	08 f4       	brcc	.+2      	; 0x3eb8 <H_KEYPAD_void_getPressedKey+0x1f8>
    3eb6:	33 cf       	rjmp	.-410    	; 0x3d1e <H_KEYPAD_void_getPressedKey+0x5e>

			}// for
			// Deactivate row (HIGH )
		M_DIO_void_setPinValue(KEYPAD_ROWS_PORT,loc_row_indx,HIGH);
		}
		return loc_Key;
    3eb8:	89 89       	ldd	r24, Y+17	; 0x11
    3eba:	8b a3       	std	Y+35, r24	; 0x23
    3ebc:	8b a1       	ldd	r24, Y+35	; 0x23
	}
    3ebe:	a8 96       	adiw	r28, 0x28	; 40
    3ec0:	0f b6       	in	r0, 0x3f	; 63
    3ec2:	f8 94       	cli
    3ec4:	de bf       	out	0x3e, r29	; 62
    3ec6:	0f be       	out	0x3f, r0	; 63
    3ec8:	cd bf       	out	0x3d, r28	; 61
    3eca:	cf 91       	pop	r28
    3ecc:	df 91       	pop	r29
    3ece:	08 95       	ret

00003ed0 <Action0>:
#include"LED_int.h"
#include"GIE_int.h"
#include"EXT1_int.h"

void Action0(void)
{
    3ed0:	df 93       	push	r29
    3ed2:	cf 93       	push	r28
    3ed4:	cd b7       	in	r28, 0x3d	; 61
    3ed6:	de b7       	in	r29, 0x3e	; 62
  H_Led_void_toggle(RED_LED);
    3ed8:	80 e0       	ldi	r24, 0x00	; 0
    3eda:	0e 94 b1 12 	call	0x2562	; 0x2562 <H_Led_void_toggle>
}
    3ede:	cf 91       	pop	r28
    3ee0:	df 91       	pop	r29
    3ee2:	08 95       	ret

00003ee4 <main>:

void main()
{
    3ee4:	df 93       	push	r29
    3ee6:	cf 93       	push	r28
    3ee8:	cd b7       	in	r28, 0x3d	; 61
    3eea:	de b7       	in	r29, 0x3e	; 62
	H_Led_void_ledInit(RED_LED);
    3eec:	80 e0       	ldi	r24, 0x00	; 0
    3eee:	0e 94 1e 12 	call	0x243c	; 0x243c <H_Led_void_ledInit>
	M_EXTI_void_Enable(EXTI_INT0_ID,EXTI_TRIG_FALL__EDGE);
    3ef2:	86 e0       	ldi	r24, 0x06	; 6
    3ef4:	62 e0       	ldi	r22, 0x02	; 2
    3ef6:	0e 94 66 06 	call	0xccc	; 0xccc <M_EXTI_void_Enable>
	M_EXTI_void_setCallback(Action0,EXTI_INT0_ID);
    3efa:	88 e6       	ldi	r24, 0x68	; 104
    3efc:	9f e1       	ldi	r25, 0x1F	; 31
    3efe:	66 e0       	ldi	r22, 0x06	; 6
    3f00:	0e 94 2e 07 	call	0xe5c	; 0xe5c <M_EXTI_void_setCallback>
	M_GIE_void_enable();
    3f04:	0e 94 4f 06 	call	0xc9e	; 0xc9e <M_GIE_void_enable>
    3f08:	ff cf       	rjmp	.-2      	; 0x3f08 <main+0x24>

00003f0a <__udivmodqi4>:
    3f0a:	99 1b       	sub	r25, r25
    3f0c:	79 e0       	ldi	r23, 0x09	; 9
    3f0e:	04 c0       	rjmp	.+8      	; 0x3f18 <__udivmodqi4_ep>

00003f10 <__udivmodqi4_loop>:
    3f10:	99 1f       	adc	r25, r25
    3f12:	96 17       	cp	r25, r22
    3f14:	08 f0       	brcs	.+2      	; 0x3f18 <__udivmodqi4_ep>
    3f16:	96 1b       	sub	r25, r22

00003f18 <__udivmodqi4_ep>:
    3f18:	88 1f       	adc	r24, r24
    3f1a:	7a 95       	dec	r23
    3f1c:	c9 f7       	brne	.-14     	; 0x3f10 <__udivmodqi4_loop>
    3f1e:	80 95       	com	r24
    3f20:	08 95       	ret

00003f22 <__divmodsi4>:
    3f22:	97 fb       	bst	r25, 7
    3f24:	09 2e       	mov	r0, r25
    3f26:	05 26       	eor	r0, r21
    3f28:	0e d0       	rcall	.+28     	; 0x3f46 <__divmodsi4_neg1>
    3f2a:	57 fd       	sbrc	r21, 7
    3f2c:	04 d0       	rcall	.+8      	; 0x3f36 <__divmodsi4_neg2>
    3f2e:	14 d0       	rcall	.+40     	; 0x3f58 <__udivmodsi4>
    3f30:	0a d0       	rcall	.+20     	; 0x3f46 <__divmodsi4_neg1>
    3f32:	00 1c       	adc	r0, r0
    3f34:	38 f4       	brcc	.+14     	; 0x3f44 <__divmodsi4_exit>

00003f36 <__divmodsi4_neg2>:
    3f36:	50 95       	com	r21
    3f38:	40 95       	com	r20
    3f3a:	30 95       	com	r19
    3f3c:	21 95       	neg	r18
    3f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f40:	4f 4f       	sbci	r20, 0xFF	; 255
    3f42:	5f 4f       	sbci	r21, 0xFF	; 255

00003f44 <__divmodsi4_exit>:
    3f44:	08 95       	ret

00003f46 <__divmodsi4_neg1>:
    3f46:	f6 f7       	brtc	.-4      	; 0x3f44 <__divmodsi4_exit>
    3f48:	90 95       	com	r25
    3f4a:	80 95       	com	r24
    3f4c:	70 95       	com	r23
    3f4e:	61 95       	neg	r22
    3f50:	7f 4f       	sbci	r23, 0xFF	; 255
    3f52:	8f 4f       	sbci	r24, 0xFF	; 255
    3f54:	9f 4f       	sbci	r25, 0xFF	; 255
    3f56:	08 95       	ret

00003f58 <__udivmodsi4>:
    3f58:	a1 e2       	ldi	r26, 0x21	; 33
    3f5a:	1a 2e       	mov	r1, r26
    3f5c:	aa 1b       	sub	r26, r26
    3f5e:	bb 1b       	sub	r27, r27
    3f60:	fd 01       	movw	r30, r26
    3f62:	0d c0       	rjmp	.+26     	; 0x3f7e <__udivmodsi4_ep>

00003f64 <__udivmodsi4_loop>:
    3f64:	aa 1f       	adc	r26, r26
    3f66:	bb 1f       	adc	r27, r27
    3f68:	ee 1f       	adc	r30, r30
    3f6a:	ff 1f       	adc	r31, r31
    3f6c:	a2 17       	cp	r26, r18
    3f6e:	b3 07       	cpc	r27, r19
    3f70:	e4 07       	cpc	r30, r20
    3f72:	f5 07       	cpc	r31, r21
    3f74:	20 f0       	brcs	.+8      	; 0x3f7e <__udivmodsi4_ep>
    3f76:	a2 1b       	sub	r26, r18
    3f78:	b3 0b       	sbc	r27, r19
    3f7a:	e4 0b       	sbc	r30, r20
    3f7c:	f5 0b       	sbc	r31, r21

00003f7e <__udivmodsi4_ep>:
    3f7e:	66 1f       	adc	r22, r22
    3f80:	77 1f       	adc	r23, r23
    3f82:	88 1f       	adc	r24, r24
    3f84:	99 1f       	adc	r25, r25
    3f86:	1a 94       	dec	r1
    3f88:	69 f7       	brne	.-38     	; 0x3f64 <__udivmodsi4_loop>
    3f8a:	60 95       	com	r22
    3f8c:	70 95       	com	r23
    3f8e:	80 95       	com	r24
    3f90:	90 95       	com	r25
    3f92:	9b 01       	movw	r18, r22
    3f94:	ac 01       	movw	r20, r24
    3f96:	bd 01       	movw	r22, r26
    3f98:	cf 01       	movw	r24, r30
    3f9a:	08 95       	ret

00003f9c <__prologue_saves__>:
    3f9c:	2f 92       	push	r2
    3f9e:	3f 92       	push	r3
    3fa0:	4f 92       	push	r4
    3fa2:	5f 92       	push	r5
    3fa4:	6f 92       	push	r6
    3fa6:	7f 92       	push	r7
    3fa8:	8f 92       	push	r8
    3faa:	9f 92       	push	r9
    3fac:	af 92       	push	r10
    3fae:	bf 92       	push	r11
    3fb0:	cf 92       	push	r12
    3fb2:	df 92       	push	r13
    3fb4:	ef 92       	push	r14
    3fb6:	ff 92       	push	r15
    3fb8:	0f 93       	push	r16
    3fba:	1f 93       	push	r17
    3fbc:	cf 93       	push	r28
    3fbe:	df 93       	push	r29
    3fc0:	cd b7       	in	r28, 0x3d	; 61
    3fc2:	de b7       	in	r29, 0x3e	; 62
    3fc4:	ca 1b       	sub	r28, r26
    3fc6:	db 0b       	sbc	r29, r27
    3fc8:	0f b6       	in	r0, 0x3f	; 63
    3fca:	f8 94       	cli
    3fcc:	de bf       	out	0x3e, r29	; 62
    3fce:	0f be       	out	0x3f, r0	; 63
    3fd0:	cd bf       	out	0x3d, r28	; 61
    3fd2:	09 94       	ijmp

00003fd4 <__epilogue_restores__>:
    3fd4:	2a 88       	ldd	r2, Y+18	; 0x12
    3fd6:	39 88       	ldd	r3, Y+17	; 0x11
    3fd8:	48 88       	ldd	r4, Y+16	; 0x10
    3fda:	5f 84       	ldd	r5, Y+15	; 0x0f
    3fdc:	6e 84       	ldd	r6, Y+14	; 0x0e
    3fde:	7d 84       	ldd	r7, Y+13	; 0x0d
    3fe0:	8c 84       	ldd	r8, Y+12	; 0x0c
    3fe2:	9b 84       	ldd	r9, Y+11	; 0x0b
    3fe4:	aa 84       	ldd	r10, Y+10	; 0x0a
    3fe6:	b9 84       	ldd	r11, Y+9	; 0x09
    3fe8:	c8 84       	ldd	r12, Y+8	; 0x08
    3fea:	df 80       	ldd	r13, Y+7	; 0x07
    3fec:	ee 80       	ldd	r14, Y+6	; 0x06
    3fee:	fd 80       	ldd	r15, Y+5	; 0x05
    3ff0:	0c 81       	ldd	r16, Y+4	; 0x04
    3ff2:	1b 81       	ldd	r17, Y+3	; 0x03
    3ff4:	aa 81       	ldd	r26, Y+2	; 0x02
    3ff6:	b9 81       	ldd	r27, Y+1	; 0x01
    3ff8:	ce 0f       	add	r28, r30
    3ffa:	d1 1d       	adc	r29, r1
    3ffc:	0f b6       	in	r0, 0x3f	; 63
    3ffe:	f8 94       	cli
    4000:	de bf       	out	0x3e, r29	; 62
    4002:	0f be       	out	0x3f, r0	; 63
    4004:	cd bf       	out	0x3d, r28	; 61
    4006:	ed 01       	movw	r28, r26
    4008:	08 95       	ret

0000400a <_exit>:
    400a:	f8 94       	cli

0000400c <__stop_program>:
    400c:	ff cf       	rjmp	.-2      	; 0x400c <__stop_program>
